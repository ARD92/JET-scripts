# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: authentication_service.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1c\x61uthentication_service.proto\x12\x0e\x61uthentication\"X\n\x0cLoginRequest\x12\x11\n\tuser_name\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\x12\x11\n\tclient_id\x18\x03 \x01(\t\x12\x10\n\x08group_id\x18\x04 \x01(\t\"\x1c\n\nLoginReply\x12\x0e\n\x06result\x18\x01 \x01(\x08\x32Q\n\x05Login\x12H\n\nLoginCheck\x12\x1c.authentication.LoginRequest\x1a\x1a.authentication.LoginReply\"\x00\x62\x06proto3')



_LOGINREQUEST = DESCRIPTOR.message_types_by_name['LoginRequest']
_LOGINREPLY = DESCRIPTOR.message_types_by_name['LoginReply']
LoginRequest = _reflection.GeneratedProtocolMessageType('LoginRequest', (_message.Message,), {
  'DESCRIPTOR' : _LOGINREQUEST,
  '__module__' : 'authentication_service_pb2'
  # @@protoc_insertion_point(class_scope:authentication.LoginRequest)
  })
_sym_db.RegisterMessage(LoginRequest)

LoginReply = _reflection.GeneratedProtocolMessageType('LoginReply', (_message.Message,), {
  'DESCRIPTOR' : _LOGINREPLY,
  '__module__' : 'authentication_service_pb2'
  # @@protoc_insertion_point(class_scope:authentication.LoginReply)
  })
_sym_db.RegisterMessage(LoginReply)

_LOGIN = DESCRIPTOR.services_by_name['Login']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _LOGINREQUEST._serialized_start=48
  _LOGINREQUEST._serialized_end=136
  _LOGINREPLY._serialized_start=138
  _LOGINREPLY._serialized_end=166
  _LOGIN._serialized_start=168
  _LOGIN._serialized_end=249
# @@protoc_insertion_point(module_scope)
