//*
// $Id$
//
// Copyright (c) 2016, Juniper Networks, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.9.1
// source: prpd_service.proto

package prpd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// ------------------------------------------------------------------
// Request message to configure a purge timer for the client
// ------------------------------------------------------------------
type RtPurgeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Purge time to be configured for the client
	Time uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RtPurgeConfigRequest) Reset() {
	*x = RtPurgeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtPurgeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtPurgeConfigRequest) ProtoMessage() {}

func (x *RtPurgeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtPurgeConfigRequest.ProtoReflect.Descriptor instead.
func (*RtPurgeConfigRequest) Descriptor() ([]byte, []int) {
	return file_prpd_service_proto_rawDescGZIP(), []int{0}
}

func (x *RtPurgeConfigRequest) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

//*
// ------------------------------------------------------------------
// Generic empty request message
// ------------------------------------------------------------------
type RtEmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RtEmptyRequest) Reset() {
	*x = RtEmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtEmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtEmptyRequest) ProtoMessage() {}

func (x *RtEmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtEmptyRequest.ProtoReflect.Descriptor instead.
func (*RtEmptyRequest) Descriptor() ([]byte, []int) {
	return file_prpd_service_proto_rawDescGZIP(), []int{1}
}

//*
// ------------------------------------------------------------------
// Reply message to get the return code for a operation performed
// ------------------------------------------------------------------
type RtOperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return code indicating the success or failure of the operation and in
	// case of failure, the code will indicate the type of the failure which
	// occurred.
	RetCode ReturnCode `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3,enum=routing.ReturnCode" json:"ret_code,omitempty"`
}

func (x *RtOperReply) Reset() {
	*x = RtOperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtOperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtOperReply) ProtoMessage() {}

func (x *RtOperReply) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtOperReply.ProtoReflect.Descriptor instead.
func (*RtOperReply) Descriptor() ([]byte, []int) {
	return file_prpd_service_proto_rawDescGZIP(), []int{2}
}

func (x *RtOperReply) GetRetCode() ReturnCode {
	if x != nil {
		return x.RetCode
	}
	return ReturnCode_RET_SUCCESS
}

//*
// ------------------------------------------------------------------
// Reply message to get purge timer for the client
// ------------------------------------------------------------------
type RtPurgeTimeGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return code indicating the success or failure of the operation and in
	// case of failure, the code will indicate the type of the failure which
	// occurred.
	RetCode ReturnCode `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3,enum=routing.ReturnCode" json:"ret_code,omitempty"`
	// Purge time for the client
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RtPurgeTimeGetReply) Reset() {
	*x = RtPurgeTimeGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtPurgeTimeGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtPurgeTimeGetReply) ProtoMessage() {}

func (x *RtPurgeTimeGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtPurgeTimeGetReply.ProtoReflect.Descriptor instead.
func (*RtPurgeTimeGetReply) Descriptor() ([]byte, []int) {
	return file_prpd_service_proto_rawDescGZIP(), []int{3}
}

func (x *RtPurgeTimeGetReply) GetRetCode() ReturnCode {
	if x != nil {
		return x.RetCode
	}
	return ReturnCode_RET_SUCCESS
}

func (x *RtPurgeTimeGetReply) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_prpd_service_proto protoreflect.FileDescriptor

var file_prpd_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x70, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x11, 0x70,
	0x72, 0x70, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2a, 0x0a, 0x14, 0x52, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e,
	0x52, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x0b, 0x52, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a,
	0x13, 0x52, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xee, 0x01, 0x0a, 0x04, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x74,
	0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x74, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x6a, 0x6e, 0x78,
	0x2f, 0x6a, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x70, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_prpd_service_proto_rawDescOnce sync.Once
	file_prpd_service_proto_rawDescData = file_prpd_service_proto_rawDesc
)

func file_prpd_service_proto_rawDescGZIP() []byte {
	file_prpd_service_proto_rawDescOnce.Do(func() {
		file_prpd_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_prpd_service_proto_rawDescData)
	})
	return file_prpd_service_proto_rawDescData
}

var file_prpd_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_prpd_service_proto_goTypes = []interface{}{
	(*RtPurgeConfigRequest)(nil), // 0: routing.RtPurgeConfigRequest
	(*RtEmptyRequest)(nil),       // 1: routing.RtEmptyRequest
	(*RtOperReply)(nil),          // 2: routing.RtOperReply
	(*RtPurgeTimeGetReply)(nil),  // 3: routing.RtPurgeTimeGetReply
	(ReturnCode)(0),              // 4: routing.ReturnCode
}
var file_prpd_service_proto_depIdxs = []int32{
	4, // 0: routing.RtOperReply.ret_code:type_name -> routing.ReturnCode
	4, // 1: routing.RtPurgeTimeGetReply.ret_code:type_name -> routing.ReturnCode
	0, // 2: routing.Base.RoutePurgeTimeConfig:input_type -> routing.RtPurgeConfigRequest
	1, // 3: routing.Base.RoutePurgeTimeUnconfig:input_type -> routing.RtEmptyRequest
	1, // 4: routing.Base.RoutePurgeTimeGet:input_type -> routing.RtEmptyRequest
	2, // 5: routing.Base.RoutePurgeTimeConfig:output_type -> routing.RtOperReply
	2, // 6: routing.Base.RoutePurgeTimeUnconfig:output_type -> routing.RtOperReply
	3, // 7: routing.Base.RoutePurgeTimeGet:output_type -> routing.RtPurgeTimeGetReply
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_prpd_service_proto_init() }
func file_prpd_service_proto_init() {
	if File_prpd_service_proto != nil {
		return
	}
	file_prpd_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prpd_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtPurgeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtEmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtOperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtPurgeTimeGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prpd_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prpd_service_proto_goTypes,
		DependencyIndexes: file_prpd_service_proto_depIdxs,
		MessageInfos:      file_prpd_service_proto_msgTypes,
	}.Build()
	File_prpd_service_proto = out.File
	file_prpd_service_proto_rawDesc = nil
	file_prpd_service_proto_goTypes = nil
	file_prpd_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BaseClient interface {
	//*
	// ---------------------------------------------------------------
	// Service to configure purge timer for the client
	// ---------------------------------------------------------------
	//
	// Configure a purge timer for the client so that server side will retain
	// the client installed routes till this time after client disconnects and
	// provide sufficient time for the client to reconnect if possible.
	RoutePurgeTimeConfig(ctx context.Context, in *RtPurgeConfigRequest, opts ...grpc.CallOption) (*RtOperReply, error)
	//*
	// ---------------------------------------------------------------
	// Service to unconfigure purge timer for the client
	// ---------------------------------------------------------------
	//
	// Unconfigure a previously configured purge timer for the client.
	RoutePurgeTimeUnconfig(ctx context.Context, in *RtEmptyRequest, opts ...grpc.CallOption) (*RtOperReply, error)
	//*
	// ---------------------------------------------------------------
	// Service to retrive the purge timer for the client
	// ---------------------------------------------------------------
	//
	// Get a purge timer for the client
	RoutePurgeTimeGet(ctx context.Context, in *RtEmptyRequest, opts ...grpc.CallOption) (*RtPurgeTimeGetReply, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) RoutePurgeTimeConfig(ctx context.Context, in *RtPurgeConfigRequest, opts ...grpc.CallOption) (*RtOperReply, error) {
	out := new(RtOperReply)
	err := c.cc.Invoke(ctx, "/routing.Base/RoutePurgeTimeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) RoutePurgeTimeUnconfig(ctx context.Context, in *RtEmptyRequest, opts ...grpc.CallOption) (*RtOperReply, error) {
	out := new(RtOperReply)
	err := c.cc.Invoke(ctx, "/routing.Base/RoutePurgeTimeUnconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) RoutePurgeTimeGet(ctx context.Context, in *RtEmptyRequest, opts ...grpc.CallOption) (*RtPurgeTimeGetReply, error) {
	out := new(RtPurgeTimeGetReply)
	err := c.cc.Invoke(ctx, "/routing.Base/RoutePurgeTimeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
type BaseServer interface {
	//*
	// ---------------------------------------------------------------
	// Service to configure purge timer for the client
	// ---------------------------------------------------------------
	//
	// Configure a purge timer for the client so that server side will retain
	// the client installed routes till this time after client disconnects and
	// provide sufficient time for the client to reconnect if possible.
	RoutePurgeTimeConfig(context.Context, *RtPurgeConfigRequest) (*RtOperReply, error)
	//*
	// ---------------------------------------------------------------
	// Service to unconfigure purge timer for the client
	// ---------------------------------------------------------------
	//
	// Unconfigure a previously configured purge timer for the client.
	RoutePurgeTimeUnconfig(context.Context, *RtEmptyRequest) (*RtOperReply, error)
	//*
	// ---------------------------------------------------------------
	// Service to retrive the purge timer for the client
	// ---------------------------------------------------------------
	//
	// Get a purge timer for the client
	RoutePurgeTimeGet(context.Context, *RtEmptyRequest) (*RtPurgeTimeGetReply, error)
}

// UnimplementedBaseServer can be embedded to have forward compatible implementations.
type UnimplementedBaseServer struct {
}

func (*UnimplementedBaseServer) RoutePurgeTimeConfig(context.Context, *RtPurgeConfigRequest) (*RtOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePurgeTimeConfig not implemented")
}
func (*UnimplementedBaseServer) RoutePurgeTimeUnconfig(context.Context, *RtEmptyRequest) (*RtOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePurgeTimeUnconfig not implemented")
}
func (*UnimplementedBaseServer) RoutePurgeTimeGet(context.Context, *RtEmptyRequest) (*RtPurgeTimeGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePurgeTimeGet not implemented")
}

func RegisterBaseServer(s *grpc.Server, srv BaseServer) {
	s.RegisterService(&_Base_serviceDesc, srv)
}

func _Base_RoutePurgeTimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtPurgeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).RoutePurgeTimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Base/RoutePurgeTimeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).RoutePurgeTimeConfig(ctx, req.(*RtPurgeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_RoutePurgeTimeUnconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).RoutePurgeTimeUnconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Base/RoutePurgeTimeUnconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).RoutePurgeTimeUnconfig(ctx, req.(*RtEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_RoutePurgeTimeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RtEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).RoutePurgeTimeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.Base/RoutePurgeTimeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).RoutePurgeTimeGet(ctx, req.(*RtEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Base_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routing.Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoutePurgeTimeConfig",
			Handler:    _Base_RoutePurgeTimeConfig_Handler,
		},
		{
			MethodName: "RoutePurgeTimeUnconfig",
			Handler:    _Base_RoutePurgeTimeUnconfig_Handler,
		},
		{
			MethodName: "RoutePurgeTimeGet",
			Handler:    _Base_RoutePurgeTimeGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prpd_service.proto",
}
