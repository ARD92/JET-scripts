//*
// $Id$
//
// Copyright (c) 2020, Juniper Networks, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.9.1
// source: prpd_common.proto

package prpd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "jnx/jet/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// ----------------------------------------------------------------------------
// Different types of return codes to be sent back to client based on the
// operation was successful or not and if not, possibly more specific reasons
// as to why it failed.
// ----------------------------------------------------------------------------
type ReturnCode int32

const (
	// Operation was executed successfully
	ReturnCode_RET_SUCCESS ReturnCode = 0
	// General failure : operation not executed successfully
	ReturnCode_RET_FAILURE ReturnCode = 1
	// Entry was not found
	ReturnCode_RET_NOT_FOUND ReturnCode = 2
	// Invalid input paramters
	ReturnCode_RET_INVALID_PARAMS ReturnCode = 3
)

// Enum value maps for ReturnCode.
var (
	ReturnCode_name = map[int32]string{
		0: "RET_SUCCESS",
		1: "RET_FAILURE",
		2: "RET_NOT_FOUND",
		3: "RET_INVALID_PARAMS",
	}
	ReturnCode_value = map[string]int32{
		"RET_SUCCESS":        0,
		"RET_FAILURE":        1,
		"RET_NOT_FOUND":      2,
		"RET_INVALID_PARAMS": 3,
	}
)

func (x ReturnCode) Enum() *ReturnCode {
	p := new(ReturnCode)
	*p = x
	return p
}

func (x ReturnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[0].Descriptor()
}

func (ReturnCode) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[0]
}

func (x ReturnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnCode.Descriptor instead.
func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{0}
}

//*
// The table format allows the client to request the format that the
// server should use to represent tables in replies sent by the server
// to the client.
type RouteTableFormat int32

const (
	//* The server will represent tables by name as strings
	RouteTableFormat_TABLE_STRING RouteTableFormat = 0
	//* The server will represent tables by RPD table ID
	RouteTableFormat_TABLE_ID RouteTableFormat = 1
)

// Enum value maps for RouteTableFormat.
var (
	RouteTableFormat_name = map[int32]string{
		0: "TABLE_STRING",
		1: "TABLE_ID",
	}
	RouteTableFormat_value = map[string]int32{
		"TABLE_STRING": 0,
		"TABLE_ID":     1,
	}
)

func (x RouteTableFormat) Enum() *RouteTableFormat {
	p := new(RouteTableFormat)
	*p = x
	return p
}

func (x RouteTableFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteTableFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[1].Descriptor()
}

func (RouteTableFormat) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[1]
}

func (x RouteTableFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteTableFormat.Descriptor instead.
func (RouteTableFormat) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{1}
}

//*
// Routing table destination address families.
type RouteAfType int32

const (
	//* Unspecified
	RouteAfType_RT_AF_UNSPEC RouteAfType = 0
	//* IPv4 destination prefix
	RouteAfType_RT_AF_INET RouteAfType = 1
	//* IPv6 destination prefix
	RouteAfType_RT_AF_INET6 RouteAfType = 2
	//* IPv4 VPN (L3VPN) destination prefix
	RouteAfType_RT_AF_INETVPN RouteAfType = 3
	//* IPv6 VPN (L3VPN) destination prefix
	RouteAfType_RT_AF_INET6VPN RouteAfType = 4
	//* IPv4 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET RouteAfType = 5
	//* IPv6 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET6 RouteAfType = 6
	//* IPv4 SRTE destination prefix
	RouteAfType_RT_AF_INET_SRTE RouteAfType = 7
	//* IPv6 SRTE destination prefix
	RouteAfType_RT_AF_INET6_SRTE RouteAfType = 8
	//* IPv4 Flowspec prefix.
	RouteAfType_RT_AF_INET_FLOWSPEC RouteAfType = 9
	//* IPv4 Flowspec prefix.
	RouteAfType_RT_AF_INET6_FLOWSPEC RouteAfType = 10
)

// Enum value maps for RouteAfType.
var (
	RouteAfType_name = map[int32]string{
		0:  "RT_AF_UNSPEC",
		1:  "RT_AF_INET",
		2:  "RT_AF_INET6",
		3:  "RT_AF_INETVPN",
		4:  "RT_AF_INET6VPN",
		5:  "RT_AF_LABELED_INET",
		6:  "RT_AF_LABELED_INET6",
		7:  "RT_AF_INET_SRTE",
		8:  "RT_AF_INET6_SRTE",
		9:  "RT_AF_INET_FLOWSPEC",
		10: "RT_AF_INET6_FLOWSPEC",
	}
	RouteAfType_value = map[string]int32{
		"RT_AF_UNSPEC":         0,
		"RT_AF_INET":           1,
		"RT_AF_INET6":          2,
		"RT_AF_INETVPN":        3,
		"RT_AF_INET6VPN":       4,
		"RT_AF_LABELED_INET":   5,
		"RT_AF_LABELED_INET6":  6,
		"RT_AF_INET_SRTE":      7,
		"RT_AF_INET6_SRTE":     8,
		"RT_AF_INET_FLOWSPEC":  9,
		"RT_AF_INET6_FLOWSPEC": 10,
	}
)

func (x RouteAfType) Enum() *RouteAfType {
	p := new(RouteAfType)
	*p = x
	return p
}

func (x RouteAfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteAfType) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[2].Descriptor()
}

func (RouteAfType) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[2]
}

func (x RouteAfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteAfType.Descriptor instead.
func (RouteAfType) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{2}
}

//*
// Label operations
type LabelOperation int32

const (
	LabelOperation_NOOP LabelOperation = 0
	LabelOperation_POP  LabelOperation = 1
	LabelOperation_PUSH LabelOperation = 2
	LabelOperation_SWAP LabelOperation = 3
)

// Enum value maps for LabelOperation.
var (
	LabelOperation_name = map[int32]string{
		0: "NOOP",
		1: "POP",
		2: "PUSH",
		3: "SWAP",
	}
	LabelOperation_value = map[string]int32{
		"NOOP": 0,
		"POP":  1,
		"PUSH": 2,
		"SWAP": 3,
	}
)

func (x LabelOperation) Enum() *LabelOperation {
	p := new(LabelOperation)
	*p = x
	return p
}

func (x LabelOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[3].Descriptor()
}

func (LabelOperation) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[3]
}

func (x LabelOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelOperation.Descriptor instead.
func (LabelOperation) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{3}
}

//*
// ENLP possible Operations.
// This operation can be used to specify the Explicit NULL action.
// Possible operations indicate if IPv4 or IPv6 Explicit Null need to be pushed.
type SRTEEnlpOperations int32

const (
	SRTEEnlpOperations_SRTE_ENLP_INVALID_VAL            SRTEEnlpOperations = 0
	SRTEEnlpOperations_PUSH_IPV4_EXP_NULL_LABEL         SRTEEnlpOperations = 1
	SRTEEnlpOperations_PUSH_IPV6_EXP_NULL_LABEL         SRTEEnlpOperations = 2
	SRTEEnlpOperations_PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL SRTEEnlpOperations = 3
	SRTEEnlpOperations_DO_NOT_PUSH_EXPLICIT_NULL_LABEL  SRTEEnlpOperations = 4
)

// Enum value maps for SRTEEnlpOperations.
var (
	SRTEEnlpOperations_name = map[int32]string{
		0: "SRTE_ENLP_INVALID_VAL",
		1: "PUSH_IPV4_EXP_NULL_LABEL",
		2: "PUSH_IPV6_EXP_NULL_LABEL",
		3: "PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL",
		4: "DO_NOT_PUSH_EXPLICIT_NULL_LABEL",
	}
	SRTEEnlpOperations_value = map[string]int32{
		"SRTE_ENLP_INVALID_VAL":            0,
		"PUSH_IPV4_EXP_NULL_LABEL":         1,
		"PUSH_IPV6_EXP_NULL_LABEL":         2,
		"PUSH_IPV4_OR_IPV6_EXP_NULL_LABEL": 3,
		"DO_NOT_PUSH_EXPLICIT_NULL_LABEL":  4,
	}
)

func (x SRTEEnlpOperations) Enum() *SRTEEnlpOperations {
	p := new(SRTEEnlpOperations)
	*p = x
	return p
}

func (x SRTEEnlpOperations) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRTEEnlpOperations) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[4].Descriptor()
}

func (SRTEEnlpOperations) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[4]
}

func (x SRTEEnlpOperations) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRTEEnlpOperations.Descriptor instead.
func (SRTEEnlpOperations) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{4}
}

//*
// Protocol types that define protocols that added the route.
// RTPROTO_OTHER denotes other internal protocols currently not exposed
// to API.
type RouteProtoType int32

const (
	//* Matches any protocol
	RouteProtoType_ANY RouteProtoType = 0
	//* route is directly connected
	RouteProtoType_DIRECT RouteProtoType = 1
	//* route to local side of P2P interface
	RouteProtoType_LOCAL RouteProtoType = 2
	//* route was installed in kernel previously
	RouteProtoType_KERNEL RouteProtoType = 3
	//* route was received via a redirect
	RouteProtoType_REDIRECT RouteProtoType = 4
	//* OSPF2 AS Internal routes
	RouteProtoType_OSPF RouteProtoType = 5
	//* OSPF3 AS Internal routes
	RouteProtoType_OSPF3 RouteProtoType = 6
	//* OSPF AS Internal routes
	RouteProtoType_OSPF_ANY RouteProtoType = 7
	//* Routing Information protocol
	RouteProtoType_RIP RouteProtoType = 8
	//* Routing Information protocol for v6
	RouteProtoType_RIPNG RouteProtoType = 9
	//* Border gateway protocol
	RouteProtoType_BGP RouteProtoType = 10
	//* route is static
	RouteProtoType_STATIC RouteProtoType = 11
	//* IS-IS
	RouteProtoType_ISIS RouteProtoType = 12
	//* For IGMP stuff
	RouteProtoType_IGMP RouteProtoType = 13
	//* Aggregate route
	RouteProtoType_AGGREGATE RouteProtoType = 14
	//* Distance Vector Multicast Routing Protocol
	RouteProtoType_DVMRP RouteProtoType = 15
	//* Protocol Independent Multicast
	RouteProtoType_PIM RouteProtoType = 16
	//* Multicast Source Discovery Protocol
	RouteProtoType_MSDP RouteProtoType = 17
	//* MPLS switching
	RouteProtoType_MPLS RouteProtoType = 18
	//* RSVP
	RouteProtoType_RSVP RouteProtoType = 19
	//* Circuit Cross-Connect
	RouteProtoType_CCC RouteProtoType = 20
	//* LDP
	RouteProtoType_LDP RouteProtoType = 21
	//* VPN protocol, L3
	RouteProtoType_VPN RouteProtoType = 22
	//* MVPN protocol, L3
	RouteProtoType_MVPN RouteProtoType = 23
	//* multicast info
	RouteProtoType_MCAST RouteProtoType = 24
	//* VPN protocol, L2
	RouteProtoType_L2VPN RouteProtoType = 25
	//* l2circuit protocol
	RouteProtoType_L2CKT RouteProtoType = 26
	//* BGP Static
	RouteProtoType_BGP_STATIC RouteProtoType = 27
	//* RIFT
	RouteProtoType_RIFT RouteProtoType = 28
	//* Protocols not exposed and internal to Routing backend
	RouteProtoType_OTHER RouteProtoType = 29
	//* Layer-2-learned host routing
	RouteProtoType_L2_LEARNED_HOST_ROUTING RouteProtoType = 30
)

// Enum value maps for RouteProtoType.
var (
	RouteProtoType_name = map[int32]string{
		0:  "ANY",
		1:  "DIRECT",
		2:  "LOCAL",
		3:  "KERNEL",
		4:  "REDIRECT",
		5:  "OSPF",
		6:  "OSPF3",
		7:  "OSPF_ANY",
		8:  "RIP",
		9:  "RIPNG",
		10: "BGP",
		11: "STATIC",
		12: "ISIS",
		13: "IGMP",
		14: "AGGREGATE",
		15: "DVMRP",
		16: "PIM",
		17: "MSDP",
		18: "MPLS",
		19: "RSVP",
		20: "CCC",
		21: "LDP",
		22: "VPN",
		23: "MVPN",
		24: "MCAST",
		25: "L2VPN",
		26: "L2CKT",
		27: "BGP_STATIC",
		28: "RIFT",
		29: "OTHER",
		30: "L2_LEARNED_HOST_ROUTING",
	}
	RouteProtoType_value = map[string]int32{
		"ANY":                     0,
		"DIRECT":                  1,
		"LOCAL":                   2,
		"KERNEL":                  3,
		"REDIRECT":                4,
		"OSPF":                    5,
		"OSPF3":                   6,
		"OSPF_ANY":                7,
		"RIP":                     8,
		"RIPNG":                   9,
		"BGP":                     10,
		"STATIC":                  11,
		"ISIS":                    12,
		"IGMP":                    13,
		"AGGREGATE":               14,
		"DVMRP":                   15,
		"PIM":                     16,
		"MSDP":                    17,
		"MPLS":                    18,
		"RSVP":                    19,
		"CCC":                     20,
		"LDP":                     21,
		"VPN":                     22,
		"MVPN":                    23,
		"MCAST":                   24,
		"L2VPN":                   25,
		"L2CKT":                   26,
		"BGP_STATIC":              27,
		"RIFT":                    28,
		"OTHER":                   29,
		"L2_LEARNED_HOST_ROUTING": 30,
	}
)

func (x RouteProtoType) Enum() *RouteProtoType {
	p := new(RouteProtoType)
	*p = x
	return p
}

func (x RouteProtoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteProtoType) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[5].Descriptor()
}

func (RouteProtoType) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[5]
}

func (x RouteProtoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteProtoType.Descriptor instead.
func (RouteProtoType) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{5}
}

type RpcStatus_RpcStatusCode int32

const (
	RpcStatus_SUCCESS RpcStatus_RpcStatusCode = 0
	RpcStatus_FAILURE RpcStatus_RpcStatusCode = 1
)

// Enum value maps for RpcStatus_RpcStatusCode.
var (
	RpcStatus_RpcStatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	RpcStatus_RpcStatusCode_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x RpcStatus_RpcStatusCode) Enum() *RpcStatus_RpcStatusCode {
	p := new(RpcStatus_RpcStatusCode)
	*p = x
	return p
}

func (x RpcStatus_RpcStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcStatus_RpcStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[6].Descriptor()
}

func (RpcStatus_RpcStatusCode) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[6]
}

func (x RpcStatus_RpcStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcStatus_RpcStatusCode.Descriptor instead.
func (RpcStatus_RpcStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{0, 0}
}

//* Well-known label values defined by RFC 3032. These must only be
//  used in label stacks in accordance with the rules of RFC 3032.
type LabelEntry_WellKnownLabels int32

const (
	//* IPv4 Explicit NULL: valid only at bottom of stack
	LabelEntry_IPV4_EXPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 0
	//* Router Alert: valid anywhere in a label stack except bottom
	LabelEntry_ROUTER_ALERT_LABEL LabelEntry_WellKnownLabels = 1
	//* IPv6 Explict NULL: valid only at bottom of stack
	LabelEntry_IPV6_EXPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 2
	//* Implicit NULL: See RFC 3032
	LabelEntry_IMPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 3
)

// Enum value maps for LabelEntry_WellKnownLabels.
var (
	LabelEntry_WellKnownLabels_name = map[int32]string{
		0: "IPV4_EXPLICIT_NULL_LABEL",
		1: "ROUTER_ALERT_LABEL",
		2: "IPV6_EXPLICIT_NULL_LABEL",
		3: "IMPLICIT_NULL_LABEL",
	}
	LabelEntry_WellKnownLabels_value = map[string]int32{
		"IPV4_EXPLICIT_NULL_LABEL": 0,
		"ROUTER_ALERT_LABEL":       1,
		"IPV6_EXPLICIT_NULL_LABEL": 2,
		"IMPLICIT_NULL_LABEL":      3,
	}
)

func (x LabelEntry_WellKnownLabels) Enum() *LabelEntry_WellKnownLabels {
	p := new(LabelEntry_WellKnownLabels)
	*p = x
	return p
}

func (x LabelEntry_WellKnownLabels) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelEntry_WellKnownLabels) Descriptor() protoreflect.EnumDescriptor {
	return file_prpd_common_proto_enumTypes[7].Descriptor()
}

func (LabelEntry_WellKnownLabels) Type() protoreflect.EnumType {
	return &file_prpd_common_proto_enumTypes[7]
}

func (x LabelEntry_WellKnownLabels) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelEntry_WellKnownLabels.Descriptor instead.
func (LabelEntry_WellKnownLabels) EnumDescriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{9, 0}
}

//*
// ---------------------------------------------------------------------------
// Standard Rpc return status which contains a string message so more secific
// infomation can be returned for troubleshooting.
// ---------------------------------------------------------------------------
type RpcStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Numerical code indicating success or failure of an RPC.
	Code RpcStatus_RpcStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=routing.RpcStatus_RpcStatusCode" json:"code,omitempty"`
	//*
	// Informational message string to convey reason for RPC failure.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RpcStatus) Reset() {
	*x = RpcStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcStatus) ProtoMessage() {}

func (x *RpcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcStatus.ProtoReflect.Descriptor instead.
func (*RpcStatus) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{0}
}

func (x *RpcStatus) GetCode() RpcStatus_RpcStatusCode {
	if x != nil {
		return x.Code
	}
	return RpcStatus_SUCCESS
}

func (x *RpcStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// Routing table (RIB) name uniquely identifying a route table,
// formatted as a string per JUNOS convention.
type RouteTableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Table name. REQUIRED
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RouteTableName) Reset() {
	*x = RouteTableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableName) ProtoMessage() {}

func (x *RouteTableName) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableName.ProtoReflect.Descriptor instead.
func (*RouteTableName) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{1}
}

func (x *RouteTableName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// Routing table identifier as an integer value uniquely identifying a table.
type RouteTableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Table identifier. REQUIRED
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RouteTableId) Reset() {
	*x = RouteTableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableId) ProtoMessage() {}

func (x *RouteTableId) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableId.ProtoReflect.Descriptor instead.
func (*RouteTableId) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{2}
}

func (x *RouteTableId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//*
// Routing table (RIB), which may either be specified as a string or
// RPD table ID.
type RouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RtTableFormat:
	//	*RouteTable_RttId
	//	*RouteTable_RttName
	RtTableFormat isRouteTable_RtTableFormat `protobuf_oneof:"RtTableFormat"`
}

func (x *RouteTable) Reset() {
	*x = RouteTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTable) ProtoMessage() {}

func (x *RouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTable.ProtoReflect.Descriptor instead.
func (*RouteTable) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{3}
}

func (m *RouteTable) GetRtTableFormat() isRouteTable_RtTableFormat {
	if m != nil {
		return m.RtTableFormat
	}
	return nil
}

func (x *RouteTable) GetRttId() *RouteTableId {
	if x, ok := x.GetRtTableFormat().(*RouteTable_RttId); ok {
		return x.RttId
	}
	return nil
}

func (x *RouteTable) GetRttName() *RouteTableName {
	if x, ok := x.GetRtTableFormat().(*RouteTable_RttName); ok {
		return x.RttName
	}
	return nil
}

type isRouteTable_RtTableFormat interface {
	isRouteTable_RtTableFormat()
}

type RouteTable_RttId struct {
	//* Table id to which the route belongs
	RttId *RouteTableId `protobuf:"bytes,1,opt,name=rtt_id,json=rttId,proto3,oneof"`
}

type RouteTable_RttName struct {
	//* Table name to which the route belongs
	RttName *RouteTableName `protobuf:"bytes,2,opt,name=rtt_name,json=rttName,proto3,oneof"`
}

func (*RouteTable_RttId) isRouteTable_RtTableFormat() {}

func (*RouteTable_RttName) isRouteTable_RtTableFormat() {}

//* RFC 4364 Route type 0: 2-byte AS and assigned number
type RdType0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 2 byte AS number
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	//* 4 byte assigned number subfield
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType0) Reset() {
	*x = RdType0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType0) ProtoMessage() {}

func (x *RdType0) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType0.ProtoReflect.Descriptor instead.
func (*RdType0) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{4}
}

func (x *RdType0) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RdType0) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

//* RFC 4364 Route type 1: IPv4 address and assigned number
type RdType1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 4 byte IP address
	IpAddress *common.IpAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	//* 2 byte assigned number subfield
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType1) Reset() {
	*x = RdType1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType1) ProtoMessage() {}

func (x *RdType1) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType1.ProtoReflect.Descriptor instead.
func (*RdType1) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{5}
}

func (x *RdType1) GetIpAddress() *common.IpAddress {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *RdType1) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

//* RFC 4364 Route type 2: 4-byte AS and assigned number
type RdType2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 4 byte AS number
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// 2 byte assigned number subfield
	AssignedNumber uint32 `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
}

func (x *RdType2) Reset() {
	*x = RdType2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdType2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdType2) ProtoMessage() {}

func (x *RdType2) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdType2.ProtoReflect.Descriptor instead.
func (*RdType2) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{6}
}

func (x *RdType2) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RdType2) GetAssignedNumber() uint32 {
	if x != nil {
		return x.AssignedNumber
	}
	return 0
}

//*
// An RFC 4364 route distinguisher to distinguish customer VPN routes
// within the BGP NLRIs. Valid RD can be type 0, type 1, or type 2.
type RouteDistinguisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RdFormat:
	//	*RouteDistinguisher_Rd0
	//	*RouteDistinguisher_Rd1
	//	*RouteDistinguisher_Rd2
	RdFormat isRouteDistinguisher_RdFormat `protobuf_oneof:"RdFormat"`
}

func (x *RouteDistinguisher) Reset() {
	*x = RouteDistinguisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteDistinguisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteDistinguisher) ProtoMessage() {}

func (x *RouteDistinguisher) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteDistinguisher.ProtoReflect.Descriptor instead.
func (*RouteDistinguisher) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{7}
}

func (m *RouteDistinguisher) GetRdFormat() isRouteDistinguisher_RdFormat {
	if m != nil {
		return m.RdFormat
	}
	return nil
}

func (x *RouteDistinguisher) GetRd0() *RdType0 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd0); ok {
		return x.Rd0
	}
	return nil
}

func (x *RouteDistinguisher) GetRd1() *RdType1 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd1); ok {
		return x.Rd1
	}
	return nil
}

func (x *RouteDistinguisher) GetRd2() *RdType2 {
	if x, ok := x.GetRdFormat().(*RouteDistinguisher_Rd2); ok {
		return x.Rd2
	}
	return nil
}

type isRouteDistinguisher_RdFormat interface {
	isRouteDistinguisher_RdFormat()
}

type RouteDistinguisher_Rd0 struct {
	Rd0 *RdType0 `protobuf:"bytes,1,opt,name=rd0,proto3,oneof"` //* Type 0 RD
}

type RouteDistinguisher_Rd1 struct {
	Rd1 *RdType1 `protobuf:"bytes,2,opt,name=rd1,proto3,oneof"` //* Type 1 RD
}

type RouteDistinguisher_Rd2 struct {
	Rd2 *RdType2 `protobuf:"bytes,3,opt,name=rd2,proto3,oneof"` //* Type 2 RD
}

func (*RouteDistinguisher_Rd0) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd1) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd2) isRouteDistinguisher_RdFormat() {}

//*
// L3VPN route destination address prefix composed of a
// route distinguisher (RD) and IP address.
type L3VpnAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Route distinguisher. REQUIRED
	Rd *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	//* IPv4 or IPv6 VPN customer address. REQUIRED.
	VpnAddr *common.IpAddress `protobuf:"bytes,2,opt,name=vpn_addr,json=vpnAddr,proto3" json:"vpn_addr,omitempty"`
}

func (x *L3VpnAddress) Reset() {
	*x = L3VpnAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L3VpnAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3VpnAddress) ProtoMessage() {}

func (x *L3VpnAddress) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3VpnAddress.ProtoReflect.Descriptor instead.
func (*L3VpnAddress) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{8}
}

func (x *L3VpnAddress) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *L3VpnAddress) GetVpnAddr() *common.IpAddress {
	if x != nil {
		return x.VpnAddr
	}
	return nil
}

//*
// A single MPLS Label entry as defined by RFC 3032
type LabelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* One of either well_known_labels or else a valid 20-bit unsigned
	//  label value that must be less than decimal value 1048576 and not
	//  within the reserved label range of 4 through 15 (inclusive).
	//  REQUIRED
	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	//* A valid 3-bit unsigned traffic class/QoS value less than decimal value 8.
	//  Optional (defaults to 0). READ-ONLY
	TrafficClass uint32 `protobuf:"varint,2,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	//* A valid 8-bit unsigned TTL value less than decimal value 256.
	//  Optional (defaults to 0). READ-ONLY
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	//* Indicates that this Label stack entry the bottom of the label
	//  stack. Bottom-of-Stack will always be set by the library and must
	//  never set by the client. READ-ONLY
	BottomOfStack bool `protobuf:"varint,4,opt,name=bottom_of_stack,json=bottomOfStack,proto3" json:"bottom_of_stack,omitempty"`
}

func (x *LabelEntry) Reset() {
	*x = LabelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelEntry) ProtoMessage() {}

func (x *LabelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelEntry.ProtoReflect.Descriptor instead.
func (*LabelEntry) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{9}
}

func (x *LabelEntry) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *LabelEntry) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *LabelEntry) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *LabelEntry) GetBottomOfStack() bool {
	if x != nil {
		return x.BottomOfStack
	}
	return false
}

//*
// A single MPLS Label stack entry with the operation for the label entry
type LabelStackEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode     LabelOperation `protobuf:"varint,1,opt,name=opcode,proto3,enum=routing.LabelOperation" json:"opcode,omitempty"`
	LabelEntry *LabelEntry    `protobuf:"bytes,2,opt,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
}

func (x *LabelStackEntry) Reset() {
	*x = LabelStackEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelStackEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelStackEntry) ProtoMessage() {}

func (x *LabelStackEntry) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelStackEntry.ProtoReflect.Descriptor instead.
func (*LabelStackEntry) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{10}
}

func (x *LabelStackEntry) GetOpcode() LabelOperation {
	if x != nil {
		return x.Opcode
	}
	return LabelOperation_NOOP
}

func (x *LabelStackEntry) GetLabelEntry() *LabelEntry {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

//*
// Holds the mpls label used to represent label address in route lookups
type MplsAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// A valid 20-bit unsigned label value that must be less than decimal
	// value 1048576 and not within the reserved label range of 4 through
	// 15 (inclusive).
	// REQUIRED
	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *MplsAddress) Reset() {
	*x = MplsAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsAddress) ProtoMessage() {}

func (x *MplsAddress) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsAddress.ProtoReflect.Descriptor instead.
func (*MplsAddress) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{11}
}

func (x *MplsAddress) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

//*
// A label stack constructed according to the rules of RFC 3032.
type LabelStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* An ordered list of one or more label stack entries beginning with
	//  the bottom of the stack and ending with the top of the stack.
	//  REQUIRED (one or more entry)
	Entries []*LabelStackEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *LabelStack) Reset() {
	*x = LabelStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelStack) ProtoMessage() {}

func (x *LabelStack) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelStack.ProtoReflect.Descriptor instead.
func (*LabelStack) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{12}
}

func (x *LabelStack) GetEntries() []*LabelStackEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

//*
// Segment Identifier (SID). Either 4 octet MPLS SID or a 16 octet IPv6 SID
// Currently IPv6 SID is not supported.
type SidEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SidEntryType:
	//	*SidEntry_SidLabelEntry
	SidEntryType isSidEntry_SidEntryType `protobuf_oneof:"SidEntryType"`
}

func (x *SidEntry) Reset() {
	*x = SidEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidEntry) ProtoMessage() {}

func (x *SidEntry) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidEntry.ProtoReflect.Descriptor instead.
func (*SidEntry) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{13}
}

func (m *SidEntry) GetSidEntryType() isSidEntry_SidEntryType {
	if m != nil {
		return m.SidEntryType
	}
	return nil
}

func (x *SidEntry) GetSidLabelEntry() *LabelEntry {
	if x, ok := x.GetSidEntryType().(*SidEntry_SidLabelEntry); ok {
		return x.SidLabelEntry
	}
	return nil
}

type isSidEntry_SidEntryType interface {
	isSidEntry_SidEntryType()
}

type SidEntry_SidLabelEntry struct {
	//* MPLS label for the SID
	SidLabelEntry *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3,oneof"`
}

func (*SidEntry_SidLabelEntry) isSidEntry_SidEntryType() {}

//*
// Segment Type 1: SID only, in the form of MPLS Label
type SegmentType1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* MPLS label for the SID. REQUIRED
	SidLabelEntry *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3" json:"sid_label_entry,omitempty"`
}

func (x *SegmentType1) Reset() {
	*x = SegmentType1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentType1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentType1) ProtoMessage() {}

func (x *SegmentType1) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentType1.ProtoReflect.Descriptor instead.
func (*SegmentType1) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{14}
}

func (x *SegmentType1) GetSidLabelEntry() *LabelEntry {
	if x != nil {
		return x.SidLabelEntry
	}
	return nil
}

//*
// SR-TE Segment. Only SegemntType1 is currently supported.
// Other types are for internal use only.
type SRTESegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SRTEType:
	//	*SRTESegment_SegmentType1
	SRTEType isSRTESegment_SRTEType `protobuf_oneof:"SRTEType"`
}

func (x *SRTESegment) Reset() {
	*x = SRTESegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTESegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTESegment) ProtoMessage() {}

func (x *SRTESegment) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTESegment.ProtoReflect.Descriptor instead.
func (*SRTESegment) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{15}
}

func (m *SRTESegment) GetSRTEType() isSRTESegment_SRTEType {
	if m != nil {
		return m.SRTEType
	}
	return nil
}

func (x *SRTESegment) GetSegmentType1() *SegmentType1 {
	if x, ok := x.GetSRTEType().(*SRTESegment_SegmentType1); ok {
		return x.SegmentType1
	}
	return nil
}

type isSRTESegment_SRTEType interface {
	isSRTESegment_SRTEType()
}

type SRTESegment_SegmentType1 struct {
	//* Segment type1, only supported segment type at present.
	SegmentType1 *SegmentType1 `protobuf:"bytes,1,opt,name=segment_type1,json=segmentType1,proto3,oneof"`
}

func (*SRTESegment_SegmentType1) isSRTESegment_SRTEType() {}

//*
// SR-TE Segment List.
type SRTESegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Weight specifies the weight associated to a given segment list. The
	// weight is used in order to apply weighted ECMP mechanism when steering
	// traffic into a policy that includes multiple Segment Lists.
	// This parameter is needed to be set only when > 1 segment list is set.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	//*
	// Segments, one or more segments can be programmed. REQUIRED.
	// A maximum of 5 segements are supported.
	Segments []*SRTESegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *SRTESegmentList) Reset() {
	*x = SRTESegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTESegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTESegmentList) ProtoMessage() {}

func (x *SRTESegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTESegmentList.ProtoReflect.Descriptor instead.
func (*SRTESegmentList) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{16}
}

func (x *SRTESegmentList) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SRTESegmentList) GetSegments() []*SRTESegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

//*
// SR-TE Distinguisher
type SRTEDistinguisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// SR policy originator. This is a numeric value that the originator can
	// use to make unique when there are mulitple occurances of same SR policy.
	// There is no verification done for the value of this, it has to be set
	// and should be a non zero value.
	Distinguisher uint32 `protobuf:"varint,1,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
}

func (x *SRTEDistinguisher) Reset() {
	*x = SRTEDistinguisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEDistinguisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEDistinguisher) ProtoMessage() {}

func (x *SRTEDistinguisher) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEDistinguisher.ProtoReflect.Descriptor instead.
func (*SRTEDistinguisher) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{17}
}

func (x *SRTEDistinguisher) GetDistinguisher() uint32 {
	if x != nil {
		return x.Distinguisher
	}
	return 0
}

//*
// SR-TE Color
type SRTEColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// SR policy color. This is a value used to match destination prefix to the
	// policy. All prefixes of a particular color value is steered into policy
	// that has the same color.
	Color uint32 `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SRTEColor) Reset() {
	*x = SRTEColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEColor) ProtoMessage() {}

func (x *SRTEColor) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEColor.ProtoReflect.Descriptor instead.
func (*SRTEColor) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{18}
}

func (x *SRTEColor) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

//*
// SR-TE Binding SID. This is an optional parameter.
// Note IPv6 Binding SID not supported so in SidEntry only MPLS label SID is
// defined.
type SRTEBindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Binding SID
	BindingSrId *SidEntry `protobuf:"bytes,1,opt,name=binding_sr_id,json=bindingSrId,proto3" json:"binding_sr_id,omitempty"`
}

func (x *SRTEBindingSID) Reset() {
	*x = SRTEBindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEBindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEBindingSID) ProtoMessage() {}

func (x *SRTEBindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEBindingSID.ProtoReflect.Descriptor instead.
func (*SRTEBindingSID) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{19}
}

func (x *SRTEBindingSID) GetBindingSrId() *SidEntry {
	if x != nil {
		return x.BindingSrId
	}
	return nil
}

//*
// SR-TE tunnel Name.
// This message is used to specify the SR-TE name. If the SR-TE route added ends
// up getting advertised this name will be used as the SR-TE policy name in the
// advertised BGP route.
type SRTEName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* SRTE Policy Name
	TunnelName string `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
}

func (x *SRTEName) Reset() {
	*x = SRTEName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEName) ProtoMessage() {}

func (x *SRTEName) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEName.ProtoReflect.Descriptor instead.
func (*SRTEName) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{20}
}

func (x *SRTEName) GetTunnelName() string {
	if x != nil {
		return x.TunnelName
	}
	return ""
}

//*
// SR-TE Priority.
// This message specifies the priority with which BGP SR-TE route is processed.
// Currently not used in JUNOS, but it will be advertised.
type SRTEPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* SRTE Priority
	SrtePriority uint32 `protobuf:"varint,1,opt,name=srte_priority,json=srtePriority,proto3" json:"srte_priority,omitempty"`
}

func (x *SRTEPriority) Reset() {
	*x = SRTEPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEPriority) ProtoMessage() {}

func (x *SRTEPriority) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEPriority.ProtoReflect.Descriptor instead.
func (*SRTEPriority) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{21}
}

func (x *SRTEPriority) GetSrtePriority() uint32 {
	if x != nil {
		return x.SrtePriority
	}
	return 0
}

//*
// SR-TE Explicit Null Label Policy (ENLP). This is an optional parameter.
type SRTEEnlp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* SRTE ENLP
	SrteEnlp SRTEEnlpOperations `protobuf:"varint,1,opt,name=srte_enlp,json=srteEnlp,proto3,enum=routing.SRTEEnlpOperations" json:"srte_enlp,omitempty"`
}

func (x *SRTEEnlp) Reset() {
	*x = SRTEEnlp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEEnlp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEEnlp) ProtoMessage() {}

func (x *SRTEEnlp) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEEnlp.ProtoReflect.Descriptor instead.
func (*SRTEEnlp) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{22}
}

func (x *SRTEEnlp) GetSrteEnlp() SRTEEnlpOperations {
	if x != nil {
		return x.SrteEnlp
	}
	return SRTEEnlpOperations_SRTE_ENLP_INVALID_VAL
}

//*
// SR-TE Address key fields
type SRTEAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Identifies endpoint of the policy, this is mandatory parameter
	Destination *common.IpAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	//*
	// value used to match destination prefix to the policy. All prefixes of a
	// particular color value is steered into policy that has the same color
	// value. This is a mandatory parameter.
	SrColor *SRTEColor `protobuf:"bytes,2,opt,name=sr_color,json=srColor,proto3" json:"sr_color,omitempty"`
	//*
	// Value that uniquely identifies the policy in the context of
	// <destination, color> tuple. SR policy originator can use this to make
	// policy unique in terms of BGP NLRI by setting different values for
	// multiple occurrences of same SR policy.
	// This is a mandatory parameter.
	SrDistinguisher *SRTEDistinguisher `protobuf:"bytes,3,opt,name=sr_distinguisher,json=srDistinguisher,proto3" json:"sr_distinguisher,omitempty"`
}

func (x *SRTEAddress) Reset() {
	*x = SRTEAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTEAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTEAddress) ProtoMessage() {}

func (x *SRTEAddress) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTEAddress.ProtoReflect.Descriptor instead.
func (*SRTEAddress) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{23}
}

func (x *SRTEAddress) GetDestination() *common.IpAddress {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SRTEAddress) GetSrColor() *SRTEColor {
	if x != nil {
		return x.SrColor
	}
	return nil
}

func (x *SRTEAddress) GetSrDistinguisher() *SRTEDistinguisher {
	if x != nil {
		return x.SrDistinguisher
	}
	return nil
}

//*
// SR-TE Route information like segments.
type SRTERouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Specifies the BSID of the path.
	// Optional parameter, there is no default value.
	BindingSid *SRTEBindingSID `protobuf:"bytes,1,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	Preference uint32          `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`
	//
	// List of Explicit paths towards endpoint. REQUIRED parameter.
	// One or more segment lists to program.
	// Segment List entries. Mimimum one segment need to be set. A maximum of
	// 8 segment list are supported.
	SegmentLists []*SRTESegmentList `protobuf:"bytes,3,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	//
	// SRTE tunnel Name. Optional Paratemeter.
	SrName *SRTEName `protobuf:"bytes,4,opt,name=sr_name,json=srName,proto3" json:"sr_name,omitempty"`
	//
	// SRTE Priority. Optional Paratemeter.
	SrPriority *SRTEPriority `protobuf:"bytes,6,opt,name=sr_priority,json=srPriority,proto3" json:"sr_priority,omitempty"`
	//
	// SRTE ENLP. Optional Paratemeter.
	// Possible values are defined in enum SRTEEnlpOperations.
	SrEnlp *SRTEEnlp `protobuf:"bytes,7,opt,name=sr_enlp,json=srEnlp,proto3" json:"sr_enlp,omitempty"`
}

func (x *SRTERouteData) Reset() {
	*x = SRTERouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTERouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTERouteData) ProtoMessage() {}

func (x *SRTERouteData) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTERouteData.ProtoReflect.Descriptor instead.
func (*SRTERouteData) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{24}
}

func (x *SRTERouteData) GetBindingSid() *SRTEBindingSID {
	if x != nil {
		return x.BindingSid
	}
	return nil
}

func (x *SRTERouteData) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *SRTERouteData) GetSegmentLists() []*SRTESegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *SRTERouteData) GetSrName() *SRTEName {
	if x != nil {
		return x.SrName
	}
	return nil
}

func (x *SRTERouteData) GetSrPriority() *SRTEPriority {
	if x != nil {
		return x.SrPriority
	}
	return nil
}

func (x *SRTERouteData) GetSrEnlp() *SRTEEnlp {
	if x != nil {
		return x.SrEnlp
	}
	return nil
}

//*
// For matched packets the action can be discard, change dscp marking,
// rate limit, redirect into a VRF or sample. At least one action must
// set. Only one terminating action can be set.
type FlowspecRouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Action to discard matching packet
	Discard bool `protobuf:"varint,1,opt,name=discard,proto3" json:"discard,omitempty"`
	//* Action to change the DSCP value to matching packets with this value.
	MarkDscp uint32 `protobuf:"varint,2,opt,name=mark_dscp,json=markDscp,proto3" json:"mark_dscp,omitempty"`
	//* Action to rate limit matching packets to this value.
	RateLimitVal uint32 `protobuf:"varint,3,opt,name=rate_limit_val,json=rateLimitVal,proto3" json:"rate_limit_val,omitempty"`
	//* Action to redirect matching packets to the route target specified.
	RedirectInstRtComm string `protobuf:"bytes,4,opt,name=redirect_inst_rt_comm,json=redirectInstRtComm,proto3" json:"redirect_inst_rt_comm,omitempty"`
	//* Action to sample matching packets.
	Sample bool `protobuf:"varint,5,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *FlowspecRouteData) Reset() {
	*x = FlowspecRouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecRouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecRouteData) ProtoMessage() {}

func (x *FlowspecRouteData) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecRouteData.ProtoReflect.Descriptor instead.
func (*FlowspecRouteData) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{25}
}

func (x *FlowspecRouteData) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *FlowspecRouteData) GetMarkDscp() uint32 {
	if x != nil {
		return x.MarkDscp
	}
	return 0
}

func (x *FlowspecRouteData) GetRateLimitVal() uint32 {
	if x != nil {
		return x.RateLimitVal
	}
	return 0
}

func (x *FlowspecRouteData) GetRedirectInstRtComm() string {
	if x != nil {
		return x.RedirectInstRtComm
	}
	return ""
}

func (x *FlowspecRouteData) GetSample() bool {
	if x != nil {
		return x.Sample
	}
	return false
}

//*
// Route data defined for each supported address family
type AddressFamilySpecificData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RouteDataAf:
	//	*AddressFamilySpecificData_SrtePolicyData
	//	*AddressFamilySpecificData_FlowspecData
	RouteDataAf isAddressFamilySpecificData_RouteDataAf `protobuf_oneof:"RouteDataAf"`
}

func (x *AddressFamilySpecificData) Reset() {
	*x = AddressFamilySpecificData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressFamilySpecificData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamilySpecificData) ProtoMessage() {}

func (x *AddressFamilySpecificData) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamilySpecificData.ProtoReflect.Descriptor instead.
func (*AddressFamilySpecificData) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{26}
}

func (m *AddressFamilySpecificData) GetRouteDataAf() isAddressFamilySpecificData_RouteDataAf {
	if m != nil {
		return m.RouteDataAf
	}
	return nil
}

func (x *AddressFamilySpecificData) GetSrtePolicyData() *SRTERouteData {
	if x, ok := x.GetRouteDataAf().(*AddressFamilySpecificData_SrtePolicyData); ok {
		return x.SrtePolicyData
	}
	return nil
}

func (x *AddressFamilySpecificData) GetFlowspecData() *FlowspecRouteData {
	if x, ok := x.GetRouteDataAf().(*AddressFamilySpecificData_FlowspecData); ok {
		return x.FlowspecData
	}
	return nil
}

type isAddressFamilySpecificData_RouteDataAf interface {
	isAddressFamilySpecificData_RouteDataAf()
}

type AddressFamilySpecificData_SrtePolicyData struct {
	//*
	// Address specific route data for IPv4 and IPv6 SRTE address families.
	// This has to be set when RoutePrefixAf is of type IPv4 and IPv6
	// SRTE address family.
	SrtePolicyData *SRTERouteData `protobuf:"bytes,1,opt,name=srte_policy_data,json=srtePolicyData,proto3,oneof"`
}

type AddressFamilySpecificData_FlowspecData struct {
	//*
	// Address specific route data for IPv4 and Ipv6 flow-spec address
	// families.
	// This has to be set when RoutePrefixAf is of type IPv4 and IPv6
	// flow-spec address family.
	FlowspecData *FlowspecRouteData `protobuf:"bytes,2,opt,name=flowspec_data,json=flowspecData,proto3,oneof"`
}

func (*AddressFamilySpecificData_SrtePolicyData) isAddressFamilySpecificData_RouteDataAf() {}

func (*AddressFamilySpecificData_FlowspecData) isAddressFamilySpecificData_RouteDataAf() {}

//*
// FlowspecAdress has match fields that can be used to match fields of a
// ip header. If the match is sucessful then the action will be applied to the
// ip packet. The actions can be chained if further actions needs to be
// applied after previous action is complete. These actions are defined as
// protocol specific data.
// IP header fields than can be matched are destination ip address, source
// ip address, protocol, destination/source port, icmp types/codes dscp
// and fragment bit.
// At least one of the match condition should be set.
type FlowspecAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* IP packet destination prefix to match for filtering
	Destination *common.IpAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	//*
	// IP packet destination prefix length. This field if not set when
	// destination is set will default to HOST length for the address family.
	// i.e. 32 for ipv4 and 128 for ipv6.
	// This along with destination determines the IP destination field
	// matching range. For e.g. if destination = 10.1.1.0 and
	// dest_prefix_len = 24 then flows-spec filter added will match all IP
	// packets with destination address 10.1.1.1 to 10.1.1.254.
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	//* IP packet source address to match for filtering
	Source *common.IpAddress `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	//
	// IP packet source address prefix length that will determine the source
	// address range matched for filtering. The range matched is similar to
	// dest_prefix_len described above.
	SourcePrefixLen uint32 `protobuf:"varint,4,opt,name=source_prefix_len,json=sourcePrefixLen,proto3" json:"source_prefix_len,omitempty"`
	//*
	// IP protocols to be matched while filtering. A range of numerical
	// values can be specified to match. The ranges will be merged if they
	// overlap and can be represented by a single range. For e.g. if
	// ranges 1-20 and 15-30 are set they will merged into a single range
	// 1-30.
	// Standard protocol values defined in enum IpProtocols can be used in these
	// numerical ranges.
	// If a single value needs to specified both min and max in NumericRange
	// should be set to the same value.
	// This comment applies to all the following fields defined below:
	// ip_protocols, ports, dest_ports, src_ports, icmp_types, icmp_codes,
	// pkt_lengths and dscp.
	IpProtocols *common.NumericRangeList `protobuf:"bytes,5,opt,name=ip_protocols,json=ipProtocols,proto3" json:"ip_protocols,omitempty"`
	//*
	// Destination and source ports of IP packet to match for filtering.
	// Standard port values defined by enum IpPorts can be used for this.
	Ports *common.NumericRangeList `protobuf:"bytes,6,opt,name=ports,proto3" json:"ports,omitempty"`
	//*
	// Destination ports of IP packet to match for filtering.
	// Standard port values defined by enum IpPorts can be used for this.
	DestPorts *common.NumericRangeList `protobuf:"bytes,7,opt,name=dest_ports,json=destPorts,proto3" json:"dest_ports,omitempty"`
	//*
	// Source ports of IP packet to match for filtering.
	// Standard port values defined by enum IpPorts can be used for this.
	SrcPorts *common.NumericRangeList `protobuf:"bytes,8,opt,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	//*
	// ICMP types to match for filtering.
	// Standard ICMP type values defined by enum IcmpType can be used for this.
	IcmpTypes *common.NumericRangeList `protobuf:"bytes,9,opt,name=icmp_types,json=icmpTypes,proto3" json:"icmp_types,omitempty"`
	//*
	// ICMP codes to match for filtering.
	// Standard ICMP code values defined by enum IcmpCode can be used for this.
	IcmpCodes *common.NumericRangeList `protobuf:"bytes,10,opt,name=icmp_codes,json=icmpCodes,proto3" json:"icmp_codes,omitempty"`
	//*
	// TCP flags to match for filtering.
	// enum TcpFlags values should be used for this.
	TcpFlags common.TcpFlags `protobuf:"varint,11,opt,name=tcp_flags,json=tcpFlags,proto3,enum=jnxBase.TcpFlags" json:"tcp_flags,omitempty"`
	//*
	// ICMP types to match for filtering.
	// Standard ICMP type values defined by enum IcmpType can be used for this.
	PktLengths *common.NumericRangeList `protobuf:"bytes,12,opt,name=pkt_lengths,json=pktLengths,proto3" json:"pkt_lengths,omitempty"`
	//*
	// ICMP types to match for filtering.
	// Standard ICMP type values defined by enum IcmpType can be used for this.
	Dscps *common.NumericRangeList `protobuf:"bytes,13,opt,name=dscps,proto3" json:"dscps,omitempty"`
	//*
	// IP framgment flags to match for filtering.
	Fragment *common.IpFragementFlags `protobuf:"bytes,14,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *FlowspecAddress) Reset() {
	*x = FlowspecAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowspecAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowspecAddress) ProtoMessage() {}

func (x *FlowspecAddress) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowspecAddress.ProtoReflect.Descriptor instead.
func (*FlowspecAddress) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{27}
}

func (x *FlowspecAddress) GetDestination() *common.IpAddress {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *FlowspecAddress) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *FlowspecAddress) GetSource() *common.IpAddress {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlowspecAddress) GetSourcePrefixLen() uint32 {
	if x != nil {
		return x.SourcePrefixLen
	}
	return 0
}

func (x *FlowspecAddress) GetIpProtocols() *common.NumericRangeList {
	if x != nil {
		return x.IpProtocols
	}
	return nil
}

func (x *FlowspecAddress) GetPorts() *common.NumericRangeList {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FlowspecAddress) GetDestPorts() *common.NumericRangeList {
	if x != nil {
		return x.DestPorts
	}
	return nil
}

func (x *FlowspecAddress) GetSrcPorts() *common.NumericRangeList {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *FlowspecAddress) GetIcmpTypes() *common.NumericRangeList {
	if x != nil {
		return x.IcmpTypes
	}
	return nil
}

func (x *FlowspecAddress) GetIcmpCodes() *common.NumericRangeList {
	if x != nil {
		return x.IcmpCodes
	}
	return nil
}

func (x *FlowspecAddress) GetTcpFlags() common.TcpFlags {
	if x != nil {
		return x.TcpFlags
	}
	return common.TcpFlags(0)
}

func (x *FlowspecAddress) GetPktLengths() *common.NumericRangeList {
	if x != nil {
		return x.PktLengths
	}
	return nil
}

func (x *FlowspecAddress) GetDscps() *common.NumericRangeList {
	if x != nil {
		return x.Dscps
	}
	return nil
}

func (x *FlowspecAddress) GetFragment() *common.IpFragementFlags {
	if x != nil {
		return x.Fragment
	}
	return nil
}

//*
// Route destination prefix defined for each supported address family
type RoutePrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RoutePrefixAf:
	//	*RoutePrefix_Inet
	//	*RoutePrefix_Inet6
	//	*RoutePrefix_Inetvpn
	//	*RoutePrefix_Inet6Vpn
	//	*RoutePrefix_LabeledInet
	//	*RoutePrefix_LabeledInet6
	//	*RoutePrefix_InetSrtePolicy
	//	*RoutePrefix_Inet6SrtePolicy
	//	*RoutePrefix_InetFlowspec
	//	*RoutePrefix_Inet6Flowspec
	RoutePrefixAf isRoutePrefix_RoutePrefixAf `protobuf_oneof:"RoutePrefixAf"`
}

func (x *RoutePrefix) Reset() {
	*x = RoutePrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutePrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutePrefix) ProtoMessage() {}

func (x *RoutePrefix) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutePrefix.ProtoReflect.Descriptor instead.
func (*RoutePrefix) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{28}
}

func (m *RoutePrefix) GetRoutePrefixAf() isRoutePrefix_RoutePrefixAf {
	if m != nil {
		return m.RoutePrefixAf
	}
	return nil
}

func (x *RoutePrefix) GetInet() *common.IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet); ok {
		return x.Inet
	}
	return nil
}

func (x *RoutePrefix) GetInet6() *common.IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (x *RoutePrefix) GetInetvpn() *L3VpnAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inetvpn); ok {
		return x.Inetvpn
	}
	return nil
}

func (x *RoutePrefix) GetInet6Vpn() *L3VpnAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6Vpn); ok {
		return x.Inet6Vpn
	}
	return nil
}

func (x *RoutePrefix) GetLabeledInet() *common.IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_LabeledInet); ok {
		return x.LabeledInet
	}
	return nil
}

func (x *RoutePrefix) GetLabeledInet6() *common.IpAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_LabeledInet6); ok {
		return x.LabeledInet6
	}
	return nil
}

func (x *RoutePrefix) GetInetSrtePolicy() *SRTEAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_InetSrtePolicy); ok {
		return x.InetSrtePolicy
	}
	return nil
}

func (x *RoutePrefix) GetInet6SrtePolicy() *SRTEAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6SrtePolicy); ok {
		return x.Inet6SrtePolicy
	}
	return nil
}

func (x *RoutePrefix) GetInetFlowspec() *FlowspecAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_InetFlowspec); ok {
		return x.InetFlowspec
	}
	return nil
}

func (x *RoutePrefix) GetInet6Flowspec() *FlowspecAddress {
	if x, ok := x.GetRoutePrefixAf().(*RoutePrefix_Inet6Flowspec); ok {
		return x.Inet6Flowspec
	}
	return nil
}

type isRoutePrefix_RoutePrefixAf interface {
	isRoutePrefix_RoutePrefixAf()
}

type RoutePrefix_Inet struct {
	//* IPv4 destination prefix
	Inet *common.IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type RoutePrefix_Inet6 struct {
	//* IPv6 destination prefix
	Inet6 *common.IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type RoutePrefix_Inetvpn struct {
	//* IPv4 VPN (L3VPN) destination prefix
	Inetvpn *L3VpnAddress `protobuf:"bytes,3,opt,name=inetvpn,proto3,oneof"`
}

type RoutePrefix_Inet6Vpn struct {
	//* IPv6 VPN (L3VPN) destination prefix
	Inet6Vpn *L3VpnAddress `protobuf:"bytes,4,opt,name=inet6vpn,proto3,oneof"`
}

type RoutePrefix_LabeledInet struct {
	//* IPv4 Labeled-Unicast destination prefix.
	LabeledInet *common.IpAddress `protobuf:"bytes,5,opt,name=labeled_inet,json=labeledInet,proto3,oneof"`
}

type RoutePrefix_LabeledInet6 struct {
	//* IPv6 Labeled-Unicast destination prefix.
	LabeledInet6 *common.IpAddress `protobuf:"bytes,6,opt,name=labeled_inet6,json=labeledInet6,proto3,oneof"`
}

type RoutePrefix_InetSrtePolicy struct {
	//* IPv4 SR-TE policy prefix
	InetSrtePolicy *SRTEAddress `protobuf:"bytes,7,opt,name=inet_srte_policy,json=inetSrtePolicy,proto3,oneof"`
}

type RoutePrefix_Inet6SrtePolicy struct {
	//* IPv6 SR-TE policy prefix
	Inet6SrtePolicy *SRTEAddress `protobuf:"bytes,8,opt,name=inet6_srte_policy,json=inet6SrtePolicy,proto3,oneof"`
}

type RoutePrefix_InetFlowspec struct {
	//* IPv4 BGP flowspec prefix.
	InetFlowspec *FlowspecAddress `protobuf:"bytes,9,opt,name=inet_flowspec,json=inetFlowspec,proto3,oneof"`
}

type RoutePrefix_Inet6Flowspec struct {
	//* IPv6 BGP flowspec prefix.
	Inet6Flowspec *FlowspecAddress `protobuf:"bytes,10,opt,name=inet6_flowspec,json=inet6Flowspec,proto3,oneof"`
}

func (*RoutePrefix_Inet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inetvpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6Vpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_InetSrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6SrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_InetFlowspec) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6Flowspec) isRoutePrefix_RoutePrefixAf() {}

//*
// Network Address defined for each supported address family
type NetworkAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Af:
	//	*NetworkAddress_Inet
	//	*NetworkAddress_Inet6
	//	*NetworkAddress_Mpls
	Af isNetworkAddress_Af `protobuf_oneof:"Af"`
}

func (x *NetworkAddress) Reset() {
	*x = NetworkAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prpd_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAddress) ProtoMessage() {}

func (x *NetworkAddress) ProtoReflect() protoreflect.Message {
	mi := &file_prpd_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAddress.ProtoReflect.Descriptor instead.
func (*NetworkAddress) Descriptor() ([]byte, []int) {
	return file_prpd_common_proto_rawDescGZIP(), []int{29}
}

func (m *NetworkAddress) GetAf() isNetworkAddress_Af {
	if m != nil {
		return m.Af
	}
	return nil
}

func (x *NetworkAddress) GetInet() *common.IpAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Inet); ok {
		return x.Inet
	}
	return nil
}

func (x *NetworkAddress) GetInet6() *common.IpAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (x *NetworkAddress) GetMpls() *MplsAddress {
	if x, ok := x.GetAf().(*NetworkAddress_Mpls); ok {
		return x.Mpls
	}
	return nil
}

type isNetworkAddress_Af interface {
	isNetworkAddress_Af()
}

type NetworkAddress_Inet struct {
	//* IPv4 destination prefix
	Inet *common.IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type NetworkAddress_Inet6 struct {
	//* IPv6 destination prefix
	Inet6 *common.IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type NetworkAddress_Mpls struct {
	//*
	// Mpls label.
	// For modifying route table contents, the only valid prefix length is
	// 52 (20 bit label + 32 bit interface index). Interface index is
	// currently implicit and defaults to 0.
	// For route lookups, use a prefix length of 52 for exact lookups and
	// 0 for matching all the routes.
	Mpls *MplsAddress `protobuf:"bytes,3,opt,name=mpls,proto3,oneof"`
}

func (*NetworkAddress_Inet) isNetworkAddress_Af() {}

func (*NetworkAddress_Inet6) isNetworkAddress_Af() {}

func (*NetworkAddress_Mpls) isNetworkAddress_Af() {}

var File_prpd_common_proto protoreflect.FileDescriptor

var file_prpd_common_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x70, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x6a, 0x6e,
	0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a,
	0x09, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x70, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0a,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x74,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x05, 0x72, 0x74, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x74,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x74, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x52, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x4f, 0x0a, 0x07, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x30, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x65, 0x0a, 0x07, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x31, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x07, 0x52, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x64, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x30,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x64, 0x30, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x64, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x31, 0x48, 0x00, 0x52, 0x03, 0x72, 0x64, 0x31, 0x12, 0x24, 0x0a,
	0x03, 0x72, 0x64, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x48, 0x00, 0x52, 0x03,
	0x72, 0x64, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x52, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x6a, 0x0a, 0x0c, 0x4c, 0x33, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x0a,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22,
	0x7e, 0x0a, 0x0f, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x22,
	0x78, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x23, 0x0a, 0x0b, 0x4d, 0x70, 0x6c,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x40,
	0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x59, 0x0a, 0x08, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0f,
	0x73, 0x69, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x53,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x3b, 0x0a, 0x0f, 0x73,
	0x69, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x52, 0x54, 0x45,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x53, 0x52, 0x54, 0x45, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39,
	0x0a, 0x11, 0x53, 0x52, 0x54, 0x45, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x52, 0x54,
	0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x0e,
	0x53, 0x52, 0x54, 0x45, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x35,
	0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x08, 0x53, 0x52, 0x54, 0x45, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0c, 0x53, 0x52, 0x54, 0x45, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x72, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x08, 0x53, 0x52, 0x54, 0x45, 0x45,
	0x6e, 0x6c, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x6c, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e, 0x6c, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x73, 0x72, 0x74, 0x65, 0x45, 0x6e, 0x6c, 0x70, 0x22, 0xb9, 0x01,
	0x0a, 0x0b, 0x53, 0x52, 0x54, 0x45, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x52, 0x54, 0x45, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x53, 0x52,
	0x54, 0x45, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x52, 0x54, 0x45, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x52, 0x54, 0x45, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x72,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x72, 0x5f, 0x65,
	0x6e, 0x6c, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e, 0x6c, 0x70, 0x52, 0x06, 0x73, 0x72,
	0x45, 0x6e, 0x6c, 0x70, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65,
	0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x73, 0x63,
	0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x52, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x10, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x66, 0x22, 0xf0, 0x05, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61,
	0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a,
	0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61,
	0x73, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x74, 0x63, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78,
	0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x6b, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x73, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x73, 0x63, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x73, 0x63,
	0x70, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49,
	0x70, 0x46, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x0b, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73,
	0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x12,
	0x31, 0x0a, 0x07, 0x69, 0x6e, 0x65, 0x74, 0x76, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x33, 0x76, 0x70, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x65, 0x74, 0x76,
	0x70, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x76, 0x70, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x33, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x65, 0x74, 0x36, 0x76, 0x70, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x65, 0x74,
	0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x65, 0x74,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73,
	0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x40, 0x0a, 0x10, 0x69,
	0x6e, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x52, 0x54, 0x45, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x69,
	0x6e, 0x65, 0x74, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a,
	0x11, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x52, 0x54, 0x45, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x70, 0x65, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x41, 0x66, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73,
	0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x6e, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x65, 0x74, 0x36, 0x12,
	0x2a, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x41,
	0x66, 0x2a, 0x59, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x10,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01,
	0x2a, 0xf6, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54,
	0x36, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45,
	0x54, 0x56, 0x50, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f,
	0x49, 0x4e, 0x45, 0x54, 0x36, 0x56, 0x50, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x54,
	0x5f, 0x41, 0x46, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x45, 0x54,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x52, 0x54, 0x45, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x5f,
	0x53, 0x52, 0x54, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f,
	0x49, 0x4e, 0x45, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x10, 0x0a, 0x2a, 0x37, 0x0a, 0x0e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x41, 0x50,
	0x10, 0x03, 0x2a, 0xb6, 0x01, 0x0a, 0x12, 0x53, 0x52, 0x54, 0x45, 0x45, 0x6e, 0x6c, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x52, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x4c, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4f, 0x52,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x2a, 0xf3, 0x02, 0x0a, 0x0e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x53, 0x50, 0x46,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x49, 0x50, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x50, 0x4e, 0x47, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x47, 0x50, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x53, 0x10, 0x0c, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x56, 0x4d, 0x52, 0x50,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x4d, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x53, 0x44, 0x50, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x12, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x53, 0x56, 0x50, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43, 0x43,
	0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x44, 0x50, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x56,
	0x50, 0x4e, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x56, 0x50, 0x4e, 0x10, 0x17, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x32, 0x56,
	0x50, 0x4e, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x32, 0x43, 0x4b, 0x54, 0x10, 0x1a, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x1b, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x49, 0x46, 0x54, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x32, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e,
	0x45, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x1e, 0x42, 0x0e, 0x5a, 0x0c, 0x6a, 0x6e, 0x78, 0x2f, 0x6a, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x70,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prpd_common_proto_rawDescOnce sync.Once
	file_prpd_common_proto_rawDescData = file_prpd_common_proto_rawDesc
)

func file_prpd_common_proto_rawDescGZIP() []byte {
	file_prpd_common_proto_rawDescOnce.Do(func() {
		file_prpd_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_prpd_common_proto_rawDescData)
	})
	return file_prpd_common_proto_rawDescData
}

var file_prpd_common_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_prpd_common_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_prpd_common_proto_goTypes = []interface{}{
	(ReturnCode)(0),                   // 0: routing.ReturnCode
	(RouteTableFormat)(0),             // 1: routing.RouteTableFormat
	(RouteAfType)(0),                  // 2: routing.RouteAfType
	(LabelOperation)(0),               // 3: routing.LabelOperation
	(SRTEEnlpOperations)(0),           // 4: routing.SRTEEnlpOperations
	(RouteProtoType)(0),               // 5: routing.RouteProtoType
	(RpcStatus_RpcStatusCode)(0),      // 6: routing.RpcStatus.RpcStatusCode
	(LabelEntry_WellKnownLabels)(0),   // 7: routing.LabelEntry.WellKnownLabels
	(*RpcStatus)(nil),                 // 8: routing.RpcStatus
	(*RouteTableName)(nil),            // 9: routing.RouteTableName
	(*RouteTableId)(nil),              // 10: routing.RouteTableId
	(*RouteTable)(nil),                // 11: routing.RouteTable
	(*RdType0)(nil),                   // 12: routing.RdType0
	(*RdType1)(nil),                   // 13: routing.RdType1
	(*RdType2)(nil),                   // 14: routing.RdType2
	(*RouteDistinguisher)(nil),        // 15: routing.RouteDistinguisher
	(*L3VpnAddress)(nil),              // 16: routing.L3vpnAddress
	(*LabelEntry)(nil),                // 17: routing.LabelEntry
	(*LabelStackEntry)(nil),           // 18: routing.LabelStackEntry
	(*MplsAddress)(nil),               // 19: routing.MplsAddress
	(*LabelStack)(nil),                // 20: routing.LabelStack
	(*SidEntry)(nil),                  // 21: routing.SidEntry
	(*SegmentType1)(nil),              // 22: routing.SegmentType1
	(*SRTESegment)(nil),               // 23: routing.SRTESegment
	(*SRTESegmentList)(nil),           // 24: routing.SRTESegmentList
	(*SRTEDistinguisher)(nil),         // 25: routing.SRTEDistinguisher
	(*SRTEColor)(nil),                 // 26: routing.SRTEColor
	(*SRTEBindingSID)(nil),            // 27: routing.SRTEBindingSID
	(*SRTEName)(nil),                  // 28: routing.SRTEName
	(*SRTEPriority)(nil),              // 29: routing.SRTEPriority
	(*SRTEEnlp)(nil),                  // 30: routing.SRTEEnlp
	(*SRTEAddress)(nil),               // 31: routing.SRTEAddress
	(*SRTERouteData)(nil),             // 32: routing.SRTERouteData
	(*FlowspecRouteData)(nil),         // 33: routing.FlowspecRouteData
	(*AddressFamilySpecificData)(nil), // 34: routing.AddressFamilySpecificData
	(*FlowspecAddress)(nil),           // 35: routing.FlowspecAddress
	(*RoutePrefix)(nil),               // 36: routing.RoutePrefix
	(*NetworkAddress)(nil),            // 37: routing.NetworkAddress
	(*common.IpAddress)(nil),          // 38: jnxBase.IpAddress
	(*common.NumericRangeList)(nil),   // 39: jnxBase.NumericRangeList
	(common.TcpFlags)(0),              // 40: jnxBase.TcpFlags
	(*common.IpFragementFlags)(nil),   // 41: jnxBase.IpFragementFlags
}
var file_prpd_common_proto_depIdxs = []int32{
	6,  // 0: routing.RpcStatus.code:type_name -> routing.RpcStatus.RpcStatusCode
	10, // 1: routing.RouteTable.rtt_id:type_name -> routing.RouteTableId
	9,  // 2: routing.RouteTable.rtt_name:type_name -> routing.RouteTableName
	38, // 3: routing.RdType1.ip_address:type_name -> jnxBase.IpAddress
	12, // 4: routing.RouteDistinguisher.rd0:type_name -> routing.RdType0
	13, // 5: routing.RouteDistinguisher.rd1:type_name -> routing.RdType1
	14, // 6: routing.RouteDistinguisher.rd2:type_name -> routing.RdType2
	15, // 7: routing.L3vpnAddress.rd:type_name -> routing.RouteDistinguisher
	38, // 8: routing.L3vpnAddress.vpn_addr:type_name -> jnxBase.IpAddress
	3,  // 9: routing.LabelStackEntry.opcode:type_name -> routing.LabelOperation
	17, // 10: routing.LabelStackEntry.label_entry:type_name -> routing.LabelEntry
	18, // 11: routing.LabelStack.entries:type_name -> routing.LabelStackEntry
	17, // 12: routing.SidEntry.sid_label_entry:type_name -> routing.LabelEntry
	17, // 13: routing.SegmentType1.sid_label_entry:type_name -> routing.LabelEntry
	22, // 14: routing.SRTESegment.segment_type1:type_name -> routing.SegmentType1
	23, // 15: routing.SRTESegmentList.segments:type_name -> routing.SRTESegment
	21, // 16: routing.SRTEBindingSID.binding_sr_id:type_name -> routing.SidEntry
	4,  // 17: routing.SRTEEnlp.srte_enlp:type_name -> routing.SRTEEnlpOperations
	38, // 18: routing.SRTEAddress.destination:type_name -> jnxBase.IpAddress
	26, // 19: routing.SRTEAddress.sr_color:type_name -> routing.SRTEColor
	25, // 20: routing.SRTEAddress.sr_distinguisher:type_name -> routing.SRTEDistinguisher
	27, // 21: routing.SRTERouteData.binding_sid:type_name -> routing.SRTEBindingSID
	24, // 22: routing.SRTERouteData.segment_lists:type_name -> routing.SRTESegmentList
	28, // 23: routing.SRTERouteData.sr_name:type_name -> routing.SRTEName
	29, // 24: routing.SRTERouteData.sr_priority:type_name -> routing.SRTEPriority
	30, // 25: routing.SRTERouteData.sr_enlp:type_name -> routing.SRTEEnlp
	32, // 26: routing.AddressFamilySpecificData.srte_policy_data:type_name -> routing.SRTERouteData
	33, // 27: routing.AddressFamilySpecificData.flowspec_data:type_name -> routing.FlowspecRouteData
	38, // 28: routing.FlowspecAddress.destination:type_name -> jnxBase.IpAddress
	38, // 29: routing.FlowspecAddress.source:type_name -> jnxBase.IpAddress
	39, // 30: routing.FlowspecAddress.ip_protocols:type_name -> jnxBase.NumericRangeList
	39, // 31: routing.FlowspecAddress.ports:type_name -> jnxBase.NumericRangeList
	39, // 32: routing.FlowspecAddress.dest_ports:type_name -> jnxBase.NumericRangeList
	39, // 33: routing.FlowspecAddress.src_ports:type_name -> jnxBase.NumericRangeList
	39, // 34: routing.FlowspecAddress.icmp_types:type_name -> jnxBase.NumericRangeList
	39, // 35: routing.FlowspecAddress.icmp_codes:type_name -> jnxBase.NumericRangeList
	40, // 36: routing.FlowspecAddress.tcp_flags:type_name -> jnxBase.TcpFlags
	39, // 37: routing.FlowspecAddress.pkt_lengths:type_name -> jnxBase.NumericRangeList
	39, // 38: routing.FlowspecAddress.dscps:type_name -> jnxBase.NumericRangeList
	41, // 39: routing.FlowspecAddress.fragment:type_name -> jnxBase.IpFragementFlags
	38, // 40: routing.RoutePrefix.inet:type_name -> jnxBase.IpAddress
	38, // 41: routing.RoutePrefix.inet6:type_name -> jnxBase.IpAddress
	16, // 42: routing.RoutePrefix.inetvpn:type_name -> routing.L3vpnAddress
	16, // 43: routing.RoutePrefix.inet6vpn:type_name -> routing.L3vpnAddress
	38, // 44: routing.RoutePrefix.labeled_inet:type_name -> jnxBase.IpAddress
	38, // 45: routing.RoutePrefix.labeled_inet6:type_name -> jnxBase.IpAddress
	31, // 46: routing.RoutePrefix.inet_srte_policy:type_name -> routing.SRTEAddress
	31, // 47: routing.RoutePrefix.inet6_srte_policy:type_name -> routing.SRTEAddress
	35, // 48: routing.RoutePrefix.inet_flowspec:type_name -> routing.FlowspecAddress
	35, // 49: routing.RoutePrefix.inet6_flowspec:type_name -> routing.FlowspecAddress
	38, // 50: routing.NetworkAddress.inet:type_name -> jnxBase.IpAddress
	38, // 51: routing.NetworkAddress.inet6:type_name -> jnxBase.IpAddress
	19, // 52: routing.NetworkAddress.mpls:type_name -> routing.MplsAddress
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_prpd_common_proto_init() }
func file_prpd_common_proto_init() {
	if File_prpd_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prpd_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdType2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteDistinguisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L3VpnAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelStackEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentType1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTESegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTESegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEDistinguisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEBindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEEnlp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTEAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTERouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecRouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressFamilySpecificData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowspecAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutePrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prpd_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prpd_common_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RouteTable_RttId)(nil),
		(*RouteTable_RttName)(nil),
	}
	file_prpd_common_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RouteDistinguisher_Rd0)(nil),
		(*RouteDistinguisher_Rd1)(nil),
		(*RouteDistinguisher_Rd2)(nil),
	}
	file_prpd_common_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SidEntry_SidLabelEntry)(nil),
	}
	file_prpd_common_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SRTESegment_SegmentType1)(nil),
	}
	file_prpd_common_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*AddressFamilySpecificData_SrtePolicyData)(nil),
		(*AddressFamilySpecificData_FlowspecData)(nil),
	}
	file_prpd_common_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*RoutePrefix_Inet)(nil),
		(*RoutePrefix_Inet6)(nil),
		(*RoutePrefix_Inetvpn)(nil),
		(*RoutePrefix_Inet6Vpn)(nil),
		(*RoutePrefix_LabeledInet)(nil),
		(*RoutePrefix_LabeledInet6)(nil),
		(*RoutePrefix_InetSrtePolicy)(nil),
		(*RoutePrefix_Inet6SrtePolicy)(nil),
		(*RoutePrefix_InetFlowspec)(nil),
		(*RoutePrefix_Inet6Flowspec)(nil),
	}
	file_prpd_common_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*NetworkAddress_Inet)(nil),
		(*NetworkAddress_Inet6)(nil),
		(*NetworkAddress_Mpls)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prpd_common_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prpd_common_proto_goTypes,
		DependencyIndexes: file_prpd_common_proto_depIdxs,
		EnumInfos:         file_prpd_common_proto_enumTypes,
		MessageInfos:      file_prpd_common_proto_msgTypes,
	}.Build()
	File_prpd_common_proto = out.File
	file_prpd_common_proto_rawDesc = nil
	file_prpd_common_proto_goTypes = nil
	file_prpd_common_proto_depIdxs = nil
}
