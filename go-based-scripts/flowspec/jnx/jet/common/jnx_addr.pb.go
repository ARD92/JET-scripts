//
// $Id$
//
// Copyright (c) 2015, Juniper Networks, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.9.1
// source: jnx_addr.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// The format of network addresses that the server is to use when
// responding to client requests.
type AddressFormat int32

const (
	//* Addreses in replies will be represented by strings
	AddressFormat_ADDRESS_STRING AddressFormat = 0
	//* Addreses in replies will be represented by binary data in
	//  byte arrays
	AddressFormat_ADDRESS_BYTES AddressFormat = 1
)

// Enum value maps for AddressFormat.
var (
	AddressFormat_name = map[int32]string{
		0: "ADDRESS_STRING",
		1: "ADDRESS_BYTES",
	}
	AddressFormat_value = map[string]int32{
		"ADDRESS_STRING": 0,
		"ADDRESS_BYTES":  1,
	}
)

func (x AddressFormat) Enum() *AddressFormat {
	p := new(AddressFormat)
	*p = x
	return p
}

func (x AddressFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[0].Descriptor()
}

func (AddressFormat) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[0]
}

func (x AddressFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressFormat.Descriptor instead.
func (AddressFormat) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{0}
}

//
// Address family of a network address.
type AfType int32

const (
	//* Not specified
	AfType_AF_UNSPECIFIED AfType = 0
	//* IPv4 address family
	AfType_AF_INET AfType = 1
	//* IPv6 address family
	AfType_AF_INET6 AfType = 2
	//* Ethernet MAC address family
	AfType_AF_MAC AfType = 3
)

// Enum value maps for AfType.
var (
	AfType_name = map[int32]string{
		0: "AF_UNSPECIFIED",
		1: "AF_INET",
		2: "AF_INET6",
		3: "AF_MAC",
	}
	AfType_value = map[string]int32{
		"AF_UNSPECIFIED": 0,
		"AF_INET":        1,
		"AF_INET6":       2,
		"AF_MAC":         3,
	}
)

func (x AfType) Enum() *AfType {
	p := new(AfType)
	*p = x
	return p
}

func (x AfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AfType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[1].Descriptor()
}

func (AfType) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[1]
}

func (x AfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AfType.Descriptor instead.
func (AfType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{1}
}

//*
// Protocol numbers for which ip header can be matched
type IpProtocols int32

const (
	IpProtocols_IPPROT_INVALID IpProtocols = 0   //* Invalid or undefined value
	IpProtocols_IPPROT_ICMP    IpProtocols = 1   //* Internet Control Message Protocol
	IpProtocols_IPPROT_IGMP    IpProtocols = 2   //* Internet Group Management Protocol
	IpProtocols_IPPROT_IPIP    IpProtocols = 4   //* IP in IP
	IpProtocols_IPPROT_TCP     IpProtocols = 6   //* Transmission Control Protocol
	IpProtocols_IPPROT_EGP     IpProtocols = 8   //* Exterior gateway protocol
	IpProtocols_IPPROT_UDP     IpProtocols = 17  //* User Datagram Protocol
	IpProtocols_IPPROT_RSVP    IpProtocols = 46  //* Resource Reservation Protocol
	IpProtocols_IPPROT_GRE     IpProtocols = 47  //* Generic routing encapsulation
	IpProtocols_IPPROT_ESP     IpProtocols = 50  //* IPSec Encapsulating Security Payload
	IpProtocols_IPPROT_AH      IpProtocols = 51  //* IP Security authentication header
	IpProtocols_IPPROT_ICMP6   IpProtocols = 58  //* Internet Control Message Protocol Version 6
	IpProtocols_IPPROT_OSPF    IpProtocols = 89  //* Open Shortest Path First
	IpProtocols_IPPROT_PIM     IpProtocols = 103 //* Protocol Independent Multicast
	IpProtocols_IPPROT_SCTP    IpProtocols = 132 //* Stream Control Transmission Protocol
)

// Enum value maps for IpProtocols.
var (
	IpProtocols_name = map[int32]string{
		0:   "IPPROT_INVALID",
		1:   "IPPROT_ICMP",
		2:   "IPPROT_IGMP",
		4:   "IPPROT_IPIP",
		6:   "IPPROT_TCP",
		8:   "IPPROT_EGP",
		17:  "IPPROT_UDP",
		46:  "IPPROT_RSVP",
		47:  "IPPROT_GRE",
		50:  "IPPROT_ESP",
		51:  "IPPROT_AH",
		58:  "IPPROT_ICMP6",
		89:  "IPPROT_OSPF",
		103: "IPPROT_PIM",
		132: "IPPROT_SCTP",
	}
	IpProtocols_value = map[string]int32{
		"IPPROT_INVALID": 0,
		"IPPROT_ICMP":    1,
		"IPPROT_IGMP":    2,
		"IPPROT_IPIP":    4,
		"IPPROT_TCP":     6,
		"IPPROT_EGP":     8,
		"IPPROT_UDP":     17,
		"IPPROT_RSVP":    46,
		"IPPROT_GRE":     47,
		"IPPROT_ESP":     50,
		"IPPROT_AH":      51,
		"IPPROT_ICMP6":   58,
		"IPPROT_OSPF":    89,
		"IPPROT_PIM":     103,
		"IPPROT_SCTP":    132,
	}
)

func (x IpProtocols) Enum() *IpProtocols {
	p := new(IpProtocols)
	*p = x
	return p
}

func (x IpProtocols) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpProtocols) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[2].Descriptor()
}

func (IpProtocols) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[2]
}

func (x IpProtocols) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpProtocols.Descriptor instead.
func (IpProtocols) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{2}
}

//*
// Well known port numbers for which ip header can be matched
type IpPorts int32

const (
	IpPorts_IPPRT_INVALID        IpPorts = 0    //* Invalid or undefined value
	IpPorts_IPPRT_FTP_DATA       IpPorts = 20   //* FTP data
	IpPorts_IPPRT_FTP            IpPorts = 21   //* FTP
	IpPorts_IPPRT_SSH            IpPorts = 22   //* Secure shell
	IpPorts_IPPRT_TELNET         IpPorts = 23   //* Telnet
	IpPorts_IPPRT_SMTP           IpPorts = 25   //* Simple Mail Transfer Protocol
	IpPorts_IPPRT_TACACS         IpPorts = 49   //* TACACS or TACACS+
	IpPorts_IPPRT_TACACS_DS      IpPorts = 65   //* TACACS-DS
	IpPorts_IPPRT_DOMAIN         IpPorts = 53   //* Domain Name System (DNS)
	IpPorts_IPPRT_DHCP           IpPorts = 67   //* Dynamic Host Configuration Protocol
	IpPorts_IPPRT_BOOTPS         IpPorts = 67   //* Bootstrap protocol server
	IpPorts_IPPRT_BOOTPC         IpPorts = 68   //* Bootstrap protocol client
	IpPorts_IPPRT_TFTP           IpPorts = 69   //* Trivial FTP
	IpPorts_IPPRT_FINGER         IpPorts = 79   //* Finger
	IpPorts_IPPRT_HTTP           IpPorts = 80   //* Hypertext Transfer Protocol
	IpPorts_IPPRT_KERBEROS_SEC   IpPorts = 88   //* Kerberos Security
	IpPorts_IPPRT_POP3           IpPorts = 110  //* Post Office Protocol 3
	IpPorts_IPPRT_SUNRPC         IpPorts = 111  //* Sun Microsystems remote procedure call
	IpPorts_IPPRT_IDENT          IpPorts = 113  //* Ident
	IpPorts_IPPRT_NNTP           IpPorts = 119  //* Network News Transport Protocol
	IpPorts_IPPRT_NTP            IpPorts = 123  //* Network Time Protocol
	IpPorts_IPPRT_NETBIOS_NS     IpPorts = 137  //* NetBIOS name service
	IpPorts_IPPRT_NETBIOS_DGM    IpPorts = 138  //* NetBIOS DGM
	IpPorts_IPPRT_NETBIOS_SSN    IpPorts = 139  //* NetBIOS session service
	IpPorts_IPPRT_IMAP           IpPorts = 143  //* Internet Message Access Protocol
	IpPorts_IPPRT_SNMP           IpPorts = 161  //* Simple Network Management Protocol
	IpPorts_IPPRT_SNMPTRAP       IpPorts = 162  //* SNMP traps
	IpPorts_IPPRT_XDMCP          IpPorts = 177  //* X Display Manager Control Protocol
	IpPorts_IPPRT_BGP            IpPorts = 179  //* Border Gateway Protocol
	IpPorts_IPPRT_LDAP           IpPorts = 389  //* Lightweight Directory Access Protocol
	IpPorts_IPPRT_MOBILEIP_AGENT IpPorts = 434  //* Mobile IP agent
	IpPorts_IPPRT_MOBILIP_MN     IpPorts = 435  //* Mobile IP MN
	IpPorts_IPPRT_MSDP           IpPorts = 639  //* Multicast Source Discovery Protocol
	IpPorts_IPPRT_HTTPS          IpPorts = 443  //* Secure HTTP
	IpPorts_IPPRT_SNPP           IpPorts = 444  //* Simple paging protocol
	IpPorts_IPPRT_BIFF           IpPorts = 512  //* Biff/Comsat
	IpPorts_IPPRT_EXEC           IpPorts = 512  //* UNIX rexec
	IpPorts_IPPRT_LOGIN          IpPorts = 513  //* UNIX rlogin
	IpPorts_IPPRT_WHO            IpPorts = 513  //* UNIX rwho
	IpPorts_IPPRT_CMD            IpPorts = 514  //* UNIX rsh
	IpPorts_IPPRT_SYSLOG         IpPorts = 514  //* System log
	IpPorts_IPPRT_PRINTER        IpPorts = 515  //* Printer
	IpPorts_IPPRT_TALK           IpPorts = 517  //* UNIX Talk
	IpPorts_IPPRT_NTALK          IpPorts = 518  //* New Talk
	IpPorts_IPPRT_RIP            IpPorts = 520  //* Routing Information Protocol
	IpPorts_IPPRT_TIMED          IpPorts = 525  //* UNIX time daemon
	IpPorts_IPPRT_KLOGIN         IpPorts = 543  //* Kerberos rlogin
	IpPorts_IPPRT_KSHELL         IpPorts = 544  //* Kerberos rsh
	IpPorts_IPPRT_LDP            IpPorts = 646  //* Label Distribution Protocol
	IpPorts_IPPRT_KRB_PROP       IpPorts = 754  //* Kerberos database propagation
	IpPorts_IPPRT_KRBUPDATE      IpPorts = 760  //* Kerberos database update
	IpPorts_IPPRT_KPASSWD        IpPorts = 761  //* Kerberos passwd
	IpPorts_IPPRT_SOCKS          IpPorts = 1080 //* Socks
	IpPorts_IPPRT_AFS            IpPorts = 1483 //* AFS
	IpPorts_IPPRT_PPTP           IpPorts = 1723 //* Point-to-Point Tunneling Protocol
	IpPorts_IPPRT_RADIUS         IpPorts = 1812 //* RADIUS authentication
	IpPorts_IPPRT_RADACCT        IpPorts = 1813 //* RADIUS accounting
	IpPorts_IPPRT_ZEPHYR_SRV     IpPorts = 2102 //* Zephyr server
	IpPorts_IPPRT_ZEPHYR_CLT     IpPorts = 2103 //* Zephyr serv-hm connection
	IpPorts_IPPRT_ZEPHYR_HM      IpPorts = 2104 //* Zephyr hostmanager
	IpPorts_IPPRT_NFSD           IpPorts = 2049 //* Network File System
	IpPorts_IPPRT_EKLOGIN        IpPorts = 2105 //* Encrypted Kerberos rlogin
	IpPorts_IPPRT_EKSHELL        IpPorts = 2106 //* Encrypted Kerberos rsh
	IpPorts_IPPRT_RKINIT         IpPorts = 2108 //* Kerberos remote kinit
	IpPorts_IPPRT_CVSPSERVER     IpPorts = 2401 //* CVS pserver
)

// Enum value maps for IpPorts.
var (
	IpPorts_name = map[int32]string{
		0:  "IPPRT_INVALID",
		20: "IPPRT_FTP_DATA",
		21: "IPPRT_FTP",
		22: "IPPRT_SSH",
		23: "IPPRT_TELNET",
		25: "IPPRT_SMTP",
		49: "IPPRT_TACACS",
		65: "IPPRT_TACACS_DS",
		53: "IPPRT_DOMAIN",
		67: "IPPRT_DHCP",
		// Duplicate value: 67: "IPPRT_BOOTPS",
		68:  "IPPRT_BOOTPC",
		69:  "IPPRT_TFTP",
		79:  "IPPRT_FINGER",
		80:  "IPPRT_HTTP",
		88:  "IPPRT_KERBEROS_SEC",
		110: "IPPRT_POP3",
		111: "IPPRT_SUNRPC",
		113: "IPPRT_IDENT",
		119: "IPPRT_NNTP",
		123: "IPPRT_NTP",
		137: "IPPRT_NETBIOS_NS",
		138: "IPPRT_NETBIOS_DGM",
		139: "IPPRT_NETBIOS_SSN",
		143: "IPPRT_IMAP",
		161: "IPPRT_SNMP",
		162: "IPPRT_SNMPTRAP",
		177: "IPPRT_XDMCP",
		179: "IPPRT_BGP",
		389: "IPPRT_LDAP",
		434: "IPPRT_MOBILEIP_AGENT",
		435: "IPPRT_MOBILIP_MN",
		639: "IPPRT_MSDP",
		443: "IPPRT_HTTPS",
		444: "IPPRT_SNPP",
		512: "IPPRT_BIFF",
		// Duplicate value: 512: "IPPRT_EXEC",
		513: "IPPRT_LOGIN",
		// Duplicate value: 513: "IPPRT_WHO",
		514: "IPPRT_CMD",
		// Duplicate value: 514: "IPPRT_SYSLOG",
		515:  "IPPRT_PRINTER",
		517:  "IPPRT_TALK",
		518:  "IPPRT_NTALK",
		520:  "IPPRT_RIP",
		525:  "IPPRT_TIMED",
		543:  "IPPRT_KLOGIN",
		544:  "IPPRT_KSHELL",
		646:  "IPPRT_LDP",
		754:  "IPPRT_KRB_PROP",
		760:  "IPPRT_KRBUPDATE",
		761:  "IPPRT_KPASSWD",
		1080: "IPPRT_SOCKS",
		1483: "IPPRT_AFS",
		1723: "IPPRT_PPTP",
		1812: "IPPRT_RADIUS",
		1813: "IPPRT_RADACCT",
		2102: "IPPRT_ZEPHYR_SRV",
		2103: "IPPRT_ZEPHYR_CLT",
		2104: "IPPRT_ZEPHYR_HM",
		2049: "IPPRT_NFSD",
		2105: "IPPRT_EKLOGIN",
		2106: "IPPRT_EKSHELL",
		2108: "IPPRT_RKINIT",
		2401: "IPPRT_CVSPSERVER",
	}
	IpPorts_value = map[string]int32{
		"IPPRT_INVALID":        0,
		"IPPRT_FTP_DATA":       20,
		"IPPRT_FTP":            21,
		"IPPRT_SSH":            22,
		"IPPRT_TELNET":         23,
		"IPPRT_SMTP":           25,
		"IPPRT_TACACS":         49,
		"IPPRT_TACACS_DS":      65,
		"IPPRT_DOMAIN":         53,
		"IPPRT_DHCP":           67,
		"IPPRT_BOOTPS":         67,
		"IPPRT_BOOTPC":         68,
		"IPPRT_TFTP":           69,
		"IPPRT_FINGER":         79,
		"IPPRT_HTTP":           80,
		"IPPRT_KERBEROS_SEC":   88,
		"IPPRT_POP3":           110,
		"IPPRT_SUNRPC":         111,
		"IPPRT_IDENT":          113,
		"IPPRT_NNTP":           119,
		"IPPRT_NTP":            123,
		"IPPRT_NETBIOS_NS":     137,
		"IPPRT_NETBIOS_DGM":    138,
		"IPPRT_NETBIOS_SSN":    139,
		"IPPRT_IMAP":           143,
		"IPPRT_SNMP":           161,
		"IPPRT_SNMPTRAP":       162,
		"IPPRT_XDMCP":          177,
		"IPPRT_BGP":            179,
		"IPPRT_LDAP":           389,
		"IPPRT_MOBILEIP_AGENT": 434,
		"IPPRT_MOBILIP_MN":     435,
		"IPPRT_MSDP":           639,
		"IPPRT_HTTPS":          443,
		"IPPRT_SNPP":           444,
		"IPPRT_BIFF":           512,
		"IPPRT_EXEC":           512,
		"IPPRT_LOGIN":          513,
		"IPPRT_WHO":            513,
		"IPPRT_CMD":            514,
		"IPPRT_SYSLOG":         514,
		"IPPRT_PRINTER":        515,
		"IPPRT_TALK":           517,
		"IPPRT_NTALK":          518,
		"IPPRT_RIP":            520,
		"IPPRT_TIMED":          525,
		"IPPRT_KLOGIN":         543,
		"IPPRT_KSHELL":         544,
		"IPPRT_LDP":            646,
		"IPPRT_KRB_PROP":       754,
		"IPPRT_KRBUPDATE":      760,
		"IPPRT_KPASSWD":        761,
		"IPPRT_SOCKS":          1080,
		"IPPRT_AFS":            1483,
		"IPPRT_PPTP":           1723,
		"IPPRT_RADIUS":         1812,
		"IPPRT_RADACCT":        1813,
		"IPPRT_ZEPHYR_SRV":     2102,
		"IPPRT_ZEPHYR_CLT":     2103,
		"IPPRT_ZEPHYR_HM":      2104,
		"IPPRT_NFSD":           2049,
		"IPPRT_EKLOGIN":        2105,
		"IPPRT_EKSHELL":        2106,
		"IPPRT_RKINIT":         2108,
		"IPPRT_CVSPSERVER":     2401,
	}
)

func (x IpPorts) Enum() *IpPorts {
	p := new(IpPorts)
	*p = x
	return p
}

func (x IpPorts) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpPorts) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[3].Descriptor()
}

func (IpPorts) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[3]
}

func (x IpPorts) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpPorts.Descriptor instead.
func (IpPorts) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{3}
}

//*
// icmp type for which icmp header can be matched
type IcmpType int32

const (
	IcmpType_ICMP_TYP_ECHO_REPLY           IcmpType = 0  //* Echo reply
	IcmpType_ICMP_TYP_ECHO_REQUEST         IcmpType = 8  //* Echo request
	IcmpType_ICMP_TYP_UNREACHABLE          IcmpType = 3  //* Unreachable
	IcmpType_ICMP_TYP_SOURCE_QUENCH        IcmpType = 4  //* Source quench
	IcmpType_ICMP_TYP_REDIRECT             IcmpType = 5  //* Redirect
	IcmpType_ICMP_TYP_ROUTER_ADVERTISEMENT IcmpType = 9  //* Router advertisement
	IcmpType_ICMP_TYP_ROUTER_SOLICIT       IcmpType = 10 //* Router solicit
	IcmpType_ICMP_TYP_TIME_EXCEEDED        IcmpType = 11 //* Time exceeded
	IcmpType_ICMP_TYP_PARAMETER_PROBLEM    IcmpType = 12 //* Parameter problem
	IcmpType_ICMP_TYP_TIMESTAMP            IcmpType = 13 //* Timestamp
	IcmpType_ICMP_TYP_TIMESTAMP_REPLY      IcmpType = 14 //* Timestamp reply
	IcmpType_ICMP_TYP_INFO_REQUEST         IcmpType = 15 //* Informational request
	IcmpType_ICMP_TYP_INFO_REPLY           IcmpType = 16 //* Informational reply
	IcmpType_ICMP_TYP_MASK_REQUEST         IcmpType = 17 //* Mask request
	IcmpType_ICMP_TYP_MASK_REPLY           IcmpType = 18 //* Mask reply
)

// Enum value maps for IcmpType.
var (
	IcmpType_name = map[int32]string{
		0:  "ICMP_TYP_ECHO_REPLY",
		8:  "ICMP_TYP_ECHO_REQUEST",
		3:  "ICMP_TYP_UNREACHABLE",
		4:  "ICMP_TYP_SOURCE_QUENCH",
		5:  "ICMP_TYP_REDIRECT",
		9:  "ICMP_TYP_ROUTER_ADVERTISEMENT",
		10: "ICMP_TYP_ROUTER_SOLICIT",
		11: "ICMP_TYP_TIME_EXCEEDED",
		12: "ICMP_TYP_PARAMETER_PROBLEM",
		13: "ICMP_TYP_TIMESTAMP",
		14: "ICMP_TYP_TIMESTAMP_REPLY",
		15: "ICMP_TYP_INFO_REQUEST",
		16: "ICMP_TYP_INFO_REPLY",
		17: "ICMP_TYP_MASK_REQUEST",
		18: "ICMP_TYP_MASK_REPLY",
	}
	IcmpType_value = map[string]int32{
		"ICMP_TYP_ECHO_REPLY":           0,
		"ICMP_TYP_ECHO_REQUEST":         8,
		"ICMP_TYP_UNREACHABLE":          3,
		"ICMP_TYP_SOURCE_QUENCH":        4,
		"ICMP_TYP_REDIRECT":             5,
		"ICMP_TYP_ROUTER_ADVERTISEMENT": 9,
		"ICMP_TYP_ROUTER_SOLICIT":       10,
		"ICMP_TYP_TIME_EXCEEDED":        11,
		"ICMP_TYP_PARAMETER_PROBLEM":    12,
		"ICMP_TYP_TIMESTAMP":            13,
		"ICMP_TYP_TIMESTAMP_REPLY":      14,
		"ICMP_TYP_INFO_REQUEST":         15,
		"ICMP_TYP_INFO_REPLY":           16,
		"ICMP_TYP_MASK_REQUEST":         17,
		"ICMP_TYP_MASK_REPLY":           18,
	}
)

func (x IcmpType) Enum() *IcmpType {
	p := new(IcmpType)
	*p = x
	return p
}

func (x IcmpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IcmpType) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[4].Descriptor()
}

func (IcmpType) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[4]
}

func (x IcmpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IcmpType.Descriptor instead.
func (IcmpType) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{4}
}

//*
// icmp code for which icmp header can be matched
type IcmpCode int32

const (
	IcmpCode_ICMP_CODE_NETWORK_UNREACHABLE                   IcmpCode = 0  //* Network unreachable
	IcmpCode_ICMP_CODE_HOST_UNREACHABLE                      IcmpCode = 1  //* Host unreachable
	IcmpCode_ICMP_CODE_PROTOCOL_UNREACHABLE                  IcmpCode = 2  //* Protocol unreachable
	IcmpCode_ICMP_CODE_PORT_UNREACHABLE                      IcmpCode = 3  //* Port unreachable
	IcmpCode_ICMP_CODE_FRAGMENTATION_NEEDED                  IcmpCode = 4  //* Fragmentation needed
	IcmpCode_ICMP_CODE_SOURCE_ROUTE_FAILED                   IcmpCode = 5  //* Source route failed
	IcmpCode_ICMP_CODE_DESTINATION_NETWORK_UNKNOWN           IcmpCode = 6  //* Destination network unknown
	IcmpCode_ICMP_CODE_DESTINATION_HOST_UNKNOWN              IcmpCode = 7  //* Destination host unknown
	IcmpCode_ICMP_CODE_SOURCE_HOST_ISOLATED                  IcmpCode = 8  //* Source host isolated
	IcmpCode_ICMP_CODE_DESTINATION_NETWORK_PROHIBITED        IcmpCode = 9  //* Destination network prohibited
	IcmpCode_ICMP_CODE_DESTINATION_HOST_PROHIBITED           IcmpCode = 10 //* Destination host prohibited
	IcmpCode_ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS           IcmpCode = 11 //* Network unreachable for ToS
	IcmpCode_ICMP_CODE_HOST_UNREACHABLE_FOR_TOS              IcmpCode = 12 //* Host unreachable for ToS
	IcmpCode_ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING IcmpCode = 13 //* Communication prohibited by filtering
	IcmpCode_ICMP_CODE_HOST_PRECEDENCE_VIOLATION             IcmpCode = 14 //* Host precedence violation
	IcmpCode_ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT           IcmpCode = 15 //* Precedence cutoff in effect
	IcmpCode_ICMP_CODE_REDIRECT_FOR_NETWORK                  IcmpCode = 0  //* Redirect for network
	IcmpCode_ICMP_CODE_REDIRECT_FOR_HOST                     IcmpCode = 1  //* Redirect for host
	IcmpCode_ICMP_CODE_REDIRECT_FOR_TOS_AND_NET              IcmpCode = 2  //* Redirect for ToS and net
	IcmpCode_ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST             IcmpCode = 3  //* Redirect for ToS and host
	IcmpCode_ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT            IcmpCode = 0  //* TTL eq zero during transit
	IcmpCode_ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY         IcmpCode = 1  //* TTL eq zero during reassembly
	IcmpCode_ICMP_CODE_IP_HEADER_BAD                         IcmpCode = 0  //* IP header bad
	IcmpCode_ICMP_CODE_REQUIRED_OPTION_MISSING               IcmpCode = 1  //* Required option missing
)

// Enum value maps for IcmpCode.
var (
	IcmpCode_name = map[int32]string{
		0:  "ICMP_CODE_NETWORK_UNREACHABLE",
		1:  "ICMP_CODE_HOST_UNREACHABLE",
		2:  "ICMP_CODE_PROTOCOL_UNREACHABLE",
		3:  "ICMP_CODE_PORT_UNREACHABLE",
		4:  "ICMP_CODE_FRAGMENTATION_NEEDED",
		5:  "ICMP_CODE_SOURCE_ROUTE_FAILED",
		6:  "ICMP_CODE_DESTINATION_NETWORK_UNKNOWN",
		7:  "ICMP_CODE_DESTINATION_HOST_UNKNOWN",
		8:  "ICMP_CODE_SOURCE_HOST_ISOLATED",
		9:  "ICMP_CODE_DESTINATION_NETWORK_PROHIBITED",
		10: "ICMP_CODE_DESTINATION_HOST_PROHIBITED",
		11: "ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS",
		12: "ICMP_CODE_HOST_UNREACHABLE_FOR_TOS",
		13: "ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING",
		14: "ICMP_CODE_HOST_PRECEDENCE_VIOLATION",
		15: "ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT",
		// Duplicate value: 0: "ICMP_CODE_REDIRECT_FOR_NETWORK",
		// Duplicate value: 1: "ICMP_CODE_REDIRECT_FOR_HOST",
		// Duplicate value: 2: "ICMP_CODE_REDIRECT_FOR_TOS_AND_NET",
		// Duplicate value: 3: "ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST",
		// Duplicate value: 0: "ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT",
		// Duplicate value: 1: "ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY",
		// Duplicate value: 0: "ICMP_CODE_IP_HEADER_BAD",
		// Duplicate value: 1: "ICMP_CODE_REQUIRED_OPTION_MISSING",
	}
	IcmpCode_value = map[string]int32{
		"ICMP_CODE_NETWORK_UNREACHABLE":                   0,
		"ICMP_CODE_HOST_UNREACHABLE":                      1,
		"ICMP_CODE_PROTOCOL_UNREACHABLE":                  2,
		"ICMP_CODE_PORT_UNREACHABLE":                      3,
		"ICMP_CODE_FRAGMENTATION_NEEDED":                  4,
		"ICMP_CODE_SOURCE_ROUTE_FAILED":                   5,
		"ICMP_CODE_DESTINATION_NETWORK_UNKNOWN":           6,
		"ICMP_CODE_DESTINATION_HOST_UNKNOWN":              7,
		"ICMP_CODE_SOURCE_HOST_ISOLATED":                  8,
		"ICMP_CODE_DESTINATION_NETWORK_PROHIBITED":        9,
		"ICMP_CODE_DESTINATION_HOST_PROHIBITED":           10,
		"ICMP_CODE_NETWORK_UNREACHABLE_FOR_TOS":           11,
		"ICMP_CODE_HOST_UNREACHABLE_FOR_TOS":              12,
		"ICMP_CODE_COMMUNICATION_PROHIBITED_BY_FILTERING": 13,
		"ICMP_CODE_HOST_PRECEDENCE_VIOLATION":             14,
		"ICMP_CODE_PRECEDENCE_CUTOFF_IN_EFFECT":           15,
		"ICMP_CODE_REDIRECT_FOR_NETWORK":                  0,
		"ICMP_CODE_REDIRECT_FOR_HOST":                     1,
		"ICMP_CODE_REDIRECT_FOR_TOS_AND_NET":              2,
		"ICMP_CODE_REDIRECT_FOR_TOS_AND_HOST":             3,
		"ICMP_CODE_TTL_EQ_ZERO_DURING_TRANSIT":            0,
		"ICMP_CODE_TTL_EQ_ZERO_DURING_REASSEMBLY":         1,
		"ICMP_CODE_IP_HEADER_BAD":                         0,
		"ICMP_CODE_REQUIRED_OPTION_MISSING":               1,
	}
)

func (x IcmpCode) Enum() *IcmpCode {
	p := new(IcmpCode)
	*p = x
	return p
}

func (x IcmpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IcmpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[5].Descriptor()
}

func (IcmpCode) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[5]
}

func (x IcmpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IcmpCode.Descriptor instead.
func (IcmpCode) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{5}
}

//*
// tcp flags for which tcp header can be matched
type TcpFlags int32

const (
	TcpFlags_TCP_FLG_INVALID TcpFlags = 0  //* To satisfy protobuf compiler
	TcpFlags_TCP_FLG_FIN     TcpFlags = 1  //* FIN
	TcpFlags_TCP_FLG_SYN     TcpFlags = 2  //* SYN
	TcpFlags_TCP_FLG_RST     TcpFlags = 4  //* RST
	TcpFlags_TCP_FLG_PUSH    TcpFlags = 8  //* PUSH
	TcpFlags_TCP_FLG_ACK     TcpFlags = 16 //* ACK
	TcpFlags_TCP_FLG_URGENT  TcpFlags = 32 //* Urgent
)

// Enum value maps for TcpFlags.
var (
	TcpFlags_name = map[int32]string{
		0:  "TCP_FLG_INVALID",
		1:  "TCP_FLG_FIN",
		2:  "TCP_FLG_SYN",
		4:  "TCP_FLG_RST",
		8:  "TCP_FLG_PUSH",
		16: "TCP_FLG_ACK",
		32: "TCP_FLG_URGENT",
	}
	TcpFlags_value = map[string]int32{
		"TCP_FLG_INVALID": 0,
		"TCP_FLG_FIN":     1,
		"TCP_FLG_SYN":     2,
		"TCP_FLG_RST":     4,
		"TCP_FLG_PUSH":    8,
		"TCP_FLG_ACK":     16,
		"TCP_FLG_URGENT":  32,
	}
)

func (x TcpFlags) Enum() *TcpFlags {
	p := new(TcpFlags)
	*p = x
	return p
}

func (x TcpFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[6].Descriptor()
}

func (TcpFlags) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[6]
}

func (x TcpFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpFlags.Descriptor instead.
func (TcpFlags) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{6}
}

//*
// ip fragment bit for which ip header can be matched
type IpFragment int32

const (
	IpFragment_IP_FRAG_FLOW_DONT_FRAGMENT   IpFragment = 0 //*  Don't Fragment flag is set
	IpFragment_IP_FRAG_FLOW_IS_FRAGMENT     IpFragment = 1 //* Fragmented packet
	IpFragment_IP_FRAG_FLOW_FIRST_FRAGMENT  IpFragment = 2 //* First fragment
	IpFragment_IP_FRAG_FLOW_LAST_FRAGMENT   IpFragment = 3 //* Last fragment
	IpFragment_IP_FRAG_FLOW_IS_NOT_FRAGMENT IpFragment = 4 //* Not a fragment
)

// Enum value maps for IpFragment.
var (
	IpFragment_name = map[int32]string{
		0: "IP_FRAG_FLOW_DONT_FRAGMENT",
		1: "IP_FRAG_FLOW_IS_FRAGMENT",
		2: "IP_FRAG_FLOW_FIRST_FRAGMENT",
		3: "IP_FRAG_FLOW_LAST_FRAGMENT",
		4: "IP_FRAG_FLOW_IS_NOT_FRAGMENT",
	}
	IpFragment_value = map[string]int32{
		"IP_FRAG_FLOW_DONT_FRAGMENT":   0,
		"IP_FRAG_FLOW_IS_FRAGMENT":     1,
		"IP_FRAG_FLOW_FIRST_FRAGMENT":  2,
		"IP_FRAG_FLOW_LAST_FRAGMENT":   3,
		"IP_FRAG_FLOW_IS_NOT_FRAGMENT": 4,
	}
)

func (x IpFragment) Enum() *IpFragment {
	p := new(IpFragment)
	*p = x
	return p
}

func (x IpFragment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpFragment) Descriptor() protoreflect.EnumDescriptor {
	return file_jnx_addr_proto_enumTypes[7].Descriptor()
}

func (IpFragment) Type() protoreflect.EnumType {
	return &file_jnx_addr_proto_enumTypes[7]
}

func (x IpFragment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpFragment.Descriptor instead.
func (IpFragment) EnumDescriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{7}
}

//
// An IP address, which may be either IPv4 or IPv6 and be respresented
// by either a string or array of binary bytes.
type IpAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AddrFormat:
	//	*IpAddress_AddrString
	//	*IpAddress_AddrBytes
	AddrFormat isIpAddress_AddrFormat `protobuf_oneof:"AddrFormat"`
}

func (x *IpAddress) Reset() {
	*x = IpAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_addr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddress) ProtoMessage() {}

func (x *IpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_addr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddress.ProtoReflect.Descriptor instead.
func (*IpAddress) Descriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{0}
}

func (m *IpAddress) GetAddrFormat() isIpAddress_AddrFormat {
	if m != nil {
		return m.AddrFormat
	}
	return nil
}

func (x *IpAddress) GetAddrString() string {
	if x, ok := x.GetAddrFormat().(*IpAddress_AddrString); ok {
		return x.AddrString
	}
	return ""
}

func (x *IpAddress) GetAddrBytes() []byte {
	if x, ok := x.GetAddrFormat().(*IpAddress_AddrBytes); ok {
		return x.AddrBytes
	}
	return nil
}

type isIpAddress_AddrFormat interface {
	isIpAddress_AddrFormat()
}

type IpAddress_AddrString struct {
	//* IP address string in standard format
	AddrString string `protobuf:"bytes,1,opt,name=addr_string,json=addrString,proto3,oneof"`
}

type IpAddress_AddrBytes struct {
	//* Binary IP address in network-ordered array of bytes
	AddrBytes []byte `protobuf:"bytes,2,opt,name=addr_bytes,json=addrBytes,proto3,oneof"`
}

func (*IpAddress_AddrString) isIpAddress_AddrFormat() {}

func (*IpAddress_AddrBytes) isIpAddress_AddrFormat() {}

//
// An ethernet MAC address, which may be respresented by either a
// string (formatted as six groups of two hexidecimal digits separated by
// colons) or array of binary bytes.
type MacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AddrFormat:
	//	*MacAddress_AddrString
	//	*MacAddress_AddrBytes
	AddrFormat isMacAddress_AddrFormat `protobuf_oneof:"AddrFormat"`
}

func (x *MacAddress) Reset() {
	*x = MacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_addr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddress) ProtoMessage() {}

func (x *MacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_addr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddress.ProtoReflect.Descriptor instead.
func (*MacAddress) Descriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{1}
}

func (m *MacAddress) GetAddrFormat() isMacAddress_AddrFormat {
	if m != nil {
		return m.AddrFormat
	}
	return nil
}

func (x *MacAddress) GetAddrString() string {
	if x, ok := x.GetAddrFormat().(*MacAddress_AddrString); ok {
		return x.AddrString
	}
	return ""
}

func (x *MacAddress) GetAddrBytes() []byte {
	if x, ok := x.GetAddrFormat().(*MacAddress_AddrBytes); ok {
		return x.AddrBytes
	}
	return nil
}

type isMacAddress_AddrFormat interface {
	isMacAddress_AddrFormat()
}

type MacAddress_AddrString struct {
	//* MAC address string in standard format
	AddrString string `protobuf:"bytes,1,opt,name=addr_string,json=addrString,proto3,oneof"`
}

type MacAddress_AddrBytes struct {
	//* Binary MAC address in network-ordered array of bytes
	AddrBytes []byte `protobuf:"bytes,2,opt,name=addr_bytes,json=addrBytes,proto3,oneof"`
}

func (*MacAddress_AddrString) isMacAddress_AddrFormat() {}

func (*MacAddress_AddrBytes) isMacAddress_AddrFormat() {}

//*
// Numeric ranges can be used to provide range of unsigned 32-bit values.
type NumericRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Range Minimum value (inclusive). REQUIRED
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	//* Range Maximum value (inclusive). REQUIRED
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *NumericRange) Reset() {
	*x = NumericRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_addr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRange) ProtoMessage() {}

func (x *NumericRange) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_addr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRange.ProtoReflect.Descriptor instead.
func (*NumericRange) Descriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{2}
}

func (x *NumericRange) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumericRange) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

//* List of Numeric Ranges
type NumericRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Range List for enums. OPTIONAL
	RangeList []*NumericRange `protobuf:"bytes,1,rep,name=range_list,json=rangeList,proto3" json:"range_list,omitempty"`
}

func (x *NumericRangeList) Reset() {
	*x = NumericRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_addr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRangeList) ProtoMessage() {}

func (x *NumericRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_addr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRangeList.ProtoReflect.Descriptor instead.
func (*NumericRangeList) Descriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{3}
}

func (x *NumericRangeList) GetRangeList() []*NumericRange {
	if x != nil {
		return x.RangeList
	}
	return nil
}

type IpFragementFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotMatch       bool `protobuf:"varint,1,opt,name=not_match,json=notMatch,proto3" json:"not_match,omitempty"`
	Match          bool `protobuf:"varint,2,opt,name=match,proto3" json:"match,omitempty"`
	DontFragement  bool `protobuf:"varint,3,opt,name=dont_fragement,json=dontFragement,proto3" json:"dont_fragement,omitempty"`
	IsAFragement   bool `protobuf:"varint,4,opt,name=is_a_fragement,json=isAFragement,proto3" json:"is_a_fragement,omitempty"`
	FirstFragement bool `protobuf:"varint,5,opt,name=first_fragement,json=firstFragement,proto3" json:"first_fragement,omitempty"`
	LastFragement  bool `protobuf:"varint,6,opt,name=last_fragement,json=lastFragement,proto3" json:"last_fragement,omitempty"`
}

func (x *IpFragementFlags) Reset() {
	*x = IpFragementFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jnx_addr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpFragementFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpFragementFlags) ProtoMessage() {}

func (x *IpFragementFlags) ProtoReflect() protoreflect.Message {
	mi := &file_jnx_addr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpFragementFlags.ProtoReflect.Descriptor instead.
func (*IpFragementFlags) Descriptor() ([]byte, []int) {
	return file_jnx_addr_proto_rawDescGZIP(), []int{4}
}

func (x *IpFragementFlags) GetNotMatch() bool {
	if x != nil {
		return x.NotMatch
	}
	return false
}

func (x *IpFragementFlags) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *IpFragementFlags) GetDontFragement() bool {
	if x != nil {
		return x.DontFragement
	}
	return false
}

func (x *IpFragementFlags) GetIsAFragement() bool {
	if x != nil {
		return x.IsAFragement
	}
	return false
}

func (x *IpFragementFlags) GetFirstFragement() bool {
	if x != nil {
		return x.FirstFragement
	}
	return false
}

func (x *IpFragementFlags) GetLastFragement() bool {
	if x != nil {
		return x.LastFragement
	}
	return false
}

var File_jnx_addr_proto protoreflect.FileDescriptor

var file_jnx_addr_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6a, 0x6e, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x09, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x32, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x48, 0x0a, 0x10,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x49, 0x70, 0x46, 0x72, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x41, 0x46, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x36, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x06, 0x41, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x46, 0x5f, 0x49, 0x4e, 0x45, 0x54, 0x36, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x46, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x2a, 0x89, 0x02, 0x0a, 0x0b, 0x49, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x49, 0x50, 0x49, 0x50, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x08, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x11, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x10, 0x2e,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x2f,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x45, 0x53, 0x50, 0x10, 0x32,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x41, 0x48, 0x10, 0x33, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x36, 0x10,
	0x3a, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x10, 0x59, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x50, 0x49, 0x4d,
	0x10, 0x67, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x54,
	0x50, 0x10, 0x84, 0x01, 0x2a, 0xca, 0x09, 0x0a, 0x07, 0x49, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x46, 0x54, 0x50,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x46, 0x54, 0x50, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x53, 0x53, 0x48, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x54,
	0x45, 0x4c, 0x4e, 0x45, 0x54, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x53, 0x4d, 0x54, 0x50, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x50, 0x50,
	0x52, 0x54, 0x5f, 0x54, 0x41, 0x43, 0x41, 0x43, 0x53, 0x5f, 0x44, 0x53, 0x10, 0x41, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x35,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x43,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x50, 0x53,
	0x10, 0x43, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x54,
	0x50, 0x43, 0x10, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x54, 0x46,
	0x54, 0x50, 0x10, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x47, 0x45, 0x52, 0x10, 0x4f, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x10, 0x50, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x4b, 0x45, 0x52, 0x42, 0x45, 0x52, 0x4f, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x58, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x50, 0x33, 0x10, 0x6e, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x4e, 0x52, 0x50, 0x43, 0x10, 0x6f,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10,
	0x71, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4e, 0x4e, 0x54, 0x50, 0x10,
	0x77, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4e, 0x54, 0x50, 0x10, 0x7b,
	0x12, 0x15, 0x0a, 0x10, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x42, 0x49, 0x4f,
	0x53, 0x5f, 0x4e, 0x53, 0x10, 0x89, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x4e, 0x45, 0x54, 0x42, 0x49, 0x4f, 0x53, 0x5f, 0x44, 0x47, 0x4d, 0x10, 0x8a, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x42, 0x49, 0x4f, 0x53,
	0x5f, 0x53, 0x53, 0x4e, 0x10, 0x8b, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x49, 0x4d, 0x41, 0x50, 0x10, 0x8f, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52,
	0x54, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x10, 0xa1, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x50, 0x50,
	0x52, 0x54, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x54, 0x52, 0x41, 0x50, 0x10, 0xa2, 0x01, 0x12, 0x10,
	0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x58, 0x44, 0x4d, 0x43, 0x50, 0x10, 0xb1, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xb3, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4c, 0x44, 0x41, 0x50, 0x10, 0x85,
	0x03, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x49, 0x50, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0xb2, 0x03, 0x12, 0x15, 0x0a, 0x10,
	0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49, 0x50, 0x5f, 0x4d, 0x4e,
	0x10, 0xb3, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4d, 0x53, 0x44,
	0x50, 0x10, 0xff, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x10, 0xbb, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x53, 0x4e, 0x50, 0x50, 0x10, 0xbc, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x42, 0x49, 0x46, 0x46, 0x10, 0x80, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52,
	0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x80, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x50, 0x50,
	0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x81, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x49,
	0x50, 0x50, 0x52, 0x54, 0x5f, 0x57, 0x48, 0x4f, 0x10, 0x81, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x49,
	0x50, 0x50, 0x52, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x82, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x49,
	0x50, 0x50, 0x52, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x82, 0x04, 0x12, 0x12,
	0x0a, 0x0d, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x83, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x4c, 0x4b,
	0x10, 0x85, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4e, 0x54, 0x41,
	0x4c, 0x4b, 0x10, 0x86, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x52,
	0x49, 0x50, 0x10, 0x88, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x10, 0x8d, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54,
	0x5f, 0x4b, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x9f, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x50,
	0x50, 0x52, 0x54, 0x5f, 0x4b, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0xa0, 0x04, 0x12, 0x0e, 0x0a,
	0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4c, 0x44, 0x50, 0x10, 0x86, 0x05, 0x12, 0x13, 0x0a,
	0x0e, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4b, 0x52, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x10,
	0xf2, 0x05, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x4b, 0x52, 0x42, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf8, 0x05, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x50, 0x50, 0x52,
	0x54, 0x5f, 0x4b, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x10, 0xf9, 0x05, 0x12, 0x10, 0x0a, 0x0b,
	0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0xb8, 0x08, 0x12, 0x0e,
	0x0a, 0x09, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x53, 0x10, 0xcb, 0x0b, 0x12, 0x0f,
	0x0a, 0x0a, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x50, 0x50, 0x54, 0x50, 0x10, 0xbb, 0x0d, 0x12,
	0x11, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10,
	0x94, 0x0e, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x44, 0x41,
	0x43, 0x43, 0x54, 0x10, 0x95, 0x0e, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x5a, 0x45, 0x50, 0x48, 0x59, 0x52, 0x5f, 0x53, 0x52, 0x56, 0x10, 0xb6, 0x10, 0x12, 0x15, 0x0a,
	0x10, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x5a, 0x45, 0x50, 0x48, 0x59, 0x52, 0x5f, 0x43, 0x4c,
	0x54, 0x10, 0xb7, 0x10, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x5a, 0x45,
	0x50, 0x48, 0x59, 0x52, 0x5f, 0x48, 0x4d, 0x10, 0xb8, 0x10, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x50,
	0x50, 0x52, 0x54, 0x5f, 0x4e, 0x46, 0x53, 0x44, 0x10, 0x81, 0x10, 0x12, 0x12, 0x0a, 0x0d, 0x49,
	0x50, 0x50, 0x52, 0x54, 0x5f, 0x45, 0x4b, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xb9, 0x10, 0x12,
	0x12, 0x0a, 0x0d, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x45, 0x4b, 0x53, 0x48, 0x45, 0x4c, 0x4c,
	0x10, 0xba, 0x10, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f, 0x52, 0x4b, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0xbc, 0x10, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x50, 0x50, 0x52, 0x54, 0x5f,
	0x43, 0x56, 0x53, 0x50, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0xe1, 0x12, 0x1a, 0x02, 0x10,
	0x01, 0x2a, 0xa5, 0x03, 0x0a, 0x08, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x43, 0x4d, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x43, 0x4d, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0x0e, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x12, 0x2a, 0xb9, 0x07, 0x0a, 0x08, 0x49, 0x63,
	0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x43, 0x4d, 0x50, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x49,
	0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x43, 0x4d,
	0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x0b, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x43, 0x4d, 0x50, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23,
	0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x55,
	0x54, 0x4f, 0x46, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x0f,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x54, 0x4f, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x45, 0x51, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f,
	0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x2b, 0x0a, 0x27, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x54,
	0x4c, 0x5f, 0x45, 0x51, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x43, 0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x43,
	0x4d, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x89, 0x01, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x5f, 0x46,
	0x4c, 0x47, 0x5f, 0x46, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x5f,
	0x46, 0x4c, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x43, 0x50,
	0x5f, 0x46, 0x4c, 0x47, 0x5f, 0x52, 0x53, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x43,
	0x50, 0x5f, 0x46, 0x4c, 0x47, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x47, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x43, 0x50, 0x5f, 0x46, 0x4c, 0x47, 0x5f, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x20, 0x2a, 0xad, 0x01, 0x0a, 0x0a, 0x49, 0x70, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x49, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x42, 0x10, 0x5a, 0x0e, 0x6a, 0x6e, 0x78, 0x2f, 0x6a, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jnx_addr_proto_rawDescOnce sync.Once
	file_jnx_addr_proto_rawDescData = file_jnx_addr_proto_rawDesc
)

func file_jnx_addr_proto_rawDescGZIP() []byte {
	file_jnx_addr_proto_rawDescOnce.Do(func() {
		file_jnx_addr_proto_rawDescData = protoimpl.X.CompressGZIP(file_jnx_addr_proto_rawDescData)
	})
	return file_jnx_addr_proto_rawDescData
}

var file_jnx_addr_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_jnx_addr_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_jnx_addr_proto_goTypes = []interface{}{
	(AddressFormat)(0),       // 0: jnxBase.AddressFormat
	(AfType)(0),              // 1: jnxBase.AfType
	(IpProtocols)(0),         // 2: jnxBase.IpProtocols
	(IpPorts)(0),             // 3: jnxBase.IpPorts
	(IcmpType)(0),            // 4: jnxBase.IcmpType
	(IcmpCode)(0),            // 5: jnxBase.IcmpCode
	(TcpFlags)(0),            // 6: jnxBase.TcpFlags
	(IpFragment)(0),          // 7: jnxBase.IpFragment
	(*IpAddress)(nil),        // 8: jnxBase.IpAddress
	(*MacAddress)(nil),       // 9: jnxBase.MacAddress
	(*NumericRange)(nil),     // 10: jnxBase.NumericRange
	(*NumericRangeList)(nil), // 11: jnxBase.NumericRangeList
	(*IpFragementFlags)(nil), // 12: jnxBase.IpFragementFlags
}
var file_jnx_addr_proto_depIdxs = []int32{
	10, // 0: jnxBase.NumericRangeList.range_list:type_name -> jnxBase.NumericRange
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_jnx_addr_proto_init() }
func file_jnx_addr_proto_init() {
	if File_jnx_addr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jnx_addr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_addr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_addr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_addr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jnx_addr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpFragementFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jnx_addr_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IpAddress_AddrString)(nil),
		(*IpAddress_AddrBytes)(nil),
	}
	file_jnx_addr_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MacAddress_AddrString)(nil),
		(*MacAddress_AddrBytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jnx_addr_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jnx_addr_proto_goTypes,
		DependencyIndexes: file_jnx_addr_proto_depIdxs,
		EnumInfos:         file_jnx_addr_proto_enumTypes,
		MessageInfos:      file_jnx_addr_proto_msgTypes,
	}.Build()
	File_jnx_addr_proto = out.File
	file_jnx_addr_proto_rawDesc = nil
	file_jnx_addr_proto_goTypes = nil
	file_jnx_addr_proto_depIdxs = nil
}
