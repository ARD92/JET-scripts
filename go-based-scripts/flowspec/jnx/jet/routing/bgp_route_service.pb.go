//
// Public API for the BGP routing services.
//
// This IDL defines the APIs for the BGP-specific routing services.

//
//  proto3 is recommended for use with LibJAPI and gRPC

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.9.1
// source: bgp_route_service.proto

//
// This is part of the routing package.

package routing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "jnx/jet/common"
	prpd "jnx/jet/prpd"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Routing protocols
type RouteProtocol int32

const (
	//* Unspecified protocol default behavior dependent on API:
	//  For route change requests, PROTO_BGP_STATIC.
	//  For route get requests, match either PROTO_BGP or PROTO_BGP_STATIC.
	RouteProtocol_PROTO_UNSPECIFIED RouteProtocol = 0
	//* BGP dynamic routes
	RouteProtocol_PROTO_BGP RouteProtocol = 1
	//* BGP static programmed routes
	RouteProtocol_PROTO_BGP_STATIC RouteProtocol = 2
)

// Enum value maps for RouteProtocol.
var (
	RouteProtocol_name = map[int32]string{
		0: "PROTO_UNSPECIFIED",
		1: "PROTO_BGP",
		2: "PROTO_BGP_STATIC",
	}
	RouteProtocol_value = map[string]int32{
		"PROTO_UNSPECIFIED": 0,
		"PROTO_BGP":         1,
		"PROTO_BGP_STATIC":  2,
	}
)

func (x RouteProtocol) Enum() *RouteProtocol {
	p := new(RouteProtocol)
	*p = x
	return p
}

func (x RouteProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[0].Descriptor()
}

func (RouteProtocol) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[0]
}

func (x RouteProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteProtocol.Descriptor instead.
func (RouteProtocol) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{0}
}

//*
// Route Operation Flag values that alter route add behavior.
// USE OF THIS TYPE IS DEPRECATED. Instead, use BgpRouteOperationFlags.
type RouteOperation int32

const (
	//*
	// Unspecified Operation, meaning no special operation specified.
	// USE OF THIS FLAG IS DEPRECATED. Instead, use BgpRouteOperationFlags.
	//
	// Deprecated: Marked as deprecated in bgp_route_service.proto.
	RouteOperation_UNSPECIFIED RouteOperation = 0
	//*
	//  Route operation indicating whether to attach the well-known
	//  no-advertise community.
	//  No-advertise has the effect of instructing the route not to
	//  advertise the route further. The community may alternately be
	//  included in the community_list.
	//  USE OF THIS FLAG IS DEPRECATED. Instead, use BgpRouteOperationFlags.
	//
	// Deprecated: Marked as deprecated in bgp_route_service.proto.
	RouteOperation_NO_ADVERTISE RouteOperation = 1
	//*
	//  Route operation indicating whether to attach the well-known no-export
	//  community. No-export has the effect of instructing the router
	//  not to advertise the route beyond the BGP confederation boundary.
	//  The community may alternately be included in the community_list.
	//  USE OF THIS FLAG IS DEPRECATED. Instead, use BgpRouteOperationFlags.
	//
	// Deprecated: Marked as deprecated in bgp_route_service.proto.
	RouteOperation_NO_EXPORT RouteOperation = 2
	//*
	//  Route Operation indicating whether to use NH_REJECT for the route
	//  This makes sense to be set only when programming route in RR.
	//  This can be used to save memory when there are a high number of
	//  unique nexthops.
	//  USE OF THIS FLAG IS DEPRECATED. Instead, use BgpRouteOperationFlags.
	//
	// Deprecated: Marked as deprecated in bgp_route_service.proto.
	RouteOperation_USE_NH_REJECT RouteOperation = 4
)

// Enum value maps for RouteOperation.
var (
	RouteOperation_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NO_ADVERTISE",
		2: "NO_EXPORT",
		4: "USE_NH_REJECT",
	}
	RouteOperation_value = map[string]int32{
		"UNSPECIFIED":   0,
		"NO_ADVERTISE":  1,
		"NO_EXPORT":     2,
		"USE_NH_REJECT": 4,
	}
)

func (x RouteOperation) Enum() *RouteOperation {
	p := new(RouteOperation)
	*p = x
	return p
}

func (x RouteOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[1].Descriptor()
}

func (RouteOperation) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[1]
}

func (x RouteOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteOperation.Descriptor instead.
func (RouteOperation) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{1}
}

//*
// BGP peer type identifies if the associated route as an internal (IBGP)
// or external (EBGP) route.
type BgpPeerType int32

const (
	BgpPeerType_BGP_INTERNAL BgpPeerType = 0 //* IBGP Route
	BgpPeerType_BGP_EXTERNAL BgpPeerType = 1 //* EBGP Route
)

// Enum value maps for BgpPeerType.
var (
	BgpPeerType_name = map[int32]string{
		0: "BGP_INTERNAL",
		1: "BGP_EXTERNAL",
	}
	BgpPeerType_value = map[string]int32{
		"BGP_INTERNAL": 0,
		"BGP_EXTERNAL": 1,
	}
)

func (x BgpPeerType) Enum() *BgpPeerType {
	p := new(BgpPeerType)
	*p = x
	return p
}

func (x BgpPeerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPeerType) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[2].Descriptor()
}

func (BgpPeerType) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[2]
}

func (x BgpPeerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPeerType.Descriptor instead.
func (BgpPeerType) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{2}
}

//* The route operation types for the monitor entries
type BgpRouteMonitorEntry_BgpRouteMonitorOper int32

const (
	//*
	//  A new route is being added or modified.
	//  bgp_route will contain the route info.
	BgpRouteMonitorEntry_ROUTE_UPDATE BgpRouteMonitorEntry_BgpRouteMonitorOper = 0
	//*
	//  An existing route is being removed.
	//  bgp_route will contain the route info.
	BgpRouteMonitorEntry_ROUTE_REMOVE BgpRouteMonitorEntry_BgpRouteMonitorOper = 1
	//*
	//  The initial set of route monitoring entires following a fresh
	//  client registration has been completed. bgp_route will be null for
	//  this operation.
	BgpRouteMonitorEntry_END_OF_RIBS BgpRouteMonitorEntry_BgpRouteMonitorOper = 2
)

// Enum value maps for BgpRouteMonitorEntry_BgpRouteMonitorOper.
var (
	BgpRouteMonitorEntry_BgpRouteMonitorOper_name = map[int32]string{
		0: "ROUTE_UPDATE",
		1: "ROUTE_REMOVE",
		2: "END_OF_RIBS",
	}
	BgpRouteMonitorEntry_BgpRouteMonitorOper_value = map[string]int32{
		"ROUTE_UPDATE": 0,
		"ROUTE_REMOVE": 1,
		"END_OF_RIBS":  2,
	}
)

func (x BgpRouteMonitorEntry_BgpRouteMonitorOper) Enum() *BgpRouteMonitorEntry_BgpRouteMonitorOper {
	p := new(BgpRouteMonitorEntry_BgpRouteMonitorOper)
	*p = x
	return p
}

func (x BgpRouteMonitorEntry_BgpRouteMonitorOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMonitorEntry_BgpRouteMonitorOper) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[3].Descriptor()
}

func (BgpRouteMonitorEntry_BgpRouteMonitorOper) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[3]
}

func (x BgpRouteMonitorEntry_BgpRouteMonitorOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMonitorEntry_BgpRouteMonitorOper.Descriptor instead.
func (BgpRouteMonitorEntry_BgpRouteMonitorOper) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{12, 0}
}

// Possible return codes for route service initialize operations.
type BgpRouteInitializeReply_BgpRouteInitializeStatus int32

const (
	//* Request successfully completed. Note that no preexisting
	//  state for old clients with the same name was rebound.
	BgpRouteInitializeReply_SUCCESS BgpRouteInitializeReply_BgpRouteInitializeStatus = 0
	//* Request successfully completed AND preexisting routing state
	//  for an old client connection of the same name has been recovered
	//  and bound to this client connection.
	BgpRouteInitializeReply_SUCCESS_STATE_REBOUND BgpRouteInitializeReply_BgpRouteInitializeStatus = 1
	//* Request failed due to an internal server error.
	BgpRouteInitializeReply_INTERNAL_ERROR BgpRouteInitializeReply_BgpRouteInitializeStatus = 2
	//* Failed due to previous initialization operation.
	BgpRouteInitializeReply_ALREADY_INITIALIZED BgpRouteInitializeReply_BgpRouteInitializeStatus = 3
	//* Failed to find or create a gateway
	BgpRouteInitializeReply_GATEWAY_INVALID BgpRouteInitializeReply_BgpRouteInitializeStatus = 4
	//* Previous clean up work is pending try again later
	BgpRouteInitializeReply_CLEANUP_PENDING BgpRouteInitializeReply_BgpRouteInitializeStatus = 5
	//* The BGP protocol is not configured and initialized
	BgpRouteInitializeReply_BGP_NOT_READY BgpRouteInitializeReply_BgpRouteInitializeStatus = 6
)

// Enum value maps for BgpRouteInitializeReply_BgpRouteInitializeStatus.
var (
	BgpRouteInitializeReply_BgpRouteInitializeStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "SUCCESS_STATE_REBOUND",
		2: "INTERNAL_ERROR",
		3: "ALREADY_INITIALIZED",
		4: "GATEWAY_INVALID",
		5: "CLEANUP_PENDING",
		6: "BGP_NOT_READY",
	}
	BgpRouteInitializeReply_BgpRouteInitializeStatus_value = map[string]int32{
		"SUCCESS":               0,
		"SUCCESS_STATE_REBOUND": 1,
		"INTERNAL_ERROR":        2,
		"ALREADY_INITIALIZED":   3,
		"GATEWAY_INVALID":       4,
		"CLEANUP_PENDING":       5,
		"BGP_NOT_READY":         6,
	}
)

func (x BgpRouteInitializeReply_BgpRouteInitializeStatus) Enum() *BgpRouteInitializeReply_BgpRouteInitializeStatus {
	p := new(BgpRouteInitializeReply_BgpRouteInitializeStatus)
	*p = x
	return p
}

func (x BgpRouteInitializeReply_BgpRouteInitializeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteInitializeReply_BgpRouteInitializeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[4].Descriptor()
}

func (BgpRouteInitializeReply_BgpRouteInitializeStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[4]
}

func (x BgpRouteInitializeReply_BgpRouteInitializeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteInitializeReply_BgpRouteInitializeStatus.Descriptor instead.
func (BgpRouteInitializeReply_BgpRouteInitializeStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{14, 0}
}

//* Possible return codes for route service cleanup operations.
type BgpRouteCleanupReply_BgpRouteCleanupStatus int32

const (
	//* Request successfully completed.
	BgpRouteCleanupReply_SUCCESS BgpRouteCleanupReply_BgpRouteCleanupStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteCleanupReply_INTERNAL_ERROR BgpRouteCleanupReply_BgpRouteCleanupStatus = 1
	//* Request failed because there was no initialized state to
	//  cleanup.
	BgpRouteCleanupReply_NOT_INITIALIZED BgpRouteCleanupReply_BgpRouteCleanupStatus = 2
)

// Enum value maps for BgpRouteCleanupReply_BgpRouteCleanupStatus.
var (
	BgpRouteCleanupReply_BgpRouteCleanupStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
	}
	BgpRouteCleanupReply_BgpRouteCleanupStatus_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
	}
)

func (x BgpRouteCleanupReply_BgpRouteCleanupStatus) Enum() *BgpRouteCleanupReply_BgpRouteCleanupStatus {
	p := new(BgpRouteCleanupReply_BgpRouteCleanupStatus)
	*p = x
	return p
}

func (x BgpRouteCleanupReply_BgpRouteCleanupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteCleanupReply_BgpRouteCleanupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[5].Descriptor()
}

func (BgpRouteCleanupReply_BgpRouteCleanupStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[5]
}

func (x BgpRouteCleanupReply_BgpRouteCleanupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteCleanupReply_BgpRouteCleanupStatus.Descriptor instead.
func (BgpRouteCleanupReply_BgpRouteCleanupStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{16, 0}
}

//* Possible return codes for route add/modify/update/remove operations.
type BgpRouteOperReply_BgpRouteOperStatus int32

const (
	//* Request successfully completed in full.
	BgpRouteOperReply_SUCCESS BgpRouteOperReply_BgpRouteOperStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteOperReply_INTERNAL_ERROR BgpRouteOperReply_BgpRouteOperStatus = 1
	//* The bgp route service has not been initialized
	BgpRouteOperReply_NOT_INITIALIZED BgpRouteOperReply_BgpRouteOperStatus = 2
	//* Request did not result in any operations
	BgpRouteOperReply_NO_OP BgpRouteOperReply_BgpRouteOperStatus = 3
	//* Request contained too many operations
	BgpRouteOperReply_TOO_MANY_OPS BgpRouteOperReply_BgpRouteOperStatus = 4
	//* Request contained an invalid table.
	BgpRouteOperReply_TABLE_INVALID BgpRouteOperReply_BgpRouteOperStatus = 5
	//* Request contained a table that was not ready for operations.
	BgpRouteOperReply_TABLE_NOT_READY BgpRouteOperReply_BgpRouteOperStatus = 6
	//* Request contained an invalid destination address prefix
	BgpRouteOperReply_PREFIX_INVALID BgpRouteOperReply_BgpRouteOperStatus = 7
	//* Request contained a destination prefix length too short for the
	//  supplied address/NLRI.
	BgpRouteOperReply_PREFIX_LEN_TOO_SHORT BgpRouteOperReply_BgpRouteOperStatus = 8
	//* Request contained a destination prefix length too long for the
	//  supplied address/NLRI.
	BgpRouteOperReply_PREFIX_LEN_TOO_LONG BgpRouteOperReply_BgpRouteOperStatus = 9
	//* The server did not have a valid gateway associated with the
	//  client.
	BgpRouteOperReply_GATEWAY_INVALID BgpRouteOperReply_BgpRouteOperStatus = 10
	//* Request contained an invalid nexthop.
	BgpRouteOperReply_NEXTHOP_INVALID BgpRouteOperReply_BgpRouteOperStatus = 11
	//* Request contained a nexthop with an invalild address.
	BgpRouteOperReply_NEXTHOP_ADDRESS_INVALID BgpRouteOperReply_BgpRouteOperStatus = 12
	//* Request to add paths exceeding maximum ECMP paths for a
	//  destination.
	BgpRouteOperReply_NEXTHOP_ECMP_LIMIT BgpRouteOperReply_BgpRouteOperStatus = 13
	//* Request contained an invalid community.
	BgpRouteOperReply_COMMUNITY_LIST_INVALID BgpRouteOperReply_BgpRouteOperStatus = 14
	//* Request contained an invalid AS path.
	BgpRouteOperReply_ASPATH_INVALID BgpRouteOperReply_BgpRouteOperStatus = 15
	//* Request contained a invalid label information.
	BgpRouteOperReply_LABEL_INFO_INVALID BgpRouteOperReply_BgpRouteOperStatus = 16
	//* Request contains a route that is already present in the table.
	BgpRouteOperReply_ROUTE_EXISTS BgpRouteOperReply_BgpRouteOperStatus = 17
	//* Request contains a route that is NOT present in the table.
	BgpRouteOperReply_ROUTE_NOT_FOUND BgpRouteOperReply_BgpRouteOperStatus = 18
	//* Request contains an invalid cluster list.
	BgpRouteOperReply_CLUSTER_LIST_INVALID BgpRouteOperReply_BgpRouteOperStatus = 19
	//* Request contains an invalid protocol. Only PROTO_UNSPECIFID
	//  or PROTO_BGP_STATIC are allowed in route change operations.
	BgpRouteOperReply_PROTOCOL_INVALID BgpRouteOperReply_BgpRouteOperStatus = 20
	//* Request contains a route that is NOT present in the table.
	BgpRouteOperReply_ROUTE_ADD_FAILED BgpRouteOperReply_BgpRouteOperStatus = 21
	//* The BGP protocol is not initialized and ready to accept
	//  route change operations.
	BgpRouteOperReply_BGP_NOT_READY BgpRouteOperReply_BgpRouteOperStatus = 22
	//* Request cannot be serviced until current requests are processed.
	BgpRouteOperReply_TRY_AGAIN BgpRouteOperReply_BgpRouteOperStatus = 23
	//* Request contains a parameter that is not currently supported.
	BgpRouteOperReply_REQUEST_UNSUPPORTED BgpRouteOperReply_BgpRouteOperStatus = 24
	//* Request contained an invalid BGP peer type.
	BgpRouteOperReply_PEER_TYPE_INVALID BgpRouteOperReply_BgpRouteOperStatus = 25
	//* SR-TE Segment Lists is invalid, like zero segment list
	BgpRouteOperReply_SEGMENT_LIST_INVALID BgpRouteOperReply_BgpRouteOperStatus = 26
	//* SR-TE Segment is invalid, like zero segment list
	BgpRouteOperReply_SEGMENT_INVALID BgpRouteOperReply_BgpRouteOperStatus = 27
	//* SR-TE Segment label is invalid; reserved label or label ttl > 255
	BgpRouteOperReply_SEGMENT_LABEL_INVALID BgpRouteOperReply_BgpRouteOperStatus = 28
	//* SR-TE Segment ID is invalid like segment type is not set
	BgpRouteOperReply_SEGMENT_ID_INVALID BgpRouteOperReply_BgpRouteOperStatus = 29
	//* Number of SR-TE Segment Lists exceeded limit (8)
	BgpRouteOperReply_SEGMENT_LIST_COUNT_INVALID BgpRouteOperReply_BgpRouteOperStatus = 30
	//* Number of SR-TE Segments exceeded limit (5)
	BgpRouteOperReply_SEGMENT_COUNT_INVALID BgpRouteOperReply_BgpRouteOperStatus = 31
	//* SRTE Route Data is not set.
	BgpRouteOperReply_SRTE_ROUTE_DATA_INVALID BgpRouteOperReply_BgpRouteOperStatus = 32
	//* Flow spec address field is invalid.
	BgpRouteOperReply_FLOWSPEC_ADDR_INVALID BgpRouteOperReply_BgpRouteOperStatus = 33
	//* Flow spec match fields invalid or no match field is specified
	BgpRouteOperReply_FLOWSPEC_MTCH_FLDS_INVALID BgpRouteOperReply_BgpRouteOperStatus = 34
	//* Flow spec prefix contains invalid action or no action specified
	BgpRouteOperReply_FLOWSPEC_ACTION_INVALID BgpRouteOperReply_BgpRouteOperStatus = 35
	//* Flow spec prefix matches an existing flow-spec route added by CLI.
	BgpRouteOperReply_FLOWSPEC_STATIC_RT_EXISTS BgpRouteOperReply_BgpRouteOperStatus = 36
	//* SRTE Priority value is invalid. Valid values are [1,255]
	BgpRouteOperReply_SRTE_PRIORITY_INVALID BgpRouteOperReply_BgpRouteOperStatus = 37
	//* Request contained an invalid tunnel list
	BgpRouteOperReply_TUNNEL_ATTR_LIST_INVALID BgpRouteOperReply_BgpRouteOperStatus = 38
	//* Tunnel attribute's egress endpoint is not a valid unicast or ipv4 address
	BgpRouteOperReply_TUNNEL_ATTR_EGRESS_ENDPOINT_NOT_IPV4 BgpRouteOperReply_BgpRouteOperStatus = 39
	//* Tunnel attribute's color does not match color of community
	BgpRouteOperReply_TUNNEL_ATTR_COLOR_COM_COLOR_MISMATCH BgpRouteOperReply_BgpRouteOperStatus = 40
	//* Tunnel attribute's Endpoint must match NH if encap community is set to IPIP
	BgpRouteOperReply_TUNNEL_ATTR_ENDPOINT_NH_MISMATCH BgpRouteOperReply_BgpRouteOperStatus = 41
	//* SRTE ENLP value is invalid. Valid values are 1-4.
	BgpRouteOperReply_SRTE_ENLP_INVALID BgpRouteOperReply_BgpRouteOperStatus = 42
	//*
	// Request has mutually exclusive route-flags set
	// use_nexthop_reject and use_nexthop_fictitious flags are mutually exclusive.
	BgpRouteOperReply_MUTUALLY_EXCLUSIVE_RT_FLAGS_ARE_SET BgpRouteOperReply_BgpRouteOperStatus = 43
)

// Enum value maps for BgpRouteOperReply_BgpRouteOperStatus.
var (
	BgpRouteOperReply_BgpRouteOperStatus_name = map[int32]string{
		0:  "SUCCESS",
		1:  "INTERNAL_ERROR",
		2:  "NOT_INITIALIZED",
		3:  "NO_OP",
		4:  "TOO_MANY_OPS",
		5:  "TABLE_INVALID",
		6:  "TABLE_NOT_READY",
		7:  "PREFIX_INVALID",
		8:  "PREFIX_LEN_TOO_SHORT",
		9:  "PREFIX_LEN_TOO_LONG",
		10: "GATEWAY_INVALID",
		11: "NEXTHOP_INVALID",
		12: "NEXTHOP_ADDRESS_INVALID",
		13: "NEXTHOP_ECMP_LIMIT",
		14: "COMMUNITY_LIST_INVALID",
		15: "ASPATH_INVALID",
		16: "LABEL_INFO_INVALID",
		17: "ROUTE_EXISTS",
		18: "ROUTE_NOT_FOUND",
		19: "CLUSTER_LIST_INVALID",
		20: "PROTOCOL_INVALID",
		21: "ROUTE_ADD_FAILED",
		22: "BGP_NOT_READY",
		23: "TRY_AGAIN",
		24: "REQUEST_UNSUPPORTED",
		25: "PEER_TYPE_INVALID",
		26: "SEGMENT_LIST_INVALID",
		27: "SEGMENT_INVALID",
		28: "SEGMENT_LABEL_INVALID",
		29: "SEGMENT_ID_INVALID",
		30: "SEGMENT_LIST_COUNT_INVALID",
		31: "SEGMENT_COUNT_INVALID",
		32: "SRTE_ROUTE_DATA_INVALID",
		33: "FLOWSPEC_ADDR_INVALID",
		34: "FLOWSPEC_MTCH_FLDS_INVALID",
		35: "FLOWSPEC_ACTION_INVALID",
		36: "FLOWSPEC_STATIC_RT_EXISTS",
		37: "SRTE_PRIORITY_INVALID",
		38: "TUNNEL_ATTR_LIST_INVALID",
		39: "TUNNEL_ATTR_EGRESS_ENDPOINT_NOT_IPV4",
		40: "TUNNEL_ATTR_COLOR_COM_COLOR_MISMATCH",
		41: "TUNNEL_ATTR_ENDPOINT_NH_MISMATCH",
		42: "SRTE_ENLP_INVALID",
		43: "MUTUALLY_EXCLUSIVE_RT_FLAGS_ARE_SET",
	}
	BgpRouteOperReply_BgpRouteOperStatus_value = map[string]int32{
		"SUCCESS":                              0,
		"INTERNAL_ERROR":                       1,
		"NOT_INITIALIZED":                      2,
		"NO_OP":                                3,
		"TOO_MANY_OPS":                         4,
		"TABLE_INVALID":                        5,
		"TABLE_NOT_READY":                      6,
		"PREFIX_INVALID":                       7,
		"PREFIX_LEN_TOO_SHORT":                 8,
		"PREFIX_LEN_TOO_LONG":                  9,
		"GATEWAY_INVALID":                      10,
		"NEXTHOP_INVALID":                      11,
		"NEXTHOP_ADDRESS_INVALID":              12,
		"NEXTHOP_ECMP_LIMIT":                   13,
		"COMMUNITY_LIST_INVALID":               14,
		"ASPATH_INVALID":                       15,
		"LABEL_INFO_INVALID":                   16,
		"ROUTE_EXISTS":                         17,
		"ROUTE_NOT_FOUND":                      18,
		"CLUSTER_LIST_INVALID":                 19,
		"PROTOCOL_INVALID":                     20,
		"ROUTE_ADD_FAILED":                     21,
		"BGP_NOT_READY":                        22,
		"TRY_AGAIN":                            23,
		"REQUEST_UNSUPPORTED":                  24,
		"PEER_TYPE_INVALID":                    25,
		"SEGMENT_LIST_INVALID":                 26,
		"SEGMENT_INVALID":                      27,
		"SEGMENT_LABEL_INVALID":                28,
		"SEGMENT_ID_INVALID":                   29,
		"SEGMENT_LIST_COUNT_INVALID":           30,
		"SEGMENT_COUNT_INVALID":                31,
		"SRTE_ROUTE_DATA_INVALID":              32,
		"FLOWSPEC_ADDR_INVALID":                33,
		"FLOWSPEC_MTCH_FLDS_INVALID":           34,
		"FLOWSPEC_ACTION_INVALID":              35,
		"FLOWSPEC_STATIC_RT_EXISTS":            36,
		"SRTE_PRIORITY_INVALID":                37,
		"TUNNEL_ATTR_LIST_INVALID":             38,
		"TUNNEL_ATTR_EGRESS_ENDPOINT_NOT_IPV4": 39,
		"TUNNEL_ATTR_COLOR_COM_COLOR_MISMATCH": 40,
		"TUNNEL_ATTR_ENDPOINT_NH_MISMATCH":     41,
		"SRTE_ENLP_INVALID":                    42,
		"MUTUALLY_EXCLUSIVE_RT_FLAGS_ARE_SET":  43,
	}
)

func (x BgpRouteOperReply_BgpRouteOperStatus) Enum() *BgpRouteOperReply_BgpRouteOperStatus {
	p := new(BgpRouteOperReply_BgpRouteOperStatus)
	*p = x
	return p
}

func (x BgpRouteOperReply_BgpRouteOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteOperReply_BgpRouteOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[6].Descriptor()
}

func (BgpRouteOperReply_BgpRouteOperStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[6]
}

func (x BgpRouteOperReply_BgpRouteOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteOperReply_BgpRouteOperStatus.Descriptor instead.
func (BgpRouteOperReply_BgpRouteOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{20, 0}
}

//* Possible return codes for route get operations.
type BgpRouteGetReply_BgpRouteGetStatus int32

const (
	//* Request successfully completed in full.
	BgpRouteGetReply_SUCCESS BgpRouteGetReply_BgpRouteGetStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteGetReply_INTERNAL_ERROR BgpRouteGetReply_BgpRouteGetStatus = 1
	//* Request failed because there was no initialized state to
	//  cleanup.
	BgpRouteGetReply_NOT_INITIALIZED BgpRouteGetReply_BgpRouteGetStatus = 2
	//* Request contained an invalid table.
	BgpRouteGetReply_TABLE_INVALID BgpRouteGetReply_BgpRouteGetStatus = 3
	//* Request contained a table that was not ready for operations.
	BgpRouteGetReply_TABLE_NOT_READY BgpRouteGetReply_BgpRouteGetStatus = 4
	//* Request contained an invalid destination address prefix
	BgpRouteGetReply_PREFIX_INVALID BgpRouteGetReply_BgpRouteGetStatus = 5
	//* Request contained a destination prefix length too short for the
	//  supplied address/NLRI.
	BgpRouteGetReply_PREFIX_LEN_TOO_SHORT BgpRouteGetReply_BgpRouteGetStatus = 6
	//* Request contained a destination prefix length too long for the
	//  supplied address/NLRI.
	BgpRouteGetReply_PREFIX_LEN_TOO_LONG BgpRouteGetReply_BgpRouteGetStatus = 7
	//* Request contained a route that does not match
	//  destinations in the routing table.
	BgpRouteGetReply_ROUTE_NOT_FOUND BgpRouteGetReply_BgpRouteGetStatus = 8
	//* Request specified an invalid protocol to match
	BgpRouteGetReply_PROTOCOL_INVALID BgpRouteGetReply_BgpRouteGetStatus = 9
	//* Request does not contain valid route match parameters
	BgpRouteGetReply_ROUTE_INVALID BgpRouteGetReply_BgpRouteGetStatus = 10
	//* Request contains a parameter that is not currently supported.
	BgpRouteGetReply_REQUEST_UNSUPPORTED BgpRouteGetReply_BgpRouteGetStatus = 11
	//* Request cannot be serviced until current requests are processed.
	BgpRouteGetReply_TRY_AGAIN BgpRouteGetReply_BgpRouteGetStatus = 12
	//* Request contains a route_count that exceeds the max of 1000
	BgpRouteGetReply_ROUTE_COUNT_INVALID BgpRouteGetReply_BgpRouteGetStatus = 13
	//* Request contained an invalid community.
	BgpRouteGetReply_COMMUNITY_LIST_INVALID BgpRouteGetReply_BgpRouteGetStatus = 14
	//* Flow spec address field is invalid.
	BgpRouteGetReply_FLOWSPEC_ADDR_INVALID BgpRouteGetReply_BgpRouteGetStatus = 15
	//* Flow spec match fields invalid or no match field is specified
	BgpRouteGetReply_FLOWSPEC_MTCH_FLDS_INVALID BgpRouteGetReply_BgpRouteGetStatus = 16
	//* Flow spec prefix contains invalid action or no action specified
	BgpRouteGetReply_FLOWSPEC_ACTION_INVALID BgpRouteGetReply_BgpRouteGetStatus = 17
)

// Enum value maps for BgpRouteGetReply_BgpRouteGetStatus.
var (
	BgpRouteGetReply_BgpRouteGetStatus_name = map[int32]string{
		0:  "SUCCESS",
		1:  "INTERNAL_ERROR",
		2:  "NOT_INITIALIZED",
		3:  "TABLE_INVALID",
		4:  "TABLE_NOT_READY",
		5:  "PREFIX_INVALID",
		6:  "PREFIX_LEN_TOO_SHORT",
		7:  "PREFIX_LEN_TOO_LONG",
		8:  "ROUTE_NOT_FOUND",
		9:  "PROTOCOL_INVALID",
		10: "ROUTE_INVALID",
		11: "REQUEST_UNSUPPORTED",
		12: "TRY_AGAIN",
		13: "ROUTE_COUNT_INVALID",
		14: "COMMUNITY_LIST_INVALID",
		15: "FLOWSPEC_ADDR_INVALID",
		16: "FLOWSPEC_MTCH_FLDS_INVALID",
		17: "FLOWSPEC_ACTION_INVALID",
	}
	BgpRouteGetReply_BgpRouteGetStatus_value = map[string]int32{
		"SUCCESS":                    0,
		"INTERNAL_ERROR":             1,
		"NOT_INITIALIZED":            2,
		"TABLE_INVALID":              3,
		"TABLE_NOT_READY":            4,
		"PREFIX_INVALID":             5,
		"PREFIX_LEN_TOO_SHORT":       6,
		"PREFIX_LEN_TOO_LONG":        7,
		"ROUTE_NOT_FOUND":            8,
		"PROTOCOL_INVALID":           9,
		"ROUTE_INVALID":              10,
		"REQUEST_UNSUPPORTED":        11,
		"TRY_AGAIN":                  12,
		"ROUTE_COUNT_INVALID":        13,
		"COMMUNITY_LIST_INVALID":     14,
		"FLOWSPEC_ADDR_INVALID":      15,
		"FLOWSPEC_MTCH_FLDS_INVALID": 16,
		"FLOWSPEC_ACTION_INVALID":    17,
	}
)

func (x BgpRouteGetReply_BgpRouteGetStatus) Enum() *BgpRouteGetReply_BgpRouteGetStatus {
	p := new(BgpRouteGetReply_BgpRouteGetStatus)
	*p = x
	return p
}

func (x BgpRouteGetReply_BgpRouteGetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteGetReply_BgpRouteGetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[7].Descriptor()
}

func (BgpRouteGetReply_BgpRouteGetStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[7]
}

func (x BgpRouteGetReply_BgpRouteGetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteGetReply_BgpRouteGetStatus.Descriptor instead.
func (BgpRouteGetReply_BgpRouteGetStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{21, 0}
}

//* Possible return codes for route get operations.
type BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus int32

const (
	//* Request successfully completed in full.
	BgpRouteMonitorRegisterReply_SUCCESS BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteMonitorRegisterReply_INTERNAL_ERROR BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 1
	//* The bgp route service has not been initialized
	BgpRouteMonitorRegisterReply_NOT_INITIALIZED BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 2
	//* Too many clients or BMP stations are already registered.
	BgpRouteMonitorRegisterReply_REGISTRATIONS_EXCEEDED BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 3
	//* Client is already registered.
	BgpRouteMonitorRegisterReply_ALREADY_REGISTERED BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 4
	//* Request contains a route_count that exceeds the max of 1000
	BgpRouteMonitorRegisterReply_ROUTE_COUNT_INVALID BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 5
	//* Request contains invalid address format.
	BgpRouteMonitorRegisterReply_ADDRESS_FORMAT_INVALID BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 6
	//* Request contains invalid table format.
	BgpRouteMonitorRegisterReply_TABLE_FORMAT_INVALID BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus = 7
)

// Enum value maps for BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus.
var (
	BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "REGISTRATIONS_EXCEEDED",
		4: "ALREADY_REGISTERED",
		5: "ROUTE_COUNT_INVALID",
		6: "ADDRESS_FORMAT_INVALID",
		7: "TABLE_FORMAT_INVALID",
	}
	BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus_value = map[string]int32{
		"SUCCESS":                0,
		"INTERNAL_ERROR":         1,
		"NOT_INITIALIZED":        2,
		"REGISTRATIONS_EXCEEDED": 3,
		"ALREADY_REGISTERED":     4,
		"ROUTE_COUNT_INVALID":    5,
		"ADDRESS_FORMAT_INVALID": 6,
		"TABLE_FORMAT_INVALID":   7,
	}
)

func (x BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) Enum() *BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus {
	p := new(BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus)
	*p = x
	return p
}

func (x BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[8].Descriptor()
}

func (BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[8]
}

func (x BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus.Descriptor instead.
func (BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{23, 0}
}

//* Possible return codes for route unregister operation.
type BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus int32

const (
	//* Request successfully completed in full.
	BgpRouteMonitorUnregisterReply_SUCCESS BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteMonitorUnregisterReply_INTERNAL_ERROR BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus = 1
	//* The bgp route service has not been initialized
	BgpRouteMonitorUnregisterReply_NOT_INITIALIZED BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus = 2
	//* Client is already registered.
	BgpRouteMonitorUnregisterReply_NOT_REGISTERED BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus = 3
)

// Enum value maps for BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus.
var (
	BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "NOT_REGISTERED",
	}
	BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
		"NOT_REGISTERED":  3,
	}
)

func (x BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) Enum() *BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus {
	p := new(BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus)
	*p = x
	return p
}

func (x BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[9].Descriptor()
}

func (BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[9]
}

func (x BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus.Descriptor instead.
func (BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{25, 0}
}

//* Possible return codes for route unregister operation.
type BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus int32

const (
	//* Request successfully completed in full.
	BgpRouteMonitorRefreshReply_SUCCESS BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus = 0
	//* Request failed due to an internal server error.
	BgpRouteMonitorRefreshReply_INTERNAL_ERROR BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus = 1
	//* The bgp route service has not been initialized
	BgpRouteMonitorRefreshReply_NOT_INITIALIZED BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus = 2
	//* Client is already registered.
	BgpRouteMonitorRefreshReply_NOT_REGISTERED BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus = 3
)

// Enum value maps for BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus.
var (
	BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "INTERNAL_ERROR",
		2: "NOT_INITIALIZED",
		3: "NOT_REGISTERED",
	}
	BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus_value = map[string]int32{
		"SUCCESS":         0,
		"INTERNAL_ERROR":  1,
		"NOT_INITIALIZED": 2,
		"NOT_REGISTERED":  3,
	}
)

func (x BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) Enum() *BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus {
	p := new(BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus)
	*p = x
	return p
}

func (x BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bgp_route_service_proto_enumTypes[10].Descriptor()
}

func (BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) Type() protoreflect.EnumType {
	return &file_bgp_route_service_proto_enumTypes[10]
}

func (x BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus.Descriptor instead.
func (BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus) EnumDescriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{27, 0}
}

//*
// Route Operation Flag values that alter route add behavior.
//
// This data type replaces and deprecates RouteOperation.
// New applications should use BgpRouteOperationFlags exclusively and instead
// of RouteOperation.
//
// Backwards compatibility: In BgpRouteUpdateRequest messages, if both
// bgp_routes[].route_oper_flags and bgp_routes[].route_flags are initialized,
// then only the new route_flags will be processed and the old route_oper_flags
// will be ignored. If only  route_oper_flags or route_flags are initialized,
// then that initialized  flags message will be processed.
// In BgpRouteGetReply and BgpRouteMontiorEntry messages, both the
// route_oper_flags and route_flags will be set within the bgp_routes[] and
// bgp_route fields (respectively), indicating the same flags.
type BgpRouteOperationFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//  Route operation indicating whether to attach the well-known
	//  no-advertise community.
	//  No-advertise has the effect of instructing the route not to
	//  advertise the route further. The community may alternately be
	//  included in the community_list.
	NoAdvertise bool `protobuf:"varint,1,opt,name=no_advertise,json=noAdvertise,proto3" json:"no_advertise,omitempty"`
	//*
	//  Route operation indicating whether to attach the well-known no-export
	//  community. No-export has the effect of instructing the router
	//  not to advertise the route beyond the BGP confederation boundary.
	//  The community may alternately be included in the community_list.
	NoExport bool `protobuf:"varint,2,opt,name=no_export,json=noExport,proto3" json:"no_export,omitempty"`
	//*
	//  Route Operation indicating whether to use NH_REJECT for the route
	//  This makes sense to be set only when programming route in RR.
	//  This can be used to save memory when there are a high number of
	//  unique nexthops.
	//  use_nexthop_reject and use_nexthop_fictitious flags are mutually exclusive.
	UseNexthopReject bool `protobuf:"varint,3,opt,name=use_nexthop_reject,json=useNexthopReject,proto3" json:"use_nexthop_reject,omitempty"`
	//*
	//  Route operation flag indicating that the next hop is fictitious.
	//  use_nexthop_reject and use_nexthop_fictitious flags are mutually exclusive.
	UseNexthopFictitious bool `protobuf:"varint,4,opt,name=use_nexthop_fictitious,json=useNexthopFictitious,proto3" json:"use_nexthop_fictitious,omitempty"`
}

func (x *BgpRouteOperationFlags) Reset() {
	*x = BgpRouteOperationFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteOperationFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteOperationFlags) ProtoMessage() {}

func (x *BgpRouteOperationFlags) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteOperationFlags.ProtoReflect.Descriptor instead.
func (*BgpRouteOperationFlags) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{0}
}

func (x *BgpRouteOperationFlags) GetNoAdvertise() bool {
	if x != nil {
		return x.NoAdvertise
	}
	return false
}

func (x *BgpRouteOperationFlags) GetNoExport() bool {
	if x != nil {
		return x.NoExport
	}
	return false
}

func (x *BgpRouteOperationFlags) GetUseNexthopReject() bool {
	if x != nil {
		return x.UseNexthopReject
	}
	return false
}

func (x *BgpRouteOperationFlags) GetUseNexthopFictitious() bool {
	if x != nil {
		return x.UseNexthopFictitious
	}
	return false
}

//*
// A generic 32-bit unsigned value that implicitly carries an indication
// of whether any value has been set or not.
type BgpAttrib32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 32-bit unsigned value
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BgpAttrib32) Reset() {
	*x = BgpAttrib32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAttrib32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAttrib32) ProtoMessage() {}

func (x *BgpAttrib32) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAttrib32.ProtoReflect.Descriptor instead.
func (*BgpAttrib32) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{1}
}

func (x *BgpAttrib32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//*
// A generic 64-bit unsigned value that implicitly carries an indication
// of whether any value has been set or not.
type BgpAttrib64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 64-bit unsigned value
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BgpAttrib64) Reset() {
	*x = BgpAttrib64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAttrib64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAttrib64) ProtoMessage() {}

func (x *BgpAttrib64) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAttrib64.ProtoReflect.Descriptor instead.
func (*BgpAttrib64) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{2}
}

func (x *BgpAttrib64) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//*
// A single communty is a string identifying a regular, extended,
// or well-known community name or values with no whitepace.
//
// The communities will be recognized:
//
// Well-known communities:
//    no-export
//    no-advertise
//    no-export-confed
//    llgr-stale
//    no-llgr
//
// RFC 1997 comunities:
//    domain-id:ipaddress:0
//    domain-id-vendor:
//    <n>:<n>
//
// Route targets extended communities:
//    target:ipv4-address:16 bit#
//    target:16bit#:32bit#
//    target:as2b:16bit#:32bit#
//    target:as4b:32bit#:16bit#
//
// Origin extended communities:
//    origin:ipv4-address:16 bit#
//    origin:16bit#:32bit#
//
// Bandwidth management extended communities:
//    bandwidth:16bit#:bw
//    {traffic-rate}:16 bit#:bw
//
// Redirect extended communities:
//    redirect:ipv4-address:16 bit#
//    redirect:16bit#:32bit#
//
// Tunnel encapsulation extended communities:
//    encapsulation:0L:tunnel-type
//
type Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* A string that uniquely identifies a single regular, extended, or
	//  well-known community. A community string must not exceeed
	//  1023 characters. REQUIRED
	CommunityString string `protobuf:"bytes,1,opt,name=community_string,json=communityString,proto3" json:"community_string,omitempty"`
}

func (x *Community) Reset() {
	*x = Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Community) ProtoMessage() {}

func (x *Community) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Community.ProtoReflect.Descriptor instead.
func (*Community) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{3}
}

func (x *Community) GetCommunityString() string {
	if x != nil {
		return x.CommunityString
	}
	return ""
}

//*
// A list of communities.
type CommunityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* An unordered list of zero, one, or more individual communities.
	//  A Community list may not exceed 256 communities
	ComList []*Community `protobuf:"bytes,1,rep,name=com_list,json=comList,proto3" json:"com_list,omitempty"`
}

func (x *CommunityList) Reset() {
	*x = CommunityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityList) ProtoMessage() {}

func (x *CommunityList) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityList.ProtoReflect.Descriptor instead.
func (*CommunityList) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{4}
}

func (x *CommunityList) GetComList() []*Community {
	if x != nil {
		return x.ComList
	}
	return nil
}

//*
// AS path through which the route was learned.
//
// An AS Path is a string composed of an series of AS numbers
// separated by whitespace special delimiters.
// The following special delimiting characters are used for signifying
// confederations, confederation-sets, and AS-sets:
//
//     [ ] - Brackets enclose the local AS number associated with the AS set
//     if more than one AS number is configured on the routing device,
//     or if AS path prepending is configured.
//
//     ( ) - Parentheses enclose a confederation.
//
//     ( [ ] ) - Parentheses and brackets enclose a confederation set.
//
// Programmed AS Paths implicitly have path origin IGP.
type AsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* A string listing AS numbers separated by whitespace and special
	//  delimiter charaters (see message as-path). An AS Path must not
	//  exceed 1023 characters. REQUIRED
	AspathString string `protobuf:"bytes,1,opt,name=aspath_string,json=aspathString,proto3" json:"aspath_string,omitempty"`
}

func (x *AsPath) Reset() {
	*x = AsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsPath) ProtoMessage() {}

func (x *AsPath) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsPath.ProtoReflect.Descriptor instead.
func (*AsPath) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{5}
}

func (x *AsPath) GetAspathString() string {
	if x != nil {
		return x.AspathString
	}
	return ""
}

//*
// Route matching parameters provide the key for identifying
// BGP routes. Programmed BGP-Static routes must be unique
// for the bgp_route_match paramaters. Dynamic BGP routes may
// may have multiple matches to a given set of bgp_route_match
// parameters.
type BgpRouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Destination prefix of the route. REQUIRED
	DestPrefix *prpd.RoutePrefix `protobuf:"bytes,1,opt,name=dest_prefix,json=destPrefix,proto3" json:"dest_prefix,omitempty"`
	//* Destination prefix length in bits. REQUIRED
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	//* Route table specified by either name or ID. REQUIRED
	Table *prpd.RouteTable `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	//* Protocol that installed the route in the table.
	Protocol RouteProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=routing.RouteProtocol" json:"protocol,omitempty"`
	//* Path cookie value differentiates routes with the same destination.
	//  The cookie may be any unsigned 64-bit value. Optional (default is 0,
	//  which indicates that cookie is not evaluated for matching)
	PathCookie uint64 `protobuf:"varint,5,opt,name=path_cookie,json=pathCookie,proto3" json:"path_cookie,omitempty"`
	//* Commumity string list associated with route. The list could be
	//  a single/multiple community string or a regular expression.
	//  This is an optional parameter. If this list is null then all
	//  route with or without community would be returned.
	Communities *CommunityList `protobuf:"bytes,6,opt,name=communities,proto3" json:"communities,omitempty"`
}

func (x *BgpRouteMatch) Reset() {
	*x = BgpRouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMatch) ProtoMessage() {}

func (x *BgpRouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMatch.ProtoReflect.Descriptor instead.
func (*BgpRouteMatch) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{6}
}

func (x *BgpRouteMatch) GetDestPrefix() *prpd.RoutePrefix {
	if x != nil {
		return x.DestPrefix
	}
	return nil
}

func (x *BgpRouteMatch) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *BgpRouteMatch) GetTable() *prpd.RouteTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *BgpRouteMatch) GetProtocol() RouteProtocol {
	if x != nil {
		return x.Protocol
	}
	return RouteProtocol_PROTO_UNSPECIFIED
}

func (x *BgpRouteMatch) GetPathCookie() uint64 {
	if x != nil {
		return x.PathCookie
	}
	return 0
}

func (x *BgpRouteMatch) GetCommunities() *CommunityList {
	if x != nil {
		return x.Communities
	}
	return nil
}

//*
// Message can contain multiple tunnel attributes.
type TunnelEncapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// One or more tunnel attributes to add, udpate, or modify.
	// MANDATORY
	TunnelList []*TunnelAttribute `protobuf:"bytes,1,rep,name=tunnel_list,json=tunnelList,proto3" json:"tunnel_list,omitempty"`
}

func (x *TunnelEncapAttribute) Reset() {
	*x = TunnelEncapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapAttribute) ProtoMessage() {}

func (x *TunnelEncapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapAttribute.ProtoReflect.Descriptor instead.
func (*TunnelEncapAttribute) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{7}
}

func (x *TunnelEncapAttribute) GetTunnelList() []*TunnelAttribute {
	if x != nil {
		return x.TunnelList
	}
	return nil
}

//*
// Message contains information that is used to form the encapsulation header
// for one of the specified tunnel type.
type TunnelAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Can contain one of multiple tunnel types.
	// MANDATORY
	//
	// Types that are assignable to TunnelType:
	//	*TunnelAttribute_IpipTunnel
	TunnelType isTunnelAttribute_TunnelType `protobuf_oneof:"TunnelType"`
}

func (x *TunnelAttribute) Reset() {
	*x = TunnelAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelAttribute) ProtoMessage() {}

func (x *TunnelAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelAttribute.ProtoReflect.Descriptor instead.
func (*TunnelAttribute) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{8}
}

func (m *TunnelAttribute) GetTunnelType() isTunnelAttribute_TunnelType {
	if m != nil {
		return m.TunnelType
	}
	return nil
}

func (x *TunnelAttribute) GetIpipTunnel() *IpIpTunnelAttributes {
	if x, ok := x.GetTunnelType().(*TunnelAttribute_IpipTunnel); ok {
		return x.IpipTunnel
	}
	return nil
}

type isTunnelAttribute_TunnelType interface {
	isTunnelAttribute_TunnelType()
}

type TunnelAttribute_IpipTunnel struct {
	//* Attributes specific to IP over IP Tunnel.
	IpipTunnel *IpIpTunnelAttributes `protobuf:"bytes,1,opt,name=ipip_tunnel,json=ipipTunnel,proto3,oneof"`
}

func (*TunnelAttribute_IpipTunnel) isTunnelAttribute_TunnelType() {}

//*
// EgressEndpoint message contains egress_endpoint_address
// and in future might contain AS Number
type EgressEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Egress_endpoint_address specifies the address of the egress endpoint of the tunnel,
	// that is, the address of the router that will decapsulate the payload.
	// MANDATORY
	EgressEndpointAddress *common.IpAddress `protobuf:"bytes,1,opt,name=egress_endpoint_address,json=egressEndpointAddress,proto3" json:"egress_endpoint_address,omitempty"`
}

func (x *EgressEndpoint) Reset() {
	*x = EgressEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressEndpoint) ProtoMessage() {}

func (x *EgressEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressEndpoint.ProtoReflect.Descriptor instead.
func (*EgressEndpoint) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{9}
}

func (x *EgressEndpoint) GetEgressEndpointAddress() *common.IpAddress {
	if x != nil {
		return x.EgressEndpointAddress
	}
	return nil
}

//*
// Attributes specific to IP over IP Tunnel
type IpIpTunnelAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Egress endpoint of a particular IPIP tunnel.
	// OPTIONAL, if EgressEndpoint is not specified, IPIP tunnel will use IPv4 nexthop
	// as the egress endpoint address.
	EgressEndpoint *EgressEndpoint `protobuf:"bytes,1,opt,name=egress_endpoint,json=egressEndpoint,proto3" json:"egress_endpoint,omitempty"`
	//*
	// 32-bit color attribute corresponding to the IPIP tunnel.
	// OPTIONAL, if color is not specified,
	// IPIP tunnel will not use the color during route resolution
	Color *BgpAttrib32 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *IpIpTunnelAttributes) Reset() {
	*x = IpIpTunnelAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIpTunnelAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIpTunnelAttributes) ProtoMessage() {}

func (x *IpIpTunnelAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIpTunnelAttributes.ProtoReflect.Descriptor instead.
func (*IpIpTunnelAttributes) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{10}
}

func (x *IpIpTunnelAttributes) GetEgressEndpoint() *EgressEndpoint {
	if x != nil {
		return x.EgressEndpoint
	}
	return nil
}

func (x *IpIpTunnelAttributes) GetColor() *BgpAttrib32 {
	if x != nil {
		return x.Color
	}
	return nil
}

//*
// A route entry specifying a single route destination and BGP path
// along with the route attributes for that path.
type BgpRouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Destination prefix of the route. REQUIRED
	DestPrefix *prpd.RoutePrefix `protobuf:"bytes,1,opt,name=dest_prefix,json=destPrefix,proto3" json:"dest_prefix,omitempty"`
	//* Destination prefix length in bits. REQUIRED
	DestPrefixLen uint32 `protobuf:"varint,2,opt,name=dest_prefix_len,json=destPrefixLen,proto3" json:"dest_prefix_len,omitempty"`
	//* Route table specified by either name or ID. REQUIRED
	Table *prpd.RouteTable `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	//* Protocol that installed the route in the table.
	//  In get requests, the only valid values are PROTO_UNSPECIFIED or
	//  PROTO_BGP_STATIC.
	Protocol RouteProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=routing.RouteProtocol" json:"protocol,omitempty"`
	//* Path cookie value differentiates routes with the same destination.
	//  The cookie may be any unsigned 64-bit value. Optional (default is 0)
	PathCookie uint64 `protobuf:"varint,5,opt,name=path_cookie,json=pathCookie,proto3" json:"path_cookie,omitempty"`
	//* Route Preference, also known as administrative distance, is a
	//  unsigned value in the range from 0 through 4,294,967,295 (2^32 -1).
	//  Lower values of route preference are preferred. Optional (default,
	//  route preference for programmed BGP-Static routes is 5)
	RoutePreference *BgpAttrib32 `protobuf:"bytes,6,opt,name=route_preference,json=routePreference,proto3" json:"route_preference,omitempty"`
	//* Local Preference is an unsigned value in the range from
	//  0 through 4,294,967,295 (2^32 - 1). Higher values of local preference
	//  are prefered. Optional (default is 100)
	LocalPreference *BgpAttrib32 `protobuf:"bytes,7,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	//* Multi-Exit Discriminator (MED) is an unsigned value in the range
	//  from 0 through 4,294,967,295 (2^32 -1). Lower values of MED
	//  are preferred. Optional (by default no MED is advertised)
	Med *BgpAttrib32 `protobuf:"bytes,8,opt,name=med,proto3" json:"med,omitempty"`
	//* AIGP Distance is an 64-bit unsigned value in the range from 0 through
	//  (2^64 - 1). Lower values of AIGP distance are preferred.
	//  Optional (by default, no AIGP distance is advertised)
	AigpDistance *BgpAttrib64 `protobuf:"bytes,9,opt,name=aigp_distance,json=aigpDistance,proto3" json:"aigp_distance,omitempty"`
	//* Label information may be provided either as a single VPN label in
	//  L3VPN tables, or as a full label stack in BGP-Labeled-Unicast tables.
	//  BGP-LU tables for L3VPN should provide a label stack with the VPN label
	//  as the bottom-most label in the stack. Optional (by default, no label
	//  information is advertised)
	// Types that are assignable to LabelInfo:
	//	*BgpRouteEntry_VpnLabel
	//	*BgpRouteEntry_Labels
	LabelInfo isBgpRouteEntry_LabelInfo `protobuf_oneof:"LabelInfo"`
	//* List of route communities. Optional (by default, no communities are
	//  advertised.
	Communities *CommunityList `protobuf:"bytes,12,opt,name=communities,proto3" json:"communities,omitempty"`
	//* AS Path for the route. Optional (by default, no AS path is
	//  advertised
	Aspath *AsPath `protobuf:"bytes,13,opt,name=aspath,proto3" json:"aspath,omitempty"`
	//* BGP originator ID is a unsigned 32-bit BGP Identifier value,
	//  as per RFC 6286, encoded in network byte order. Optional
	// (by default, no originator ID is advertised)
	OriginatorId *BgpAttrib32 `protobuf:"bytes,14,opt,name=originator_id,json=originatorId,proto3" json:"originator_id,omitempty"`
	//* BGP cluster list, list of cluster IDs specifying the
	//  path of route reflectors though which this route has traversed.
	//  Optional (by default, no cluster list is advertised)
	ClusterList []*BgpAttrib32 `protobuf:"bytes,15,rep,name=cluster_list,json=clusterList,proto3" json:"cluster_list,omitempty"`
	//* BGP Cluster ID is a unsigned 32-bit BGP Identifier value,
	//  as per RFC 6286, encoded in network byte order. Cluster ID is
	//  append to the cluster_list for advertisement with reflected routes.
	//  Optional (by default, no cluster ID is advertised)
	ClusterId *BgpAttrib32 `protobuf:"bytes,16,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	//*
	//  Flag indicating the route operations defined in RouteOperation enum
	//  These values can be ORed to indicate a combination of operations.
	//  USE OF THIS FIELD IS DEPRECATED. Instead, use route_flags.
	//
	// Deprecated: Marked as deprecated in bgp_route_service.proto.
	RouteOperFlag uint32 `protobuf:"varint,17,opt,name=route_oper_flag,json=routeOperFlag,proto3" json:"route_oper_flag,omitempty"`
	//* Protocol next-hop(s) for the route. If multiple next-hops are given,
	//  the route will be treated as a BGP multipath for load balancing.
	//  NOTE: Multipath is not currently supported by the API and
	//  an error will be returned when adding/changing a route with more than
	//  one next-hop. REQUIRED
	ProtocolNexthops []*common.IpAddress `protobuf:"bytes,18,rep,name=protocol_nexthops,json=protocolNexthops,proto3" json:"protocol_nexthops,omitempty"`
	//* BGP Peer type for this route. Optional (default INTERNAL)
	RouteType BgpPeerType `protobuf:"varint,19,opt,name=route_type,json=routeType,proto3,enum=routing.BgpPeerType" json:"route_type,omitempty"`
	//*
	// Flags for routes. These flags are generally non-mutually exclusive
	// states.
	// Optional (default is no flags).
	RouteFlags *BgpRouteOperationFlags `protobuf:"bytes,20,opt,name=route_flags,json=routeFlags,proto3" json:"route_flags,omitempty"`
	//*
	// Address family specific route data.
	// Mandatory for address family for which it is defined (e.g. SRTE).
	RouteData *prpd.AddressFamilySpecificData `protobuf:"bytes,21,opt,name=route_data,json=routeData,proto3" json:"route_data,omitempty"`
	//*
	// BGP Path Attribute known as the Tunnel Encapsulation attribute.
	// Contain information that is used to form the encapsulation header
	// for one of the specified tunnel type.
	// Optional (by default, no tunnel_attributes are advertised)
	TunnelAttributes *TunnelEncapAttribute `protobuf:"bytes,22,opt,name=tunnel_attributes,json=tunnelAttributes,proto3" json:"tunnel_attributes,omitempty"`
}

func (x *BgpRouteEntry) Reset() {
	*x = BgpRouteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteEntry) ProtoMessage() {}

func (x *BgpRouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteEntry.ProtoReflect.Descriptor instead.
func (*BgpRouteEntry) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{11}
}

func (x *BgpRouteEntry) GetDestPrefix() *prpd.RoutePrefix {
	if x != nil {
		return x.DestPrefix
	}
	return nil
}

func (x *BgpRouteEntry) GetDestPrefixLen() uint32 {
	if x != nil {
		return x.DestPrefixLen
	}
	return 0
}

func (x *BgpRouteEntry) GetTable() *prpd.RouteTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *BgpRouteEntry) GetProtocol() RouteProtocol {
	if x != nil {
		return x.Protocol
	}
	return RouteProtocol_PROTO_UNSPECIFIED
}

func (x *BgpRouteEntry) GetPathCookie() uint64 {
	if x != nil {
		return x.PathCookie
	}
	return 0
}

func (x *BgpRouteEntry) GetRoutePreference() *BgpAttrib32 {
	if x != nil {
		return x.RoutePreference
	}
	return nil
}

func (x *BgpRouteEntry) GetLocalPreference() *BgpAttrib32 {
	if x != nil {
		return x.LocalPreference
	}
	return nil
}

func (x *BgpRouteEntry) GetMed() *BgpAttrib32 {
	if x != nil {
		return x.Med
	}
	return nil
}

func (x *BgpRouteEntry) GetAigpDistance() *BgpAttrib64 {
	if x != nil {
		return x.AigpDistance
	}
	return nil
}

func (m *BgpRouteEntry) GetLabelInfo() isBgpRouteEntry_LabelInfo {
	if m != nil {
		return m.LabelInfo
	}
	return nil
}

func (x *BgpRouteEntry) GetVpnLabel() uint32 {
	if x, ok := x.GetLabelInfo().(*BgpRouteEntry_VpnLabel); ok {
		return x.VpnLabel
	}
	return 0
}

func (x *BgpRouteEntry) GetLabels() *prpd.LabelStack {
	if x, ok := x.GetLabelInfo().(*BgpRouteEntry_Labels); ok {
		return x.Labels
	}
	return nil
}

func (x *BgpRouteEntry) GetCommunities() *CommunityList {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpRouteEntry) GetAspath() *AsPath {
	if x != nil {
		return x.Aspath
	}
	return nil
}

func (x *BgpRouteEntry) GetOriginatorId() *BgpAttrib32 {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

func (x *BgpRouteEntry) GetClusterList() []*BgpAttrib32 {
	if x != nil {
		return x.ClusterList
	}
	return nil
}

func (x *BgpRouteEntry) GetClusterId() *BgpAttrib32 {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

// Deprecated: Marked as deprecated in bgp_route_service.proto.
func (x *BgpRouteEntry) GetRouteOperFlag() uint32 {
	if x != nil {
		return x.RouteOperFlag
	}
	return 0
}

func (x *BgpRouteEntry) GetProtocolNexthops() []*common.IpAddress {
	if x != nil {
		return x.ProtocolNexthops
	}
	return nil
}

func (x *BgpRouteEntry) GetRouteType() BgpPeerType {
	if x != nil {
		return x.RouteType
	}
	return BgpPeerType_BGP_INTERNAL
}

func (x *BgpRouteEntry) GetRouteFlags() *BgpRouteOperationFlags {
	if x != nil {
		return x.RouteFlags
	}
	return nil
}

func (x *BgpRouteEntry) GetRouteData() *prpd.AddressFamilySpecificData {
	if x != nil {
		return x.RouteData
	}
	return nil
}

func (x *BgpRouteEntry) GetTunnelAttributes() *TunnelEncapAttribute {
	if x != nil {
		return x.TunnelAttributes
	}
	return nil
}

type isBgpRouteEntry_LabelInfo interface {
	isBgpRouteEntry_LabelInfo()
}

type BgpRouteEntry_VpnLabel struct {
	//* A valid 20-bit unsigned label value must be less than decimal
	//  value 1048576 and not within the reserved label range of
	//  4 through 15 (inclusive). It is not possible to set ToS bits
	//  in this case.
	VpnLabel uint32 `protobuf:"varint,10,opt,name=vpn_label,json=vpnLabel,proto3,oneof"`
}

type BgpRouteEntry_Labels struct {
	//* A properly constructed label stack which may include VPN label
	//  in addition to a BGP-LU label stack. NOTE: label stack is not
	//  supported in this release of the API.
	Labels *prpd.LabelStack `protobuf:"bytes,11,opt,name=labels,proto3,oneof"`
}

func (*BgpRouteEntry_VpnLabel) isBgpRouteEntry_LabelInfo() {}

func (*BgpRouteEntry_Labels) isBgpRouteEntry_LabelInfo() {}

//*
// A monitoring entry for a single BGP route streamed from BGP when the
// client has registered for route monitoring with BgpRouteMonitorRegister().
type BgpRouteMonitorEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The operation type
	Operation BgpRouteMonitorEntry_BgpRouteMonitorOper `protobuf:"varint,1,opt,name=operation,proto3,enum=routing.BgpRouteMonitorEntry_BgpRouteMonitorOper" json:"operation,omitempty"`
	//*
	//  The route that is the subject of this route monitoring operation.
	//  If the operation is END_OF_RIBS, then no route will be
	//  present here.
	BgpRoute *BgpRouteEntry `protobuf:"bytes,2,opt,name=bgp_route,json=bgpRoute,proto3" json:"bgp_route,omitempty"`
}

func (x *BgpRouteMonitorEntry) Reset() {
	*x = BgpRouteMonitorEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorEntry) ProtoMessage() {}

func (x *BgpRouteMonitorEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorEntry.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorEntry) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{12}
}

func (x *BgpRouteMonitorEntry) GetOperation() BgpRouteMonitorEntry_BgpRouteMonitorOper {
	if x != nil {
		return x.Operation
	}
	return BgpRouteMonitorEntry_ROUTE_UPDATE
}

func (x *BgpRouteMonitorEntry) GetBgpRoute() *BgpRouteEntry {
	if x != nil {
		return x.BgpRoute
	}
	return nil
}

//*
// Request to initialize the BGP route service. No parameters are needed.
type BgpRouteInitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteInitializeRequest) Reset() {
	*x = BgpRouteInitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteInitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteInitializeRequest) ProtoMessage() {}

func (x *BgpRouteInitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteInitializeRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteInitializeRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{13}
}

//*
// BGP route service initialize reply containing the status of the operation.
// Replies indicate to the client whether any old routing state was
// recovered and rebound to this connection.
type BgpRouteInitializeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The final return code for the request.
	Status BgpRouteInitializeReply_BgpRouteInitializeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteInitializeReply_BgpRouteInitializeStatus" json:"status,omitempty"`
	//* Valid only when status is CLEANUP_PENDING and will indicate the number
	// of routes on the gateway, giving an idea of the time required to cleanup
	GwNRoutes uint32 `protobuf:"varint,2,opt,name=gw_n_routes,json=gwNRoutes,proto3" json:"gw_n_routes,omitempty"`
}

func (x *BgpRouteInitializeReply) Reset() {
	*x = BgpRouteInitializeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteInitializeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteInitializeReply) ProtoMessage() {}

func (x *BgpRouteInitializeReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteInitializeReply.ProtoReflect.Descriptor instead.
func (*BgpRouteInitializeReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{14}
}

func (x *BgpRouteInitializeReply) GetStatus() BgpRouteInitializeReply_BgpRouteInitializeStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteInitializeReply_SUCCESS
}

func (x *BgpRouteInitializeReply) GetGwNRoutes() uint32 {
	if x != nil {
		return x.GwNRoutes
	}
	return 0
}

//*
// Request to reset the BGP route service.
// Any routes that were added by the client will be removed during the
// cleanup of the client's state. No parameters are needed.
type BgpRouteCleanupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteCleanupRequest) Reset() {
	*x = BgpRouteCleanupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteCleanupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteCleanupRequest) ProtoMessage() {}

func (x *BgpRouteCleanupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteCleanupRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteCleanupRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{15}
}

//*
// Route service cleanup reply containing the status of the operation.
type BgpRouteCleanupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The final return code for the request.
	Status BgpRouteCleanupReply_BgpRouteCleanupStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteCleanupReply_BgpRouteCleanupStatus" json:"status,omitempty"`
}

func (x *BgpRouteCleanupReply) Reset() {
	*x = BgpRouteCleanupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteCleanupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteCleanupReply) ProtoMessage() {}

func (x *BgpRouteCleanupReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteCleanupReply.ProtoReflect.Descriptor instead.
func (*BgpRouteCleanupReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{16}
}

func (x *BgpRouteCleanupReply) GetStatus() BgpRouteCleanupReply_BgpRouteCleanupStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteCleanupReply_SUCCESS
}

//*
// Route add, modify, or update operation request parameters.
type BgpRouteUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* One or more programmed bgp routes to add, udpate, or modify.
	//  REQUIRED
	BgpRoutes []*BgpRouteEntry `protobuf:"bytes,1,rep,name=bgp_routes,json=bgpRoutes,proto3" json:"bgp_routes,omitempty"`
}

func (x *BgpRouteUpdateRequest) Reset() {
	*x = BgpRouteUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteUpdateRequest) ProtoMessage() {}

func (x *BgpRouteUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteUpdateRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteUpdateRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{17}
}

func (x *BgpRouteUpdateRequest) GetBgpRoutes() []*BgpRouteEntry {
	if x != nil {
		return x.BgpRoutes
	}
	return nil
}

//*
// Route remove operation request parameters.
type BgpRouteRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* If or_longer is FALSE only routes for the exact destination
	//  prefix and prefix length will be matched.
	//  If or_longer is TRUE, routes for the given destination prefix
	//  or longer prefixes will be matched.
	//  Optional (default is FALSE)
	OrLonger bool `protobuf:"varint,1,opt,name=or_longer,json=orLonger,proto3" json:"or_longer,omitempty"`
	//* One or more programmed bgp routes to remove. REQUIRED
	BgpRoutes []*BgpRouteMatch `protobuf:"bytes,2,rep,name=bgp_routes,json=bgpRoutes,proto3" json:"bgp_routes,omitempty"`
}

func (x *BgpRouteRemoveRequest) Reset() {
	*x = BgpRouteRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteRemoveRequest) ProtoMessage() {}

func (x *BgpRouteRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteRemoveRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteRemoveRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{18}
}

func (x *BgpRouteRemoveRequest) GetOrLonger() bool {
	if x != nil {
		return x.OrLonger
	}
	return false
}

func (x *BgpRouteRemoveRequest) GetBgpRoutes() []*BgpRouteMatch {
	if x != nil {
		return x.BgpRoutes
	}
	return nil
}

//*
// Route get operation request parameters.
type BgpRouteGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Route matching parameters
	BgpRoute *BgpRouteMatch `protobuf:"bytes,1,opt,name=bgp_route,json=bgpRoute,proto3" json:"bgp_route,omitempty"`
	//* If or_longer is FALSE only routes for the exact destination
	//  prefix and prefix length will be matched.
	//  If or_longer is TRUE, routes for the given destination prefix
	//  or longer prefixes will be matched.
	//  Optional (default is FALSE)
	OrLonger bool `protobuf:"varint,2,opt,name=or_longer,json=orLonger,proto3" json:"or_longer,omitempty"`
	//* If active_only is TRUE, inactive and hidden routes for a matching
	//  prefix will be omitted from the results. If FALSE, inactive
	//  and hidden routes are also returned. Optional (default is FALSE)
	ActiveOnly bool `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	//* The format for IP addresses in the replies to this request.
	//  Optional (default is string)
	ReplyAddressFormat common.AddressFormat `protobuf:"varint,4,opt,name=reply_address_format,json=replyAddressFormat,proto3,enum=jnxBase.AddressFormat" json:"reply_address_format,omitempty"`
	//* The format for IP addresses in the replies to this request.
	//  Optional (default is string)
	ReplyTableFormat prpd.RouteTableFormat `protobuf:"varint,5,opt,name=reply_table_format,json=replyTableFormat,proto3,enum=routing.RouteTableFormat" json:"reply_table_format,omitempty"`
	//* The maximum number of routes requested in each reply.
	//  Replies will be streamed in multiple RPCs each having no more
	//  routes than given by this value. Counts from 1 through the maximum of
	//  1000 may be specified. A value of zero indcates that
	//  the server will choose an appropriate. Optional (default 1)
	RouteCount uint32 `protobuf:"varint,6,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *BgpRouteGetRequest) Reset() {
	*x = BgpRouteGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteGetRequest) ProtoMessage() {}

func (x *BgpRouteGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteGetRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteGetRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{19}
}

func (x *BgpRouteGetRequest) GetBgpRoute() *BgpRouteMatch {
	if x != nil {
		return x.BgpRoute
	}
	return nil
}

func (x *BgpRouteGetRequest) GetOrLonger() bool {
	if x != nil {
		return x.OrLonger
	}
	return false
}

func (x *BgpRouteGetRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

func (x *BgpRouteGetRequest) GetReplyAddressFormat() common.AddressFormat {
	if x != nil {
		return x.ReplyAddressFormat
	}
	return common.AddressFormat(0)
}

func (x *BgpRouteGetRequest) GetReplyTableFormat() prpd.RouteTableFormat {
	if x != nil {
		return x.ReplyTableFormat
	}
	return prpd.RouteTableFormat(0)
}

func (x *BgpRouteGetRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

//*
// Route operation reply containing the status of the operation.
// Replies always returns the final status (either success or the first error
// encountered) and the number of routes that were successfully processed
// prior to any error or full completion of the request.
type BgpRouteOperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The final return code for the request.
	Status BgpRouteOperReply_BgpRouteOperStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteOperReply_BgpRouteOperStatus" json:"status,omitempty"`
	//* The number of requested operations for which the operation
	// completed successfully. Note that in the case of remove
	// operations with or_longer=TRUE or cookie=0, this is not the number of
	// routes matched and removed.
	OperationsCompleted uint32 `protobuf:"varint,2,opt,name=operations_completed,json=operationsCompleted,proto3" json:"operations_completed,omitempty"`
}

func (x *BgpRouteOperReply) Reset() {
	*x = BgpRouteOperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteOperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteOperReply) ProtoMessage() {}

func (x *BgpRouteOperReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteOperReply.ProtoReflect.Descriptor instead.
func (*BgpRouteOperReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{20}
}

func (x *BgpRouteOperReply) GetStatus() BgpRouteOperReply_BgpRouteOperStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteOperReply_SUCCESS
}

func (x *BgpRouteOperReply) GetOperationsCompleted() uint32 {
	if x != nil {
		return x.OperationsCompleted
	}
	return 0
}

//*
// Route get reply containing the status of the operation and the full or
// partial set of matching routes, depending on how many reply RPCs the
// stream of routes is split among.
type BgpRouteGetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The final return code for the request.
	Status BgpRouteGetReply_BgpRouteGetStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteGetReply_BgpRouteGetStatus" json:"status,omitempty"`
	//* One or more matching bgp routes.
	BgpRoutes []*BgpRouteEntry `protobuf:"bytes,2,rep,name=bgp_routes,json=bgpRoutes,proto3" json:"bgp_routes,omitempty"`
}

func (x *BgpRouteGetReply) Reset() {
	*x = BgpRouteGetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteGetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteGetReply) ProtoMessage() {}

func (x *BgpRouteGetReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteGetReply.ProtoReflect.Descriptor instead.
func (*BgpRouteGetReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{21}
}

func (x *BgpRouteGetReply) GetStatus() BgpRouteGetReply_BgpRouteGetStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteGetReply_SUCCESS
}

func (x *BgpRouteGetReply) GetBgpRoutes() []*BgpRouteEntry {
	if x != nil {
		return x.BgpRoutes
	}
	return nil
}

//*
// Route register operation request parameters. Registers the client
// for streaming route monitoring.
type BgpRouteMonitorRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//  The format for IP addresses in the replies to this request.
	//  Optional (default is string)
	ReplyAddressFormat common.AddressFormat `protobuf:"varint,1,opt,name=reply_address_format,json=replyAddressFormat,proto3,enum=jnxBase.AddressFormat" json:"reply_address_format,omitempty"`
	//*
	//  The format for IP addresses in the replies to this request.
	//  Optional (default is string)
	ReplyTableFormat prpd.RouteTableFormat `protobuf:"varint,2,opt,name=reply_table_format,json=replyTableFormat,proto3,enum=routing.RouteTableFormat" json:"reply_table_format,omitempty"`
	//*
	//  The maximum number of routes requested in each monitoring message.
	//  Replies will be streamed in multiple RPCs each having no more
	//  routes than given by this value. Counts from 1 through the maximum of
	//  1000 may be specified. A value of zero indcates that
	//  the server will choose an appropriate value. Optional (default 1)
	RouteCount uint32 `protobuf:"varint,3,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
}

func (x *BgpRouteMonitorRegisterRequest) Reset() {
	*x = BgpRouteMonitorRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorRegisterRequest) ProtoMessage() {}

func (x *BgpRouteMonitorRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorRegisterRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorRegisterRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{22}
}

func (x *BgpRouteMonitorRegisterRequest) GetReplyAddressFormat() common.AddressFormat {
	if x != nil {
		return x.ReplyAddressFormat
	}
	return common.AddressFormat(0)
}

func (x *BgpRouteMonitorRegisterRequest) GetReplyTableFormat() prpd.RouteTableFormat {
	if x != nil {
		return x.ReplyTableFormat
	}
	return prpd.RouteTableFormat(0)
}

func (x *BgpRouteMonitorRegisterRequest) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

//*
// The route registration reply is returned immediately upon initial
// registration for route monitoring via a call to BgpRouteMonitorRegister.
// Subsequently, monitoring entries are streamed via replies containing
// route information and status.
type BgpRouteMonitorRegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* The return code for the registration operation.
	Status BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus" json:"status,omitempty"`
	//*
	//  A set of monitoring entries for individual routes or
	//  the end-of-ribs indication.
	MonitorEntries []*BgpRouteMonitorEntry `protobuf:"bytes,2,rep,name=monitor_entries,json=monitorEntries,proto3" json:"monitor_entries,omitempty"`
}

func (x *BgpRouteMonitorRegisterReply) Reset() {
	*x = BgpRouteMonitorRegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorRegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorRegisterReply) ProtoMessage() {}

func (x *BgpRouteMonitorRegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorRegisterReply.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorRegisterReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{23}
}

func (x *BgpRouteMonitorRegisterReply) GetStatus() BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteMonitorRegisterReply_SUCCESS
}

func (x *BgpRouteMonitorRegisterReply) GetMonitorEntries() []*BgpRouteMonitorEntry {
	if x != nil {
		return x.MonitorEntries
	}
	return nil
}

//*
// Request to unregister the client from the BGP route monitoring.
// No parameters are needed.
type BgpRouteMonitorUnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteMonitorUnregisterRequest) Reset() {
	*x = BgpRouteMonitorUnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorUnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorUnregisterRequest) ProtoMessage() {}

func (x *BgpRouteMonitorUnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorUnregisterRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorUnregisterRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{24}
}

//*
// The route unregistration reply confirms that the client has
// unregistered for route updates.
type BgpRouteMonitorUnregisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The return code for the unregiter operation.
	Status BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus" json:"status,omitempty"`
}

func (x *BgpRouteMonitorUnregisterReply) Reset() {
	*x = BgpRouteMonitorUnregisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorUnregisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorUnregisterReply) ProtoMessage() {}

func (x *BgpRouteMonitorUnregisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorUnregisterReply.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorUnregisterReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{25}
}

func (x *BgpRouteMonitorUnregisterReply) GetStatus() BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteMonitorUnregisterReply_SUCCESS
}

//*
// Request to refresh all route monitoring entries to the client.
// No parameters are needed.
type BgpRouteMonitorRefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteMonitorRefreshRequest) Reset() {
	*x = BgpRouteMonitorRefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorRefreshRequest) ProtoMessage() {}

func (x *BgpRouteMonitorRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorRefreshRequest.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorRefreshRequest) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{26}
}

//*
// The route Refresh reply confirms that the client has
// triggered a refresh of route monitoring entries, which
// will be delivered followed by End-of-RIBs via the
// BgpRouteMonitorRegisterReply stream.
type BgpRouteMonitorRefreshReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The return code for the refresh operation.
	Status BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus `protobuf:"varint,1,opt,name=status,proto3,enum=routing.BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus" json:"status,omitempty"`
}

func (x *BgpRouteMonitorRefreshReply) Reset() {
	*x = BgpRouteMonitorRefreshReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_route_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteMonitorRefreshReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMonitorRefreshReply) ProtoMessage() {}

func (x *BgpRouteMonitorRefreshReply) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_route_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMonitorRefreshReply.ProtoReflect.Descriptor instead.
func (*BgpRouteMonitorRefreshReply) Descriptor() ([]byte, []int) {
	return file_bgp_route_service_proto_rawDescGZIP(), []int{27}
}

func (x *BgpRouteMonitorRefreshReply) GetStatus() BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus {
	if x != nil {
		return x.Status
	}
	return BgpRouteMonitorRefreshReply_SUCCESS
}

var File_bgp_route_service_proto protoreflect.FileDescriptor

var file_bgp_route_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x1a, 0x0e, 0x6a, 0x6e, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x70, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x42, 0x67, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x06, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x51, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x70, 0x69, 0x70, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x70, 0x49, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x70,
	0x69, 0x70, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x17, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42,
	0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x49, 0x70, 0x49, 0x70, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x33, 0x32, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xad, 0x09, 0x0a, 0x0d,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33, 0x32, 0x52, 0x0f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33, 0x32, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33,
	0x32, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x69, 0x67, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x36, 0x34, 0x52, 0x0c, 0x61, 0x69, 0x67, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x70, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x76, 0x70, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x73, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x61, 0x73, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x39, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33, 0x32, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33, 0x32, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x33, 0x32,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x41, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x14,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f,
	0x52, 0x49, 0x42, 0x53, 0x10, 0x02, 0x22, 0x1b, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x77, 0x5f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x77, 0x4e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x45,
	0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x06, 0x22, 0x18, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x14,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4d, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x4e, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x67, 0x70,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x6b, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x09, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbb, 0x02,
	0x0a, 0x12, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x08, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf0, 0x09, 0x0a, 0x11,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xe0, 0x08, 0x0a, 0x12,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x4f,
	0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f,
	0x4f, 0x50, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x52, 0x59, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x52, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x21, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x4d, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x4c, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x22, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x52, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x24, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x52, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x26, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x27, 0x12, 0x28,
	0x0a, 0x24, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x4e, 0x48, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x29, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x52, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x4c, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x2a, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x54, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x2b, 0x22, 0xbc,
	0x04, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x67, 0x70, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22,
	0xab, 0x03, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x0c,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0f,
	0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x4d, 0x54, 0x43,
	0x48, 0x5f, 0x46, 0x4c, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x4f, 0x57, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x11, 0x22, 0xd4, 0x01,
	0x0a, 0x1e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6a, 0x6e, 0x78, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x03, 0x0a, 0x1c, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x07, 0x22, 0x22, 0x0a, 0x20, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x1e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a,
	0x1f, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0x1f, 0x0a, 0x1d, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x1b,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0x4b, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x65, 0x0a,
	0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x11, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a,
	0x0d, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x48, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x04,
	0x1a, 0x02, 0x08, 0x01, 0x2a, 0x31, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x32, 0x91, 0x07, 0x0a, 0x08, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x6d, 0x0a, 0x17, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x71,
	0x0a, 0x19, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x26, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2f,
	0x6a, 0x6e, 0x78, 0x2f, 0x6a, 0x65, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bgp_route_service_proto_rawDescOnce sync.Once
	file_bgp_route_service_proto_rawDescData = file_bgp_route_service_proto_rawDesc
)

func file_bgp_route_service_proto_rawDescGZIP() []byte {
	file_bgp_route_service_proto_rawDescOnce.Do(func() {
		file_bgp_route_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgp_route_service_proto_rawDescData)
	})
	return file_bgp_route_service_proto_rawDescData
}

var file_bgp_route_service_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_bgp_route_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_bgp_route_service_proto_goTypes = []interface{}{
	(RouteProtocol)(0),  // 0: routing.RouteProtocol
	(RouteOperation)(0), // 1: routing.RouteOperation
	(BgpPeerType)(0),    // 2: routing.BgpPeerType
	(BgpRouteMonitorEntry_BgpRouteMonitorOper)(0),                       // 3: routing.BgpRouteMonitorEntry.BgpRouteMonitorOper
	(BgpRouteInitializeReply_BgpRouteInitializeStatus)(0),               // 4: routing.BgpRouteInitializeReply.BgpRouteInitializeStatus
	(BgpRouteCleanupReply_BgpRouteCleanupStatus)(0),                     // 5: routing.BgpRouteCleanupReply.BgpRouteCleanupStatus
	(BgpRouteOperReply_BgpRouteOperStatus)(0),                           // 6: routing.BgpRouteOperReply.BgpRouteOperStatus
	(BgpRouteGetReply_BgpRouteGetStatus)(0),                             // 7: routing.BgpRouteGetReply.BgpRouteGetStatus
	(BgpRouteMonitorRegisterReply_BgpRouteMonitorRegisterStatus)(0),     // 8: routing.BgpRouteMonitorRegisterReply.BgpRouteMonitorRegisterStatus
	(BgpRouteMonitorUnregisterReply_BgpRouteMonitorUnregisterStatus)(0), // 9: routing.BgpRouteMonitorUnregisterReply.BgpRouteMonitorUnregisterStatus
	(BgpRouteMonitorRefreshReply_BgpRouteMonitorRefreshStatus)(0),       // 10: routing.BgpRouteMonitorRefreshReply.BgpRouteMonitorRefreshStatus
	(*BgpRouteOperationFlags)(nil),                                      // 11: routing.BgpRouteOperationFlags
	(*BgpAttrib32)(nil),                                                 // 12: routing.BgpAttrib32
	(*BgpAttrib64)(nil),                                                 // 13: routing.BgpAttrib64
	(*Community)(nil),                                                   // 14: routing.Community
	(*CommunityList)(nil),                                               // 15: routing.CommunityList
	(*AsPath)(nil),                                                      // 16: routing.AsPath
	(*BgpRouteMatch)(nil),                                               // 17: routing.BgpRouteMatch
	(*TunnelEncapAttribute)(nil),                                        // 18: routing.TunnelEncapAttribute
	(*TunnelAttribute)(nil),                                             // 19: routing.TunnelAttribute
	(*EgressEndpoint)(nil),                                              // 20: routing.EgressEndpoint
	(*IpIpTunnelAttributes)(nil),                                        // 21: routing.IpIpTunnelAttributes
	(*BgpRouteEntry)(nil),                                               // 22: routing.BgpRouteEntry
	(*BgpRouteMonitorEntry)(nil),                                        // 23: routing.BgpRouteMonitorEntry
	(*BgpRouteInitializeRequest)(nil),                                   // 24: routing.BgpRouteInitializeRequest
	(*BgpRouteInitializeReply)(nil),                                     // 25: routing.BgpRouteInitializeReply
	(*BgpRouteCleanupRequest)(nil),                                      // 26: routing.BgpRouteCleanupRequest
	(*BgpRouteCleanupReply)(nil),                                        // 27: routing.BgpRouteCleanupReply
	(*BgpRouteUpdateRequest)(nil),                                       // 28: routing.BgpRouteUpdateRequest
	(*BgpRouteRemoveRequest)(nil),                                       // 29: routing.BgpRouteRemoveRequest
	(*BgpRouteGetRequest)(nil),                                          // 30: routing.BgpRouteGetRequest
	(*BgpRouteOperReply)(nil),                                           // 31: routing.BgpRouteOperReply
	(*BgpRouteGetReply)(nil),                                            // 32: routing.BgpRouteGetReply
	(*BgpRouteMonitorRegisterRequest)(nil),                              // 33: routing.BgpRouteMonitorRegisterRequest
	(*BgpRouteMonitorRegisterReply)(nil),                                // 34: routing.BgpRouteMonitorRegisterReply
	(*BgpRouteMonitorUnregisterRequest)(nil),                            // 35: routing.BgpRouteMonitorUnregisterRequest
	(*BgpRouteMonitorUnregisterReply)(nil),                              // 36: routing.BgpRouteMonitorUnregisterReply
	(*BgpRouteMonitorRefreshRequest)(nil),                               // 37: routing.BgpRouteMonitorRefreshRequest
	(*BgpRouteMonitorRefreshReply)(nil),                                 // 38: routing.BgpRouteMonitorRefreshReply
	(*prpd.RoutePrefix)(nil),                                            // 39: routing.RoutePrefix
	(*prpd.RouteTable)(nil),                                             // 40: routing.RouteTable
	(*common.IpAddress)(nil),                                            // 41: jnxBase.IpAddress
	(*prpd.LabelStack)(nil),                                             // 42: routing.LabelStack
	(*prpd.AddressFamilySpecificData)(nil),                              // 43: routing.AddressFamilySpecificData
	(common.AddressFormat)(0),                                           // 44: jnxBase.AddressFormat
	(prpd.RouteTableFormat)(0),                                          // 45: routing.RouteTableFormat
}
var file_bgp_route_service_proto_depIdxs = []int32{
	14, // 0: routing.CommunityList.com_list:type_name -> routing.Community
	39, // 1: routing.BgpRouteMatch.dest_prefix:type_name -> routing.RoutePrefix
	40, // 2: routing.BgpRouteMatch.table:type_name -> routing.RouteTable
	0,  // 3: routing.BgpRouteMatch.protocol:type_name -> routing.RouteProtocol
	15, // 4: routing.BgpRouteMatch.communities:type_name -> routing.CommunityList
	19, // 5: routing.TunnelEncapAttribute.tunnel_list:type_name -> routing.TunnelAttribute
	21, // 6: routing.TunnelAttribute.ipip_tunnel:type_name -> routing.IpIpTunnelAttributes
	41, // 7: routing.EgressEndpoint.egress_endpoint_address:type_name -> jnxBase.IpAddress
	20, // 8: routing.IpIpTunnelAttributes.egress_endpoint:type_name -> routing.EgressEndpoint
	12, // 9: routing.IpIpTunnelAttributes.color:type_name -> routing.BgpAttrib32
	39, // 10: routing.BgpRouteEntry.dest_prefix:type_name -> routing.RoutePrefix
	40, // 11: routing.BgpRouteEntry.table:type_name -> routing.RouteTable
	0,  // 12: routing.BgpRouteEntry.protocol:type_name -> routing.RouteProtocol
	12, // 13: routing.BgpRouteEntry.route_preference:type_name -> routing.BgpAttrib32
	12, // 14: routing.BgpRouteEntry.local_preference:type_name -> routing.BgpAttrib32
	12, // 15: routing.BgpRouteEntry.med:type_name -> routing.BgpAttrib32
	13, // 16: routing.BgpRouteEntry.aigp_distance:type_name -> routing.BgpAttrib64
	42, // 17: routing.BgpRouteEntry.labels:type_name -> routing.LabelStack
	15, // 18: routing.BgpRouteEntry.communities:type_name -> routing.CommunityList
	16, // 19: routing.BgpRouteEntry.aspath:type_name -> routing.AsPath
	12, // 20: routing.BgpRouteEntry.originator_id:type_name -> routing.BgpAttrib32
	12, // 21: routing.BgpRouteEntry.cluster_list:type_name -> routing.BgpAttrib32
	12, // 22: routing.BgpRouteEntry.cluster_id:type_name -> routing.BgpAttrib32
	41, // 23: routing.BgpRouteEntry.protocol_nexthops:type_name -> jnxBase.IpAddress
	2,  // 24: routing.BgpRouteEntry.route_type:type_name -> routing.BgpPeerType
	11, // 25: routing.BgpRouteEntry.route_flags:type_name -> routing.BgpRouteOperationFlags
	43, // 26: routing.BgpRouteEntry.route_data:type_name -> routing.AddressFamilySpecificData
	18, // 27: routing.BgpRouteEntry.tunnel_attributes:type_name -> routing.TunnelEncapAttribute
	3,  // 28: routing.BgpRouteMonitorEntry.operation:type_name -> routing.BgpRouteMonitorEntry.BgpRouteMonitorOper
	22, // 29: routing.BgpRouteMonitorEntry.bgp_route:type_name -> routing.BgpRouteEntry
	4,  // 30: routing.BgpRouteInitializeReply.status:type_name -> routing.BgpRouteInitializeReply.BgpRouteInitializeStatus
	5,  // 31: routing.BgpRouteCleanupReply.status:type_name -> routing.BgpRouteCleanupReply.BgpRouteCleanupStatus
	22, // 32: routing.BgpRouteUpdateRequest.bgp_routes:type_name -> routing.BgpRouteEntry
	17, // 33: routing.BgpRouteRemoveRequest.bgp_routes:type_name -> routing.BgpRouteMatch
	17, // 34: routing.BgpRouteGetRequest.bgp_route:type_name -> routing.BgpRouteMatch
	44, // 35: routing.BgpRouteGetRequest.reply_address_format:type_name -> jnxBase.AddressFormat
	45, // 36: routing.BgpRouteGetRequest.reply_table_format:type_name -> routing.RouteTableFormat
	6,  // 37: routing.BgpRouteOperReply.status:type_name -> routing.BgpRouteOperReply.BgpRouteOperStatus
	7,  // 38: routing.BgpRouteGetReply.status:type_name -> routing.BgpRouteGetReply.BgpRouteGetStatus
	22, // 39: routing.BgpRouteGetReply.bgp_routes:type_name -> routing.BgpRouteEntry
	44, // 40: routing.BgpRouteMonitorRegisterRequest.reply_address_format:type_name -> jnxBase.AddressFormat
	45, // 41: routing.BgpRouteMonitorRegisterRequest.reply_table_format:type_name -> routing.RouteTableFormat
	8,  // 42: routing.BgpRouteMonitorRegisterReply.status:type_name -> routing.BgpRouteMonitorRegisterReply.BgpRouteMonitorRegisterStatus
	23, // 43: routing.BgpRouteMonitorRegisterReply.monitor_entries:type_name -> routing.BgpRouteMonitorEntry
	9,  // 44: routing.BgpRouteMonitorUnregisterReply.status:type_name -> routing.BgpRouteMonitorUnregisterReply.BgpRouteMonitorUnregisterStatus
	10, // 45: routing.BgpRouteMonitorRefreshReply.status:type_name -> routing.BgpRouteMonitorRefreshReply.BgpRouteMonitorRefreshStatus
	24, // 46: routing.BgpRoute.BgpRouteInitialize:input_type -> routing.BgpRouteInitializeRequest
	26, // 47: routing.BgpRoute.BgpRouteCleanup:input_type -> routing.BgpRouteCleanupRequest
	28, // 48: routing.BgpRoute.BgpRouteAdd:input_type -> routing.BgpRouteUpdateRequest
	28, // 49: routing.BgpRoute.BgpRouteModify:input_type -> routing.BgpRouteUpdateRequest
	28, // 50: routing.BgpRoute.BgpRouteUpdate:input_type -> routing.BgpRouteUpdateRequest
	29, // 51: routing.BgpRoute.BgpRouteRemove:input_type -> routing.BgpRouteRemoveRequest
	30, // 52: routing.BgpRoute.BgpRouteGet:input_type -> routing.BgpRouteGetRequest
	33, // 53: routing.BgpRoute.BgpRouteMonitorRegister:input_type -> routing.BgpRouteMonitorRegisterRequest
	35, // 54: routing.BgpRoute.BgpRouteMonitorUnregister:input_type -> routing.BgpRouteMonitorUnregisterRequest
	37, // 55: routing.BgpRoute.BgpRouteMonitorRefresh:input_type -> routing.BgpRouteMonitorRefreshRequest
	25, // 56: routing.BgpRoute.BgpRouteInitialize:output_type -> routing.BgpRouteInitializeReply
	27, // 57: routing.BgpRoute.BgpRouteCleanup:output_type -> routing.BgpRouteCleanupReply
	31, // 58: routing.BgpRoute.BgpRouteAdd:output_type -> routing.BgpRouteOperReply
	31, // 59: routing.BgpRoute.BgpRouteModify:output_type -> routing.BgpRouteOperReply
	31, // 60: routing.BgpRoute.BgpRouteUpdate:output_type -> routing.BgpRouteOperReply
	31, // 61: routing.BgpRoute.BgpRouteRemove:output_type -> routing.BgpRouteOperReply
	32, // 62: routing.BgpRoute.BgpRouteGet:output_type -> routing.BgpRouteGetReply
	34, // 63: routing.BgpRoute.BgpRouteMonitorRegister:output_type -> routing.BgpRouteMonitorRegisterReply
	36, // 64: routing.BgpRoute.BgpRouteMonitorUnregister:output_type -> routing.BgpRouteMonitorUnregisterReply
	38, // 65: routing.BgpRoute.BgpRouteMonitorRefresh:output_type -> routing.BgpRouteMonitorRefreshReply
	56, // [56:66] is the sub-list for method output_type
	46, // [46:56] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_bgp_route_service_proto_init() }
func file_bgp_route_service_proto_init() {
	if File_bgp_route_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bgp_route_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteOperationFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAttrib32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAttrib64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIpTunnelAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteInitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteInitializeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteCleanupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteCleanupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteOperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteGetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorRegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorUnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorUnregisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorRefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_route_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteMonitorRefreshReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bgp_route_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TunnelAttribute_IpipTunnel)(nil),
	}
	file_bgp_route_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*BgpRouteEntry_VpnLabel)(nil),
		(*BgpRouteEntry_Labels)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgp_route_service_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bgp_route_service_proto_goTypes,
		DependencyIndexes: file_bgp_route_service_proto_depIdxs,
		EnumInfos:         file_bgp_route_service_proto_enumTypes,
		MessageInfos:      file_bgp_route_service_proto_msgTypes,
	}.Build()
	File_bgp_route_service_proto = out.File
	file_bgp_route_service_proto_rawDesc = nil
	file_bgp_route_service_proto_goTypes = nil
	file_bgp_route_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BgpRouteClient is the client API for BgpRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BgpRouteClient interface {
	//* BGP Routing Initialize operation
	//  BgpRouteInitialize() must be called upon connection or reconnection
	//  to the server. If the client is connecting for the first time, the
	//  server will initialize per-client state for the connection.
	//  If the client is reconnecting with the same client name following a
	//  connection fault (having not closed a previous connection with
	//  BgpRouteCleanup), then gateway and route state will be rebound to
	//  the new connection.
	//  In this case, the return status will indicate that state was rebound
	//  and the client need not reply the previous routing state to the
	//  server.
	BgpRouteInitialize(ctx context.Context, in *BgpRouteInitializeRequest, opts ...grpc.CallOption) (*BgpRouteInitializeReply, error)
	//* BGP Routing Cleanup operation
	//  BgpRouteCleanup will purge all gateway and route state for the
	//  client.
	BgpRouteCleanup(ctx context.Context, in *BgpRouteCleanupRequest, opts ...grpc.CallOption) (*BgpRouteCleanupReply, error)
	//* BGP Route Add operation
	//  Add a BGP-Static route to the routing table.
	//  bgp_route_add may be called multiple times for the same prefix to add
	//  multiple paths with distinct path_cookie for the same destination.
	//  If a matching route already exists in the given table, then an error
	//  will be returned.
	//  BgpRouteUpdateRequest may contain from one to 1000 routes
	//  to be added.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully created
	//  prior to any error or full completion of the request.
	BgpRouteAdd(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error)
	//* BGP Route Modify operation
	// Modify an existing BGP-Static route in the routing table. For each
	// route in the request, if the route_key is matched, the matched route
	// will be updated with the supplied route attributes.
	// If a matching route does not exist in the given table, then an error
	// will be returned.
	// BgpRouteUpdateRequest may contain from one to 1000 routes
	// to be added.
	// If the request contains multiple routes, the routes will
	// be processed in the order given and the first error encountered will
	// cause the request to abort.
	// The API always returns the final status (success or first error
	// encountered) and the number of routes that were successfully modified
	// prior to any error or full completion of the request.
	BgpRouteModify(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error)
	//* BGP Route Update operation
	//  Create a new BGP-Static route if a matching route does not exist, OR
	//  modify an existing BGP-Static route if it is already present in the
	//  routing table.
	//  BgpRouteUpdateRequest may contain from one to 1000 routes
	//  to be added.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully modified
	//  prior to any error or full completion of the request.
	BgpRouteUpdate(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error)
	//* BGP Route Remove operation
	//  Remove a BGP-Static route from the routing table.
	//  BgpRouteRemove may be called multiple times for the same prefix
	//  to remove multiple paths with distinct path_cookie for the same
	//  destination.
	//  The request may contain from one to 1000 routes
	//  to be removed.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully modified
	//  prior to any error or full completion of the request.
	BgpRouteRemove(ctx context.Context, in *BgpRouteRemoveRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error)
	//* BGP Route Get operation
	//  Lookup a BGP or BGP-Static protocol route from the routing table.
	//  All match parameters are optional.
	//  Match fields that are not specified or that
	//  may match more than one route (e.g. a less-specific destination
	//  prefix) may result in multiple routes being returned in the replies.
	//  Only BGP and BGP-Static routes will be matched.
	//  Replies are streamed until all match routes have been sent. The
	//  client will receive a final null message once all routes have
	//  been received.
	//  The server's walk of search results is not atomic so route changes
	//  during streaming and consumption of replies may or may not be
	//  reflected in the results.
	//  See BgpRouteGetReply.
	BgpRouteGet(ctx context.Context, in *BgpRouteGetRequest, opts ...grpc.CallOption) (BgpRoute_BgpRouteGetClient, error)
	//*
	//  BGP Route Monitoring Registration
	//  Register to receive updates streamed from BGP when routes matching
	//  the bgp-import "analyze" policy action are added, modified, or
	//  withdrawn by BGP peers.
	//  Updates will be streamed as BgpRouteMonitorRegisterReply mesages
	//  BgpRouteMonitorUnregister() is called.
	//  Upon initial registration, a full download of route ADD operations for
	//  all routes matching the "analyze" import policy action will be
	//  streamed, followed by a closing END_OF_RIB operation. Subsequently,
	//  incremental updates will be streamed whenever BGP advertisements
	//  from peers are added, modified, or withdrawn, or when BGP import
	//  "analyze" policy is changed.
	//  There is no strict ordering of routes in the update stream and
	//  state compression is applied when applicable to a set of operations.
	BgpRouteMonitorRegister(ctx context.Context, in *BgpRouteMonitorRegisterRequest, opts ...grpc.CallOption) (BgpRoute_BgpRouteMonitorRegisterClient, error)
	//*
	// BGP Route Monitoring Unregistration
	// Generated client API: BgpRouteMonitorUnregister()
	// Unregister to receive updates streamed from BGP when routes are
	// added, modified, or withdrawn by BGP peers.
	BgpRouteMonitorUnregister(ctx context.Context, in *BgpRouteMonitorUnregisterRequest, opts ...grpc.CallOption) (*BgpRouteMonitorUnregisterReply, error)
	//*
	// BGP Route Monitoring Refresh
	// Generated client API: BgpRouteMonitorRefresh()
	// Request to refresh all route monitoring entries to the client.
	BgpRouteMonitorRefresh(ctx context.Context, in *BgpRouteMonitorRefreshRequest, opts ...grpc.CallOption) (*BgpRouteMonitorRefreshReply, error)
}

type bgpRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpRouteClient(cc grpc.ClientConnInterface) BgpRouteClient {
	return &bgpRouteClient{cc}
}

func (c *bgpRouteClient) BgpRouteInitialize(ctx context.Context, in *BgpRouteInitializeRequest, opts ...grpc.CallOption) (*BgpRouteInitializeReply, error) {
	out := new(BgpRouteInitializeReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteInitialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteCleanup(ctx context.Context, in *BgpRouteCleanupRequest, opts ...grpc.CallOption) (*BgpRouteCleanupReply, error) {
	out := new(BgpRouteCleanupReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteCleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteAdd(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error) {
	out := new(BgpRouteOperReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteModify(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error) {
	out := new(BgpRouteOperReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteUpdate(ctx context.Context, in *BgpRouteUpdateRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error) {
	out := new(BgpRouteOperReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteRemove(ctx context.Context, in *BgpRouteRemoveRequest, opts ...grpc.CallOption) (*BgpRouteOperReply, error) {
	out := new(BgpRouteOperReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteGet(ctx context.Context, in *BgpRouteGetRequest, opts ...grpc.CallOption) (BgpRoute_BgpRouteGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BgpRoute_serviceDesc.Streams[0], "/routing.BgpRoute/BgpRouteGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpRouteBgpRouteGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpRoute_BgpRouteGetClient interface {
	Recv() (*BgpRouteGetReply, error)
	grpc.ClientStream
}

type bgpRouteBgpRouteGetClient struct {
	grpc.ClientStream
}

func (x *bgpRouteBgpRouteGetClient) Recv() (*BgpRouteGetReply, error) {
	m := new(BgpRouteGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpRouteClient) BgpRouteMonitorRegister(ctx context.Context, in *BgpRouteMonitorRegisterRequest, opts ...grpc.CallOption) (BgpRoute_BgpRouteMonitorRegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BgpRoute_serviceDesc.Streams[1], "/routing.BgpRoute/BgpRouteMonitorRegister", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpRouteBgpRouteMonitorRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpRoute_BgpRouteMonitorRegisterClient interface {
	Recv() (*BgpRouteMonitorRegisterReply, error)
	grpc.ClientStream
}

type bgpRouteBgpRouteMonitorRegisterClient struct {
	grpc.ClientStream
}

func (x *bgpRouteBgpRouteMonitorRegisterClient) Recv() (*BgpRouteMonitorRegisterReply, error) {
	m := new(BgpRouteMonitorRegisterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpRouteClient) BgpRouteMonitorUnregister(ctx context.Context, in *BgpRouteMonitorUnregisterRequest, opts ...grpc.CallOption) (*BgpRouteMonitorUnregisterReply, error) {
	out := new(BgpRouteMonitorUnregisterReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteMonitorUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpRouteClient) BgpRouteMonitorRefresh(ctx context.Context, in *BgpRouteMonitorRefreshRequest, opts ...grpc.CallOption) (*BgpRouteMonitorRefreshReply, error) {
	out := new(BgpRouteMonitorRefreshReply)
	err := c.cc.Invoke(ctx, "/routing.BgpRoute/BgpRouteMonitorRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpRouteServer is the server API for BgpRoute service.
type BgpRouteServer interface {
	//* BGP Routing Initialize operation
	//  BgpRouteInitialize() must be called upon connection or reconnection
	//  to the server. If the client is connecting for the first time, the
	//  server will initialize per-client state for the connection.
	//  If the client is reconnecting with the same client name following a
	//  connection fault (having not closed a previous connection with
	//  BgpRouteCleanup), then gateway and route state will be rebound to
	//  the new connection.
	//  In this case, the return status will indicate that state was rebound
	//  and the client need not reply the previous routing state to the
	//  server.
	BgpRouteInitialize(context.Context, *BgpRouteInitializeRequest) (*BgpRouteInitializeReply, error)
	//* BGP Routing Cleanup operation
	//  BgpRouteCleanup will purge all gateway and route state for the
	//  client.
	BgpRouteCleanup(context.Context, *BgpRouteCleanupRequest) (*BgpRouteCleanupReply, error)
	//* BGP Route Add operation
	//  Add a BGP-Static route to the routing table.
	//  bgp_route_add may be called multiple times for the same prefix to add
	//  multiple paths with distinct path_cookie for the same destination.
	//  If a matching route already exists in the given table, then an error
	//  will be returned.
	//  BgpRouteUpdateRequest may contain from one to 1000 routes
	//  to be added.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully created
	//  prior to any error or full completion of the request.
	BgpRouteAdd(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error)
	//* BGP Route Modify operation
	// Modify an existing BGP-Static route in the routing table. For each
	// route in the request, if the route_key is matched, the matched route
	// will be updated with the supplied route attributes.
	// If a matching route does not exist in the given table, then an error
	// will be returned.
	// BgpRouteUpdateRequest may contain from one to 1000 routes
	// to be added.
	// If the request contains multiple routes, the routes will
	// be processed in the order given and the first error encountered will
	// cause the request to abort.
	// The API always returns the final status (success or first error
	// encountered) and the number of routes that were successfully modified
	// prior to any error or full completion of the request.
	BgpRouteModify(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error)
	//* BGP Route Update operation
	//  Create a new BGP-Static route if a matching route does not exist, OR
	//  modify an existing BGP-Static route if it is already present in the
	//  routing table.
	//  BgpRouteUpdateRequest may contain from one to 1000 routes
	//  to be added.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully modified
	//  prior to any error or full completion of the request.
	BgpRouteUpdate(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error)
	//* BGP Route Remove operation
	//  Remove a BGP-Static route from the routing table.
	//  BgpRouteRemove may be called multiple times for the same prefix
	//  to remove multiple paths with distinct path_cookie for the same
	//  destination.
	//  The request may contain from one to 1000 routes
	//  to be removed.
	//  If the request contains multiple routes, the routes will
	//  be processed in the order given and the first error encountered will
	//  cause the request to abort.
	//  The API always returns the final status (success or first error
	//  encountered) and the number of routes that were successfully modified
	//  prior to any error or full completion of the request.
	BgpRouteRemove(context.Context, *BgpRouteRemoveRequest) (*BgpRouteOperReply, error)
	//* BGP Route Get operation
	//  Lookup a BGP or BGP-Static protocol route from the routing table.
	//  All match parameters are optional.
	//  Match fields that are not specified or that
	//  may match more than one route (e.g. a less-specific destination
	//  prefix) may result in multiple routes being returned in the replies.
	//  Only BGP and BGP-Static routes will be matched.
	//  Replies are streamed until all match routes have been sent. The
	//  client will receive a final null message once all routes have
	//  been received.
	//  The server's walk of search results is not atomic so route changes
	//  during streaming and consumption of replies may or may not be
	//  reflected in the results.
	//  See BgpRouteGetReply.
	BgpRouteGet(*BgpRouteGetRequest, BgpRoute_BgpRouteGetServer) error
	//*
	//  BGP Route Monitoring Registration
	//  Register to receive updates streamed from BGP when routes matching
	//  the bgp-import "analyze" policy action are added, modified, or
	//  withdrawn by BGP peers.
	//  Updates will be streamed as BgpRouteMonitorRegisterReply mesages
	//  BgpRouteMonitorUnregister() is called.
	//  Upon initial registration, a full download of route ADD operations for
	//  all routes matching the "analyze" import policy action will be
	//  streamed, followed by a closing END_OF_RIB operation. Subsequently,
	//  incremental updates will be streamed whenever BGP advertisements
	//  from peers are added, modified, or withdrawn, or when BGP import
	//  "analyze" policy is changed.
	//  There is no strict ordering of routes in the update stream and
	//  state compression is applied when applicable to a set of operations.
	BgpRouteMonitorRegister(*BgpRouteMonitorRegisterRequest, BgpRoute_BgpRouteMonitorRegisterServer) error
	//*
	// BGP Route Monitoring Unregistration
	// Generated client API: BgpRouteMonitorUnregister()
	// Unregister to receive updates streamed from BGP when routes are
	// added, modified, or withdrawn by BGP peers.
	BgpRouteMonitorUnregister(context.Context, *BgpRouteMonitorUnregisterRequest) (*BgpRouteMonitorUnregisterReply, error)
	//*
	// BGP Route Monitoring Refresh
	// Generated client API: BgpRouteMonitorRefresh()
	// Request to refresh all route monitoring entries to the client.
	BgpRouteMonitorRefresh(context.Context, *BgpRouteMonitorRefreshRequest) (*BgpRouteMonitorRefreshReply, error)
}

// UnimplementedBgpRouteServer can be embedded to have forward compatible implementations.
type UnimplementedBgpRouteServer struct {
}

func (*UnimplementedBgpRouteServer) BgpRouteInitialize(context.Context, *BgpRouteInitializeRequest) (*BgpRouteInitializeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteInitialize not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteCleanup(context.Context, *BgpRouteCleanupRequest) (*BgpRouteCleanupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteCleanup not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteAdd(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteAdd not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteModify(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteModify not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteUpdate(context.Context, *BgpRouteUpdateRequest) (*BgpRouteOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteUpdate not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteRemove(context.Context, *BgpRouteRemoveRequest) (*BgpRouteOperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteRemove not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteGet(*BgpRouteGetRequest, BgpRoute_BgpRouteGetServer) error {
	return status.Errorf(codes.Unimplemented, "method BgpRouteGet not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteMonitorRegister(*BgpRouteMonitorRegisterRequest, BgpRoute_BgpRouteMonitorRegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method BgpRouteMonitorRegister not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteMonitorUnregister(context.Context, *BgpRouteMonitorUnregisterRequest) (*BgpRouteMonitorUnregisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteMonitorUnregister not implemented")
}
func (*UnimplementedBgpRouteServer) BgpRouteMonitorRefresh(context.Context, *BgpRouteMonitorRefreshRequest) (*BgpRouteMonitorRefreshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BgpRouteMonitorRefresh not implemented")
}

func RegisterBgpRouteServer(s *grpc.Server, srv BgpRouteServer) {
	s.RegisterService(&_BgpRoute_serviceDesc, srv)
}

func _BgpRoute_BgpRouteInitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteInitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteInitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteInitialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteInitialize(ctx, req.(*BgpRouteInitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteCleanup(ctx, req.(*BgpRouteCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteAdd(ctx, req.(*BgpRouteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteModify(ctx, req.(*BgpRouteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteUpdate(ctx, req.(*BgpRouteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteRemove(ctx, req.(*BgpRouteRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BgpRouteGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpRouteServer).BgpRouteGet(m, &bgpRouteBgpRouteGetServer{stream})
}

type BgpRoute_BgpRouteGetServer interface {
	Send(*BgpRouteGetReply) error
	grpc.ServerStream
}

type bgpRouteBgpRouteGetServer struct {
	grpc.ServerStream
}

func (x *bgpRouteBgpRouteGetServer) Send(m *BgpRouteGetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpRoute_BgpRouteMonitorRegister_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BgpRouteMonitorRegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpRouteServer).BgpRouteMonitorRegister(m, &bgpRouteBgpRouteMonitorRegisterServer{stream})
}

type BgpRoute_BgpRouteMonitorRegisterServer interface {
	Send(*BgpRouteMonitorRegisterReply) error
	grpc.ServerStream
}

type bgpRouteBgpRouteMonitorRegisterServer struct {
	grpc.ServerStream
}

func (x *bgpRouteBgpRouteMonitorRegisterServer) Send(m *BgpRouteMonitorRegisterReply) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpRoute_BgpRouteMonitorUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteMonitorUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteMonitorUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteMonitorUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteMonitorUnregister(ctx, req.(*BgpRouteMonitorUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpRoute_BgpRouteMonitorRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpRouteMonitorRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpRouteServer).BgpRouteMonitorRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.BgpRoute/BgpRouteMonitorRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpRouteServer).BgpRouteMonitorRefresh(ctx, req.(*BgpRouteMonitorRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BgpRoute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routing.BgpRoute",
	HandlerType: (*BgpRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BgpRouteInitialize",
			Handler:    _BgpRoute_BgpRouteInitialize_Handler,
		},
		{
			MethodName: "BgpRouteCleanup",
			Handler:    _BgpRoute_BgpRouteCleanup_Handler,
		},
		{
			MethodName: "BgpRouteAdd",
			Handler:    _BgpRoute_BgpRouteAdd_Handler,
		},
		{
			MethodName: "BgpRouteModify",
			Handler:    _BgpRoute_BgpRouteModify_Handler,
		},
		{
			MethodName: "BgpRouteUpdate",
			Handler:    _BgpRoute_BgpRouteUpdate_Handler,
		},
		{
			MethodName: "BgpRouteRemove",
			Handler:    _BgpRoute_BgpRouteRemove_Handler,
		},
		{
			MethodName: "BgpRouteMonitorUnregister",
			Handler:    _BgpRoute_BgpRouteMonitorUnregister_Handler,
		},
		{
			MethodName: "BgpRouteMonitorRefresh",
			Handler:    _BgpRoute_BgpRouteMonitorRefresh_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BgpRouteGet",
			Handler:       _BgpRoute_BgpRouteGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BgpRouteMonitorRegister",
			Handler:       _BgpRoute_BgpRouteMonitorRegister_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bgp_route_service.proto",
}
